{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of Copy of mel_spec_pix2pix",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Laxmaan/Emotional-Speech-Synthesis/blob/main/Pix2pix%20to%20convert%20from%20normal%20mel%20spectrogram%20to%20emotional\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7wNjDKdQy35h"
      },
      "source": [
        "# Install"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "D27DLWGWobIj",
        "outputId": "122602c0-dd19-4eea-efd0-ffbec44d0eca",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 122
        }
      },
      "source": [
        "# mount drive to access data\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n",
            "\n",
            "Enter your authorization code:\n",
            "··········\n",
            "Mounted at /content/drive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VFOLU7cx7udI"
      },
      "source": [
        "import os\n",
        "os.chdir('drive/My Drive/IST597/pix2pix')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TRm-USlsHgEV",
        "outputId": "c0458eb7-1146-4042-f4c1-8c692fced0af",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 102
        }
      },
      "source": [
        "!git clone https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Cloning into 'pytorch-CycleGAN-and-pix2pix'...\n",
            "remote: Enumerating objects: 2238, done.\u001b[K\n",
            "remote: Total 2238 (delta 0), reused 0 (delta 0), pack-reused 2238\u001b[K\n",
            "Receiving objects: 100% (2238/2238), 8.04 MiB | 3.99 MiB/s, done.\n",
            "Resolving deltas: 100% (1449/1449), done.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Pt3igws3eiVp"
      },
      "source": [
        "os.chdir('pytorch-CycleGAN-and-pix2pix/')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "z1EySlOXwwoa",
        "outputId": "ab4585a8-b434-46cd-efa9-4115fdcff89a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 663
        }
      },
      "source": [
        "!pip install -r requirements.txt"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: torch>=0.4.1 in /usr/local/lib/python3.6/dist-packages (from -r requirements.txt (line 1)) (1.5.0+cu101)\n",
            "Requirement already satisfied: torchvision>=0.2.1 in /usr/local/lib/python3.6/dist-packages (from -r requirements.txt (line 2)) (0.6.0+cu101)\n",
            "Collecting dominate>=2.3.1\n",
            "  Downloading https://files.pythonhosted.org/packages/4f/e6/794a119963b7cfe4bd41177c8f9d4195fe901652f04189fbd2edf513c7b2/dominate-2.5.1-py2.py3-none-any.whl\n",
            "Collecting visdom>=0.1.8.3\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/c9/75/e078f5a2e1df7e0d3044749089fc2823e62d029cc027ed8ae5d71fafcbdc/visdom-0.1.8.9.tar.gz (676kB)\n",
            "\u001b[K     |████████████████████████████████| 686kB 11.3MB/s \n",
            "\u001b[?25hRequirement already satisfied: future in /usr/local/lib/python3.6/dist-packages (from torch>=0.4.1->-r requirements.txt (line 1)) (0.16.0)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from torch>=0.4.1->-r requirements.txt (line 1)) (1.18.3)\n",
            "Requirement already satisfied: pillow>=4.1.1 in /usr/local/lib/python3.6/dist-packages (from torchvision>=0.2.1->-r requirements.txt (line 2)) (7.0.0)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.6/dist-packages (from visdom>=0.1.8.3->-r requirements.txt (line 4)) (1.4.1)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from visdom>=0.1.8.3->-r requirements.txt (line 4)) (2.23.0)\n",
            "Requirement already satisfied: tornado in /usr/local/lib/python3.6/dist-packages (from visdom>=0.1.8.3->-r requirements.txt (line 4)) (4.5.3)\n",
            "Requirement already satisfied: pyzmq in /usr/local/lib/python3.6/dist-packages (from visdom>=0.1.8.3->-r requirements.txt (line 4)) (19.0.0)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from visdom>=0.1.8.3->-r requirements.txt (line 4)) (1.12.0)\n",
            "Collecting jsonpatch\n",
            "  Downloading https://files.pythonhosted.org/packages/82/53/73ca86f2a680c705dcd1708be4887c559dfe9ed250486dd3ccd8821b8ccb/jsonpatch-1.25-py2.py3-none-any.whl\n",
            "Collecting torchfile\n",
            "  Downloading https://files.pythonhosted.org/packages/91/af/5b305f86f2d218091af657ddb53f984ecbd9518ca9fe8ef4103a007252c9/torchfile-0.1.0.tar.gz\n",
            "Collecting websocket-client\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/4c/5f/f61b420143ed1c8dc69f9eaec5ff1ac36109d52c80de49d66e0c36c3dfdf/websocket_client-0.57.0-py2.py3-none-any.whl (200kB)\n",
            "\u001b[K     |████████████████████████████████| 204kB 47.1MB/s \n",
            "\u001b[?25hRequirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests->visdom>=0.1.8.3->-r requirements.txt (line 4)) (3.0.4)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->visdom>=0.1.8.3->-r requirements.txt (line 4)) (2.9)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests->visdom>=0.1.8.3->-r requirements.txt (line 4)) (2020.4.5.1)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests->visdom>=0.1.8.3->-r requirements.txt (line 4)) (1.24.3)\n",
            "Collecting jsonpointer>=1.9\n",
            "  Downloading https://files.pythonhosted.org/packages/18/b0/a80d29577c08eea401659254dfaed87f1af45272899e1812d7e01b679bc5/jsonpointer-2.0-py2.py3-none-any.whl\n",
            "Building wheels for collected packages: visdom, torchfile\n",
            "  Building wheel for visdom (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for visdom: filename=visdom-0.1.8.9-cp36-none-any.whl size=655250 sha256=b2b2925af18b281b59a38e4a2de3e57403f7f0ec02e856eb9611334a023dd1f7\n",
            "  Stored in directory: /root/.cache/pip/wheels/70/19/a7/6d589ed967f4dfefd33bc166d081257bd4ed0cb618dccfd62a\n",
            "  Building wheel for torchfile (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for torchfile: filename=torchfile-0.1.0-cp36-none-any.whl size=5712 sha256=ae1f3481df0aacac94d7f10e4083ec262c3fcb264dd03f07e4c852c6974fc16e\n",
            "  Stored in directory: /root/.cache/pip/wheels/b1/c3/d6/9a1cc8f3a99a0fc1124cae20153f36af59a6e683daca0a0814\n",
            "Successfully built visdom torchfile\n",
            "Installing collected packages: dominate, jsonpointer, jsonpatch, torchfile, websocket-client, visdom\n",
            "Successfully installed dominate-2.5.1 jsonpatch-1.25 jsonpointer-2.0 torchfile-0.1.0 visdom-0.1.8.9 websocket-client-0.57.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vrdOettJxaCc",
        "outputId": "393f3aaf-08c5-4bf9-ee65-54e06504212e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        }
      },
      "source": [
        "!bash python datasets/combine_A_and_B.py --fold_A '../drive/My Drive/pix2pix_angry/A' --fold_B '../drive/My Drive/pix2pix_angry/B' --fold_AB '../drive/My Drive/pix2pix_angry/AB'"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[fold_A] =  ../drive/My Drive/pix2pix_angry/A\n",
            "[fold_B] =  ../drive/My Drive/pix2pix_angry/B\n",
            "[fold_AB] =  ../drive/My Drive/pix2pix_angry/AB\n",
            "[num_imgs] =  1000000\n",
            "[use_AB] =  False\n",
            "split = val, use 157/157 images\n",
            "split = val, number of images = 157\n",
            "split = train, use 690/690 images\n",
            "split = train, number of images = 690\n",
            "split = test, use 154/154 images\n",
            "split = test, number of images = 154\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yFw1kDQBx3LN"
      },
      "source": [
        "# Training\n",
        "\n",
        "-   `python train.py --dataroot ./datasets/facades --name facades_pix2pix --model pix2pix --direction BtoA`\n",
        "\n",
        "Change the `--dataroot` and `--name` to your own dataset's path and model's name. Use `--gpu_ids 0,1,..` to train on multiple GPUs and `--batch_size` to change the batch size. Add `--direction BtoA` if you want to train a model to transfrom from class B to A."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0sp7TCT2x9dB",
        "outputId": "ebb7477e-336f-48ae-e5a8-852a48f9d97a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "!python train.py --dataroot '../AB1' --name mel_pix2pix --model pix2pix --preprocess crop --crop_size 80 --direction AtoB --netG resnet_6blocks --n_epochs 300 --n_epochs_decay 300 --checkpoints_dir './checkpoints' --epoch_count 264 --continue_train"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "----------------- Options ---------------\n",
            "               batch_size: 1                             \n",
            "                    beta1: 0.5                           \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "           continue_train: False                         \n",
            "                crop_size: 80                            \t[default: 256]\n",
            "                 dataroot: ../AB1                        \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "              display_env: main                          \n",
            "             display_freq: 400                           \n",
            "               display_id: 1                             \n",
            "            display_ncols: 4                             \n",
            "             display_port: 8097                          \n",
            "           display_server: http://localhost              \n",
            "          display_winsize: 256                           \n",
            "                    epoch: latest                        \n",
            "              epoch_count: 1                             \n",
            "                 gan_mode: vanilla                       \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: True                          \t[default: None]\n",
            "                lambda_L1: 100.0                         \n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 286                           \n",
            "                       lr: 0.0002                        \n",
            "           lr_decay_iters: 50                            \n",
            "                lr_policy: linear                        \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: cycle_gan]\n",
            "                 n_epochs: 300                           \t[default: 100]\n",
            "           n_epochs_decay: 300                           \t[default: 100]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                  no_html: False                         \n",
            "                     norm: batch                         \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: train                         \n",
            "                pool_size: 0                             \n",
            "               preprocess: crop                          \t[default: resize_and_crop]\n",
            "               print_freq: 100                           \n",
            "             save_by_iter: False                         \n",
            "          save_epoch_freq: 5                             \n",
            "         save_latest_freq: 5000                          \n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "         update_html_freq: 1000                          \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "The number of training images = 296\n",
            "initialize network with normal\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "[Network D] Total number of parameters : 2.769 M\n",
            "-----------------------------------------------\n",
            "Setting up a new session...\n",
            "create web directory ./checkpoints/mel_pix2pix/web...\n",
            "(epoch: 1, iters: 100, time: 0.025, data: 0.903) G_GAN: 3.009 G_L1: 37.768 D_real: 0.171 D_fake: 0.055 \n",
            "(epoch: 1, iters: 200, time: 0.026, data: 0.002) G_GAN: 3.394 G_L1: 37.531 D_real: 0.126 D_fake: 0.942 \n",
            "End of epoch 1 / 600 \t Time Taken: 41 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 2, iters: 4, time: 0.025, data: 0.005) G_GAN: 2.846 G_L1: 27.491 D_real: 0.114 D_fake: 0.089 \n",
            "(epoch: 2, iters: 104, time: 0.062, data: 0.000) G_GAN: 3.656 G_L1: 26.475 D_real: 0.407 D_fake: 0.232 \n",
            "(epoch: 2, iters: 204, time: 0.024, data: 0.001) G_GAN: 2.779 G_L1: 30.606 D_real: 0.307 D_fake: 0.058 \n",
            "End of epoch 2 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 3, iters: 8, time: 0.022, data: 0.001) G_GAN: 2.865 G_L1: 26.469 D_real: 0.106 D_fake: 0.752 \n",
            "(epoch: 3, iters: 108, time: 0.028, data: 0.001) G_GAN: 3.137 G_L1: 31.196 D_real: 2.637 D_fake: 0.013 \n",
            "(epoch: 3, iters: 208, time: 0.055, data: 0.001) G_GAN: 4.855 G_L1: 44.651 D_real: 0.010 D_fake: 0.751 \n",
            "End of epoch 3 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 4, iters: 12, time: 0.022, data: 0.001) G_GAN: 2.420 G_L1: 35.283 D_real: 0.113 D_fake: 0.303 \n",
            "(epoch: 4, iters: 112, time: 0.024, data: 0.001) G_GAN: 2.496 G_L1: 34.644 D_real: 0.060 D_fake: 0.105 \n",
            "(epoch: 4, iters: 212, time: 0.024, data: 0.001) G_GAN: 2.956 G_L1: 37.235 D_real: 0.013 D_fake: 0.183 \n",
            "End of epoch 4 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 5, iters: 16, time: 0.060, data: 0.001) G_GAN: 2.775 G_L1: 31.361 D_real: 0.030 D_fake: 1.070 \n",
            "(epoch: 5, iters: 116, time: 0.025, data: 0.001) G_GAN: 1.049 G_L1: 29.138 D_real: 1.041 D_fake: 0.187 \n",
            "(epoch: 5, iters: 216, time: 0.022, data: 0.001) G_GAN: 4.955 G_L1: 39.694 D_real: 0.022 D_fake: 0.617 \n",
            "saving the model at the end of epoch 5, iters 1480\n",
            "End of epoch 5 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 6, iters: 20, time: 0.022, data: 0.001) G_GAN: 3.772 G_L1: 27.973 D_real: 0.268 D_fake: 0.017 \n",
            "(epoch: 6, iters: 120, time: 0.058, data: 0.001) G_GAN: 2.081 G_L1: 26.018 D_real: 0.329 D_fake: 0.069 \n",
            "(epoch: 6, iters: 220, time: 0.037, data: 0.001) G_GAN: 2.934 G_L1: 46.323 D_real: 0.012 D_fake: 0.246 \n",
            "End of epoch 6 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 7, iters: 24, time: 0.025, data: 0.003) G_GAN: 2.503 G_L1: 28.442 D_real: 0.248 D_fake: 0.080 \n",
            "(epoch: 7, iters: 124, time: 0.027, data: 0.001) G_GAN: 4.156 G_L1: 34.524 D_real: 0.030 D_fake: 0.023 \n",
            "(epoch: 7, iters: 224, time: 0.059, data: 0.001) G_GAN: 3.357 G_L1: 21.665 D_real: 0.089 D_fake: 0.143 \n",
            "End of epoch 7 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 8, iters: 28, time: 0.022, data: 0.001) G_GAN: 2.753 G_L1: 36.223 D_real: 0.050 D_fake: 0.584 \n",
            "(epoch: 8, iters: 128, time: 0.027, data: 0.001) G_GAN: 2.223 G_L1: 29.213 D_real: 0.399 D_fake: 0.198 \n",
            "(epoch: 8, iters: 228, time: 0.028, data: 0.001) G_GAN: 0.949 G_L1: 33.408 D_real: 0.788 D_fake: 0.086 \n",
            "End of epoch 8 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 9, iters: 32, time: 0.060, data: 0.001) G_GAN: 3.311 G_L1: 28.095 D_real: 0.027 D_fake: 0.158 \n",
            "(epoch: 9, iters: 132, time: 0.026, data: 0.001) G_GAN: 1.939 G_L1: 31.108 D_real: 0.629 D_fake: 0.340 \n",
            "(epoch: 9, iters: 232, time: 0.023, data: 0.001) G_GAN: 2.627 G_L1: 28.352 D_real: 0.074 D_fake: 0.280 \n",
            "End of epoch 9 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 10, iters: 36, time: 0.023, data: 0.001) G_GAN: 4.726 G_L1: 56.382 D_real: 0.020 D_fake: 0.032 \n",
            "(epoch: 10, iters: 136, time: 0.063, data: 0.001) G_GAN: 2.825 G_L1: 39.330 D_real: 0.052 D_fake: 0.156 \n",
            "(epoch: 10, iters: 236, time: 0.025, data: 0.001) G_GAN: 2.425 G_L1: 18.498 D_real: 0.134 D_fake: 0.140 \n",
            "saving the model at the end of epoch 10, iters 2960\n",
            "End of epoch 10 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 11, iters: 40, time: 0.024, data: 0.001) G_GAN: 5.805 G_L1: 35.416 D_real: 0.003 D_fake: 2.117 \n",
            "(epoch: 11, iters: 140, time: 0.023, data: 0.001) G_GAN: 3.320 G_L1: 30.384 D_real: 0.066 D_fake: 0.084 \n",
            "(epoch: 11, iters: 240, time: 0.064, data: 0.001) G_GAN: 3.655 G_L1: 33.041 D_real: 0.008 D_fake: 0.815 \n",
            "End of epoch 11 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 12, iters: 44, time: 0.023, data: 0.001) G_GAN: 3.513 G_L1: 42.028 D_real: 0.003 D_fake: 0.143 \n",
            "(epoch: 12, iters: 144, time: 0.028, data: 0.001) G_GAN: 4.383 G_L1: 29.423 D_real: 1.039 D_fake: 0.009 \n",
            "(epoch: 12, iters: 244, time: 0.024, data: 0.001) G_GAN: 3.908 G_L1: 24.001 D_real: 0.282 D_fake: 0.025 \n",
            "End of epoch 12 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 13, iters: 48, time: 0.070, data: 0.001) G_GAN: 2.834 G_L1: 26.432 D_real: 0.078 D_fake: 0.163 \n",
            "(epoch: 13, iters: 148, time: 0.030, data: 0.001) G_GAN: 2.402 G_L1: 43.624 D_real: 0.851 D_fake: 0.031 \n",
            "(epoch: 13, iters: 248, time: 0.023, data: 0.002) G_GAN: 1.568 G_L1: 28.089 D_real: 0.828 D_fake: 0.056 \n",
            "End of epoch 13 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 14, iters: 52, time: 0.022, data: 0.001) G_GAN: 4.455 G_L1: 22.987 D_real: 0.119 D_fake: 1.280 \n",
            "(epoch: 14, iters: 152, time: 0.086, data: 0.001) G_GAN: 2.542 G_L1: 23.846 D_real: 0.441 D_fake: 0.174 \n",
            "(epoch: 14, iters: 252, time: 0.023, data: 0.001) G_GAN: 3.546 G_L1: 24.306 D_real: 0.153 D_fake: 0.298 \n",
            "End of epoch 14 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 15, iters: 56, time: 0.023, data: 0.001) G_GAN: 3.303 G_L1: 22.665 D_real: 0.057 D_fake: 0.121 \n",
            "(epoch: 15, iters: 156, time: 0.024, data: 0.001) G_GAN: 3.096 G_L1: 33.757 D_real: 0.163 D_fake: 0.095 \n",
            "(epoch: 15, iters: 256, time: 0.065, data: 0.001) G_GAN: 6.004 G_L1: 33.435 D_real: 0.384 D_fake: 0.013 \n",
            "saving the model at the end of epoch 15, iters 4440\n",
            "End of epoch 15 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 16, iters: 60, time: 0.023, data: 0.001) G_GAN: 4.328 G_L1: 37.409 D_real: 0.002 D_fake: 0.511 \n",
            "(epoch: 16, iters: 160, time: 0.023, data: 0.001) G_GAN: 3.418 G_L1: 14.381 D_real: 0.154 D_fake: 0.732 \n",
            "(epoch: 16, iters: 260, time: 0.022, data: 0.001) G_GAN: 4.345 G_L1: 41.527 D_real: 0.083 D_fake: 0.089 \n",
            "End of epoch 16 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 17, iters: 64, time: 0.105, data: 0.002) G_GAN: 4.188 G_L1: 33.274 D_real: 0.340 D_fake: 0.011 \n",
            "(epoch: 17, iters: 164, time: 0.025, data: 0.001) G_GAN: 4.865 G_L1: 39.821 D_real: 0.022 D_fake: 0.010 \n",
            "(epoch: 17, iters: 264, time: 0.024, data: 0.001) G_GAN: 4.930 G_L1: 24.599 D_real: 0.016 D_fake: 0.075 \n",
            "saving the latest model (epoch 17, total_iters 5000)\n",
            "End of epoch 17 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 18, iters: 68, time: 0.025, data: 0.001) G_GAN: 4.178 G_L1: 27.144 D_real: 1.181 D_fake: 0.003 \n",
            "(epoch: 18, iters: 168, time: 0.074, data: 0.001) G_GAN: 6.095 G_L1: 37.638 D_real: 0.427 D_fake: 0.003 \n",
            "(epoch: 18, iters: 268, time: 0.029, data: 0.001) G_GAN: 5.076 G_L1: 38.176 D_real: 0.023 D_fake: 0.017 \n",
            "End of epoch 18 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 19, iters: 72, time: 0.028, data: 0.001) G_GAN: 2.187 G_L1: 33.395 D_real: 0.772 D_fake: 0.057 \n",
            "(epoch: 19, iters: 172, time: 0.028, data: 0.001) G_GAN: 2.496 G_L1: 29.529 D_real: 0.346 D_fake: 0.164 \n",
            "(epoch: 19, iters: 272, time: 0.210, data: 0.001) G_GAN: 3.348 G_L1: 37.365 D_real: 0.004 D_fake: 0.036 \n",
            "End of epoch 19 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 20, iters: 76, time: 0.023, data: 0.001) G_GAN: 2.585 G_L1: 29.951 D_real: 0.324 D_fake: 0.389 \n",
            "(epoch: 20, iters: 176, time: 0.023, data: 0.001) G_GAN: 3.436 G_L1: 24.259 D_real: 0.371 D_fake: 0.143 \n",
            "(epoch: 20, iters: 276, time: 0.023, data: 0.001) G_GAN: 4.754 G_L1: 22.185 D_real: 0.018 D_fake: 2.746 \n",
            "saving the model at the end of epoch 20, iters 5920\n",
            "End of epoch 20 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 21, iters: 80, time: 0.079, data: 0.001) G_GAN: 3.803 G_L1: 22.584 D_real: 0.004 D_fake: 0.118 \n",
            "(epoch: 21, iters: 180, time: 0.023, data: 0.001) G_GAN: 2.509 G_L1: 31.570 D_real: 0.010 D_fake: 0.288 \n",
            "(epoch: 21, iters: 280, time: 0.025, data: 0.001) G_GAN: 3.051 G_L1: 21.904 D_real: 0.107 D_fake: 0.089 \n",
            "End of epoch 21 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 22, iters: 84, time: 0.026, data: 0.001) G_GAN: 1.860 G_L1: 23.411 D_real: 0.366 D_fake: 0.091 \n",
            "(epoch: 22, iters: 184, time: 0.095, data: 0.001) G_GAN: 5.120 G_L1: 51.456 D_real: 0.001 D_fake: 0.523 \n",
            "(epoch: 22, iters: 284, time: 0.029, data: 0.001) G_GAN: 4.378 G_L1: 43.492 D_real: 0.023 D_fake: 0.129 \n",
            "End of epoch 22 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 23, iters: 88, time: 0.024, data: 0.001) G_GAN: 4.529 G_L1: 31.697 D_real: 0.005 D_fake: 0.585 \n",
            "(epoch: 23, iters: 188, time: 0.023, data: 0.001) G_GAN: 3.020 G_L1: 27.510 D_real: 0.271 D_fake: 0.267 \n",
            "(epoch: 23, iters: 288, time: 0.073, data: 0.001) G_GAN: 0.899 G_L1: 20.771 D_real: 1.841 D_fake: 0.022 \n",
            "End of epoch 23 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 24, iters: 92, time: 0.024, data: 0.001) G_GAN: 2.363 G_L1: 31.322 D_real: 0.183 D_fake: 0.175 \n",
            "(epoch: 24, iters: 192, time: 0.024, data: 0.001) G_GAN: 3.232 G_L1: 22.225 D_real: 0.931 D_fake: 0.010 \n",
            "(epoch: 24, iters: 292, time: 0.026, data: 0.001) G_GAN: 5.053 G_L1: 33.201 D_real: 0.031 D_fake: 0.023 \n",
            "End of epoch 24 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 25, iters: 96, time: 0.074, data: 0.001) G_GAN: 1.543 G_L1: 22.814 D_real: 0.994 D_fake: 0.651 \n",
            "(epoch: 25, iters: 196, time: 0.030, data: 0.001) G_GAN: 5.513 G_L1: 25.118 D_real: 0.088 D_fake: 0.003 \n",
            "(epoch: 25, iters: 296, time: 0.022, data: 0.001) G_GAN: 3.484 G_L1: 23.763 D_real: 0.050 D_fake: 0.040 \n",
            "saving the model at the end of epoch 25, iters 7400\n",
            "End of epoch 25 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 26, iters: 100, time: 0.023, data: 0.114) G_GAN: 3.911 G_L1: 33.237 D_real: 0.042 D_fake: 0.181 \n",
            "(epoch: 26, iters: 200, time: 0.091, data: 0.001) G_GAN: 4.600 G_L1: 29.564 D_real: 0.015 D_fake: 0.019 \n",
            "End of epoch 26 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 27, iters: 4, time: 0.024, data: 0.002) G_GAN: 3.064 G_L1: 27.516 D_real: 0.075 D_fake: 0.360 \n",
            "(epoch: 27, iters: 104, time: 0.029, data: 0.000) G_GAN: 4.848 G_L1: 45.084 D_real: 0.004 D_fake: 0.013 \n",
            "(epoch: 27, iters: 204, time: 0.027, data: 0.001) G_GAN: 3.861 G_L1: 45.259 D_real: 2.315 D_fake: 0.013 \n",
            "End of epoch 27 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 28, iters: 8, time: 0.081, data: 0.001) G_GAN: 3.956 G_L1: 28.852 D_real: 0.936 D_fake: 0.004 \n",
            "(epoch: 28, iters: 108, time: 0.023, data: 0.001) G_GAN: 3.793 G_L1: 38.808 D_real: 0.088 D_fake: 0.158 \n",
            "(epoch: 28, iters: 208, time: 0.022, data: 0.001) G_GAN: 3.438 G_L1: 34.018 D_real: 0.196 D_fake: 0.055 \n",
            "End of epoch 28 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 29, iters: 12, time: 0.023, data: 0.001) G_GAN: 4.849 G_L1: 18.090 D_real: 0.143 D_fake: 0.041 \n",
            "(epoch: 29, iters: 112, time: 0.091, data: 0.001) G_GAN: 3.098 G_L1: 27.865 D_real: 0.118 D_fake: 0.176 \n",
            "(epoch: 29, iters: 212, time: 0.023, data: 0.001) G_GAN: 3.305 G_L1: 27.465 D_real: 0.319 D_fake: 0.023 \n",
            "End of epoch 29 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 30, iters: 16, time: 0.023, data: 0.001) G_GAN: 4.060 G_L1: 32.353 D_real: 0.029 D_fake: 0.037 \n",
            "(epoch: 30, iters: 116, time: 0.023, data: 0.001) G_GAN: 4.256 G_L1: 45.980 D_real: 0.014 D_fake: 0.031 \n",
            "(epoch: 30, iters: 216, time: 0.080, data: 0.001) G_GAN: 3.994 G_L1: 34.182 D_real: 0.004 D_fake: 0.092 \n",
            "saving the model at the end of epoch 30, iters 8880\n",
            "End of epoch 30 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 31, iters: 20, time: 0.029, data: 0.001) G_GAN: 3.466 G_L1: 37.971 D_real: 0.000 D_fake: 1.726 \n",
            "(epoch: 31, iters: 120, time: 0.023, data: 0.001) G_GAN: 1.289 G_L1: 30.786 D_real: 2.465 D_fake: 0.074 \n",
            "(epoch: 31, iters: 220, time: 0.026, data: 0.001) G_GAN: 2.661 G_L1: 21.855 D_real: 0.562 D_fake: 0.056 \n",
            "End of epoch 31 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 32, iters: 24, time: 0.081, data: 0.001) G_GAN: 3.482 G_L1: 30.918 D_real: 0.470 D_fake: 0.034 \n",
            "(epoch: 32, iters: 124, time: 0.028, data: 0.001) G_GAN: 2.693 G_L1: 18.838 D_real: 0.104 D_fake: 0.241 \n",
            "(epoch: 32, iters: 224, time: 0.025, data: 0.001) G_GAN: 2.017 G_L1: 25.370 D_real: 2.132 D_fake: 0.021 \n",
            "End of epoch 32 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 33, iters: 28, time: 0.023, data: 0.001) G_GAN: 2.566 G_L1: 21.800 D_real: 0.231 D_fake: 0.094 \n",
            "(epoch: 33, iters: 128, time: 0.087, data: 0.001) G_GAN: 5.188 G_L1: 38.538 D_real: 0.012 D_fake: 0.009 \n",
            "(epoch: 33, iters: 228, time: 0.024, data: 0.002) G_GAN: 4.082 G_L1: 40.011 D_real: 0.018 D_fake: 0.411 \n",
            "End of epoch 33 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 34, iters: 32, time: 0.024, data: 0.001) G_GAN: 5.906 G_L1: 25.607 D_real: 0.041 D_fake: 0.009 \n",
            "(epoch: 34, iters: 132, time: 0.029, data: 0.001) G_GAN: 3.454 G_L1: 29.537 D_real: 0.008 D_fake: 0.041 \n",
            "(epoch: 34, iters: 232, time: 0.078, data: 0.001) G_GAN: 3.438 G_L1: 25.625 D_real: 0.004 D_fake: 0.488 \n",
            "saving the latest model (epoch 34, total_iters 10000)\n",
            "End of epoch 34 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 35, iters: 36, time: 0.028, data: 0.001) G_GAN: 0.634 G_L1: 21.519 D_real: 1.238 D_fake: 0.564 \n",
            "(epoch: 35, iters: 136, time: 0.023, data: 0.001) G_GAN: 4.693 G_L1: 27.110 D_real: 0.010 D_fake: 1.156 \n",
            "(epoch: 35, iters: 236, time: 0.023, data: 0.001) G_GAN: 5.836 G_L1: 39.225 D_real: 0.062 D_fake: 0.012 \n",
            "saving the model at the end of epoch 35, iters 10360\n",
            "End of epoch 35 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 36, iters: 40, time: 0.085, data: 0.001) G_GAN: 4.029 G_L1: 21.527 D_real: 0.064 D_fake: 0.282 \n",
            "(epoch: 36, iters: 140, time: 0.023, data: 0.001) G_GAN: 1.490 G_L1: 15.833 D_real: 0.673 D_fake: 0.047 \n",
            "(epoch: 36, iters: 240, time: 0.028, data: 0.001) G_GAN: 3.379 G_L1: 26.120 D_real: 0.132 D_fake: 0.250 \n",
            "End of epoch 36 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 37, iters: 44, time: 0.024, data: 0.001) G_GAN: 6.158 G_L1: 25.824 D_real: 0.700 D_fake: 0.001 \n",
            "(epoch: 37, iters: 144, time: 0.096, data: 0.001) G_GAN: 4.487 G_L1: 24.672 D_real: 0.098 D_fake: 0.011 \n",
            "(epoch: 37, iters: 244, time: 0.026, data: 0.001) G_GAN: 4.418 G_L1: 37.599 D_real: 0.003 D_fake: 0.076 \n",
            "End of epoch 37 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 38, iters: 48, time: 0.023, data: 0.001) G_GAN: 4.806 G_L1: 40.239 D_real: 0.027 D_fake: 0.025 \n",
            "(epoch: 38, iters: 148, time: 0.024, data: 0.002) G_GAN: 4.015 G_L1: 31.905 D_real: 0.150 D_fake: 0.021 \n",
            "(epoch: 38, iters: 248, time: 0.088, data: 0.001) G_GAN: 2.856 G_L1: 16.011 D_real: 0.257 D_fake: 0.357 \n",
            "End of epoch 38 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 39, iters: 52, time: 0.023, data: 0.001) G_GAN: 3.013 G_L1: 22.957 D_real: 0.024 D_fake: 0.298 \n",
            "(epoch: 39, iters: 152, time: 0.024, data: 0.001) G_GAN: 5.990 G_L1: 34.075 D_real: 0.308 D_fake: 0.003 \n",
            "(epoch: 39, iters: 252, time: 0.022, data: 0.001) G_GAN: 3.563 G_L1: 25.756 D_real: 0.020 D_fake: 0.113 \n",
            "End of epoch 39 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 40, iters: 56, time: 0.084, data: 0.001) G_GAN: 5.078 G_L1: 27.913 D_real: 0.913 D_fake: 0.004 \n",
            "(epoch: 40, iters: 156, time: 0.024, data: 0.001) G_GAN: 4.179 G_L1: 31.803 D_real: 0.024 D_fake: 0.037 \n",
            "(epoch: 40, iters: 256, time: 0.023, data: 0.001) G_GAN: 3.542 G_L1: 40.444 D_real: 0.178 D_fake: 0.142 \n",
            "saving the model at the end of epoch 40, iters 11840\n",
            "End of epoch 40 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 41, iters: 60, time: 0.023, data: 0.001) G_GAN: 2.919 G_L1: 30.139 D_real: 0.019 D_fake: 0.706 \n",
            "(epoch: 41, iters: 160, time: 0.128, data: 0.001) G_GAN: 4.080 G_L1: 21.581 D_real: 0.013 D_fake: 0.042 \n",
            "(epoch: 41, iters: 260, time: 0.029, data: 0.001) G_GAN: 3.286 G_L1: 53.783 D_real: 0.001 D_fake: 0.133 \n",
            "End of epoch 41 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 42, iters: 64, time: 0.038, data: 0.001) G_GAN: 4.911 G_L1: 23.129 D_real: 0.031 D_fake: 0.042 \n",
            "(epoch: 42, iters: 164, time: 0.024, data: 0.004) G_GAN: 2.919 G_L1: 26.415 D_real: 0.007 D_fake: 0.271 \n",
            "(epoch: 42, iters: 264, time: 0.092, data: 0.001) G_GAN: 3.987 G_L1: 28.782 D_real: 0.366 D_fake: 0.014 \n",
            "End of epoch 42 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 43, iters: 68, time: 0.023, data: 0.001) G_GAN: 6.102 G_L1: 30.291 D_real: 0.170 D_fake: 0.008 \n",
            "(epoch: 43, iters: 168, time: 0.022, data: 0.001) G_GAN: 4.762 G_L1: 48.100 D_real: 0.001 D_fake: 2.017 \n",
            "(epoch: 43, iters: 268, time: 0.023, data: 0.001) G_GAN: 3.809 G_L1: 49.292 D_real: 0.002 D_fake: 0.190 \n",
            "End of epoch 43 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 44, iters: 72, time: 0.092, data: 0.001) G_GAN: 4.904 G_L1: 26.507 D_real: 0.046 D_fake: 0.056 \n",
            "(epoch: 44, iters: 172, time: 0.023, data: 0.001) G_GAN: 3.545 G_L1: 45.237 D_real: 0.000 D_fake: 0.127 \n",
            "(epoch: 44, iters: 272, time: 0.028, data: 0.001) G_GAN: 3.911 G_L1: 25.367 D_real: 0.100 D_fake: 0.049 \n",
            "End of epoch 44 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 45, iters: 76, time: 0.023, data: 0.001) G_GAN: 4.869 G_L1: 24.846 D_real: 0.007 D_fake: 0.624 \n",
            "(epoch: 45, iters: 176, time: 0.089, data: 0.001) G_GAN: 4.238 G_L1: 47.765 D_real: 0.000 D_fake: 0.020 \n",
            "(epoch: 45, iters: 276, time: 0.024, data: 0.001) G_GAN: 4.477 G_L1: 30.230 D_real: 0.064 D_fake: 0.818 \n",
            "saving the model at the end of epoch 45, iters 13320\n",
            "End of epoch 45 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 46, iters: 80, time: 0.023, data: 0.001) G_GAN: 3.504 G_L1: 32.612 D_real: 0.084 D_fake: 0.083 \n",
            "(epoch: 46, iters: 180, time: 0.034, data: 0.001) G_GAN: 4.378 G_L1: 20.731 D_real: 0.014 D_fake: 0.040 \n",
            "(epoch: 46, iters: 280, time: 0.098, data: 0.001) G_GAN: 4.439 G_L1: 23.332 D_real: 0.005 D_fake: 0.116 \n",
            "End of epoch 46 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 47, iters: 84, time: 0.028, data: 0.001) G_GAN: 3.946 G_L1: 28.863 D_real: 0.023 D_fake: 0.096 \n",
            "(epoch: 47, iters: 184, time: 0.024, data: 0.001) G_GAN: 3.985 G_L1: 23.807 D_real: 0.625 D_fake: 0.019 \n",
            "(epoch: 47, iters: 284, time: 0.023, data: 0.001) G_GAN: 4.323 G_L1: 40.121 D_real: 0.001 D_fake: 0.727 \n",
            "End of epoch 47 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 48, iters: 88, time: 0.097, data: 0.001) G_GAN: 3.192 G_L1: 45.757 D_real: 0.000 D_fake: 0.682 \n",
            "(epoch: 48, iters: 188, time: 0.023, data: 0.001) G_GAN: 5.716 G_L1: 32.944 D_real: 0.096 D_fake: 0.005 \n",
            "(epoch: 48, iters: 288, time: 0.029, data: 0.001) G_GAN: 6.705 G_L1: 38.898 D_real: 0.016 D_fake: 0.005 \n",
            "End of epoch 48 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 49, iters: 92, time: 0.023, data: 0.001) G_GAN: 3.957 G_L1: 39.777 D_real: 0.012 D_fake: 0.178 \n",
            "(epoch: 49, iters: 192, time: 0.136, data: 0.001) G_GAN: 3.310 G_L1: 25.126 D_real: 0.060 D_fake: 0.273 \n",
            "(epoch: 49, iters: 292, time: 0.026, data: 0.001) G_GAN: 3.079 G_L1: 19.237 D_real: 0.030 D_fake: 0.054 \n",
            "End of epoch 49 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 50, iters: 96, time: 0.022, data: 0.001) G_GAN: 3.111 G_L1: 42.570 D_real: 0.054 D_fake: 0.324 \n",
            "(epoch: 50, iters: 196, time: 0.023, data: 0.001) G_GAN: 1.976 G_L1: 22.531 D_real: 0.933 D_fake: 0.098 \n",
            "(epoch: 50, iters: 296, time: 0.098, data: 0.001) G_GAN: 5.434 G_L1: 25.048 D_real: 0.009 D_fake: 0.865 \n",
            "saving the model at the end of epoch 50, iters 14800\n",
            "End of epoch 50 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 51, iters: 100, time: 0.023, data: 0.119) G_GAN: 4.589 G_L1: 32.249 D_real: 0.014 D_fake: 0.310 \n",
            "(epoch: 51, iters: 200, time: 0.023, data: 0.001) G_GAN: 3.693 G_L1: 26.899 D_real: 0.229 D_fake: 0.025 \n",
            "saving the latest model (epoch 51, total_iters 15000)\n",
            "End of epoch 51 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 52, iters: 4, time: 0.024, data: 0.002) G_GAN: 3.580 G_L1: 26.108 D_real: 0.007 D_fake: 0.316 \n",
            "(epoch: 52, iters: 104, time: 0.140, data: 0.000) G_GAN: 3.609 G_L1: 22.791 D_real: 0.011 D_fake: 0.149 \n",
            "(epoch: 52, iters: 204, time: 0.025, data: 0.002) G_GAN: 3.587 G_L1: 26.967 D_real: 0.090 D_fake: 0.091 \n",
            "End of epoch 52 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 53, iters: 8, time: 0.022, data: 0.001) G_GAN: 7.273 G_L1: 43.826 D_real: 1.718 D_fake: 0.001 \n",
            "(epoch: 53, iters: 108, time: 0.023, data: 0.000) G_GAN: 3.839 G_L1: 35.557 D_real: 0.002 D_fake: 0.149 \n",
            "(epoch: 53, iters: 208, time: 0.097, data: 0.001) G_GAN: 7.412 G_L1: 43.530 D_real: 0.037 D_fake: 0.002 \n",
            "End of epoch 53 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 54, iters: 12, time: 0.023, data: 0.001) G_GAN: 6.642 G_L1: 30.077 D_real: 0.041 D_fake: 0.007 \n",
            "(epoch: 54, iters: 112, time: 0.023, data: 0.001) G_GAN: 3.449 G_L1: 23.538 D_real: 0.020 D_fake: 0.143 \n",
            "(epoch: 54, iters: 212, time: 0.024, data: 0.001) G_GAN: 3.162 G_L1: 30.754 D_real: 0.127 D_fake: 0.165 \n",
            "End of epoch 54 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 55, iters: 16, time: 0.093, data: 0.001) G_GAN: 6.876 G_L1: 32.983 D_real: 0.116 D_fake: 0.004 \n",
            "(epoch: 55, iters: 116, time: 0.023, data: 0.001) G_GAN: 5.546 G_L1: 24.436 D_real: 0.025 D_fake: 0.036 \n",
            "(epoch: 55, iters: 216, time: 0.023, data: 0.001) G_GAN: 4.609 G_L1: 32.960 D_real: 0.017 D_fake: 0.090 \n",
            "saving the model at the end of epoch 55, iters 16280\n",
            "End of epoch 55 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 56, iters: 20, time: 0.023, data: 0.001) G_GAN: 5.347 G_L1: 18.334 D_real: 0.249 D_fake: 1.620 \n",
            "(epoch: 56, iters: 120, time: 0.103, data: 0.001) G_GAN: 4.202 G_L1: 27.408 D_real: 0.086 D_fake: 0.023 \n",
            "(epoch: 56, iters: 220, time: 0.023, data: 0.001) G_GAN: 4.388 G_L1: 27.199 D_real: 0.093 D_fake: 0.029 \n",
            "End of epoch 56 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 57, iters: 24, time: 0.023, data: 0.001) G_GAN: 3.050 G_L1: 21.773 D_real: 0.046 D_fake: 0.106 \n",
            "(epoch: 57, iters: 124, time: 0.024, data: 0.001) G_GAN: 4.801 G_L1: 44.623 D_real: 0.000 D_fake: 0.052 \n",
            "(epoch: 57, iters: 224, time: 0.142, data: 0.001) G_GAN: 6.127 G_L1: 30.972 D_real: 0.037 D_fake: 0.006 \n",
            "End of epoch 57 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 58, iters: 28, time: 0.023, data: 0.001) G_GAN: 3.380 G_L1: 24.588 D_real: 1.094 D_fake: 0.016 \n",
            "(epoch: 58, iters: 128, time: 0.025, data: 0.001) G_GAN: 4.200 G_L1: 25.825 D_real: 0.046 D_fake: 0.457 \n",
            "(epoch: 58, iters: 228, time: 0.023, data: 0.001) G_GAN: 4.346 G_L1: 33.475 D_real: 0.140 D_fake: 0.042 \n",
            "End of epoch 58 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 59, iters: 32, time: 0.111, data: 0.001) G_GAN: 4.265 G_L1: 15.263 D_real: 0.212 D_fake: 0.017 \n",
            "(epoch: 59, iters: 132, time: 0.023, data: 0.001) G_GAN: 4.234 G_L1: 21.213 D_real: 0.068 D_fake: 1.083 \n",
            "(epoch: 59, iters: 232, time: 0.023, data: 0.001) G_GAN: 4.309 G_L1: 31.274 D_real: 0.004 D_fake: 0.564 \n",
            "End of epoch 59 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 60, iters: 36, time: 0.023, data: 0.001) G_GAN: 4.936 G_L1: 28.288 D_real: 0.034 D_fake: 0.017 \n",
            "(epoch: 60, iters: 136, time: 0.166, data: 0.001) G_GAN: 1.615 G_L1: 21.088 D_real: 0.800 D_fake: 0.232 \n",
            "(epoch: 60, iters: 236, time: 0.023, data: 0.001) G_GAN: 4.078 G_L1: 35.441 D_real: 0.031 D_fake: 0.037 \n",
            "saving the model at the end of epoch 60, iters 17760\n",
            "End of epoch 60 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 61, iters: 40, time: 0.023, data: 0.001) G_GAN: 3.662 G_L1: 23.530 D_real: 0.025 D_fake: 0.201 \n",
            "(epoch: 61, iters: 140, time: 0.029, data: 0.001) G_GAN: 3.689 G_L1: 44.329 D_real: 0.000 D_fake: 0.103 \n",
            "(epoch: 61, iters: 240, time: 0.098, data: 0.001) G_GAN: 2.823 G_L1: 27.061 D_real: 0.019 D_fake: 0.144 \n",
            "End of epoch 61 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 62, iters: 44, time: 0.023, data: 0.001) G_GAN: 4.383 G_L1: 26.793 D_real: 0.041 D_fake: 0.041 \n",
            "(epoch: 62, iters: 144, time: 0.022, data: 0.001) G_GAN: 5.435 G_L1: 22.739 D_real: 0.356 D_fake: 0.008 \n",
            "(epoch: 62, iters: 244, time: 0.024, data: 0.001) G_GAN: 1.736 G_L1: 17.864 D_real: 0.821 D_fake: 0.077 \n",
            "End of epoch 62 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 63, iters: 48, time: 0.110, data: 0.001) G_GAN: 3.969 G_L1: 35.917 D_real: 0.009 D_fake: 0.045 \n",
            "(epoch: 63, iters: 148, time: 0.024, data: 0.001) G_GAN: 5.058 G_L1: 34.937 D_real: 0.007 D_fake: 0.018 \n",
            "(epoch: 63, iters: 248, time: 0.023, data: 0.001) G_GAN: 2.087 G_L1: 20.877 D_real: 1.562 D_fake: 0.012 \n",
            "End of epoch 63 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 64, iters: 52, time: 0.023, data: 0.001) G_GAN: 3.397 G_L1: 19.805 D_real: 0.033 D_fake: 0.201 \n",
            "(epoch: 64, iters: 152, time: 0.108, data: 0.001) G_GAN: 3.779 G_L1: 43.636 D_real: 0.001 D_fake: 0.136 \n",
            "(epoch: 64, iters: 252, time: 0.023, data: 0.002) G_GAN: 6.181 G_L1: 20.545 D_real: 0.134 D_fake: 0.008 \n",
            "End of epoch 64 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 65, iters: 56, time: 0.026, data: 0.001) G_GAN: 4.304 G_L1: 41.191 D_real: 0.021 D_fake: 0.038 \n",
            "(epoch: 65, iters: 156, time: 0.023, data: 0.001) G_GAN: 5.763 G_L1: 40.140 D_real: 0.008 D_fake: 0.008 \n",
            "(epoch: 65, iters: 256, time: 0.106, data: 0.001) G_GAN: 3.089 G_L1: 48.142 D_real: 0.296 D_fake: 0.215 \n",
            "saving the model at the end of epoch 65, iters 19240\n",
            "End of epoch 65 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 66, iters: 60, time: 0.023, data: 0.001) G_GAN: 2.682 G_L1: 31.433 D_real: 0.441 D_fake: 0.051 \n",
            "(epoch: 66, iters: 160, time: 0.024, data: 0.001) G_GAN: 4.563 G_L1: 25.418 D_real: 0.123 D_fake: 0.017 \n",
            "(epoch: 66, iters: 260, time: 0.029, data: 0.001) G_GAN: 6.463 G_L1: 34.374 D_real: 0.034 D_fake: 0.005 \n",
            "End of epoch 66 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 67, iters: 64, time: 0.120, data: 0.001) G_GAN: 5.235 G_L1: 25.606 D_real: 0.140 D_fake: 0.020 \n",
            "(epoch: 67, iters: 164, time: 0.025, data: 0.001) G_GAN: 4.010 G_L1: 27.904 D_real: 0.011 D_fake: 0.090 \n",
            "(epoch: 67, iters: 264, time: 0.023, data: 0.001) G_GAN: 3.935 G_L1: 18.849 D_real: 0.139 D_fake: 0.074 \n",
            "End of epoch 67 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 68, iters: 68, time: 0.023, data: 0.001) G_GAN: 6.773 G_L1: 33.873 D_real: 0.312 D_fake: 0.004 \n",
            "(epoch: 68, iters: 168, time: 0.115, data: 0.001) G_GAN: 3.824 G_L1: 26.260 D_real: 0.007 D_fake: 0.121 \n",
            "saving the latest model (epoch 68, total_iters 20000)\n",
            "(epoch: 68, iters: 268, time: 0.024, data: 0.002) G_GAN: 1.574 G_L1: 23.477 D_real: 1.786 D_fake: 0.050 \n",
            "End of epoch 68 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 69, iters: 72, time: 0.024, data: 0.001) G_GAN: 4.321 G_L1: 20.639 D_real: 0.119 D_fake: 0.664 \n",
            "(epoch: 69, iters: 172, time: 0.025, data: 0.001) G_GAN: 4.150 G_L1: 29.394 D_real: 0.036 D_fake: 0.051 \n",
            "(epoch: 69, iters: 272, time: 0.107, data: 0.001) G_GAN: 2.834 G_L1: 20.476 D_real: 0.251 D_fake: 0.265 \n",
            "End of epoch 69 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 70, iters: 76, time: 0.024, data: 0.001) G_GAN: 3.089 G_L1: 21.924 D_real: 0.024 D_fake: 0.082 \n",
            "(epoch: 70, iters: 176, time: 0.025, data: 0.001) G_GAN: 3.894 G_L1: 36.511 D_real: 0.156 D_fake: 0.218 \n",
            "(epoch: 70, iters: 276, time: 0.030, data: 0.001) G_GAN: 5.136 G_L1: 20.416 D_real: 0.149 D_fake: 0.854 \n",
            "saving the model at the end of epoch 70, iters 20720\n",
            "End of epoch 70 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 71, iters: 80, time: 0.121, data: 0.001) G_GAN: 3.500 G_L1: 24.135 D_real: 0.121 D_fake: 0.257 \n",
            "(epoch: 71, iters: 180, time: 0.023, data: 0.001) G_GAN: 5.598 G_L1: 31.539 D_real: 0.004 D_fake: 0.010 \n",
            "(epoch: 71, iters: 280, time: 0.115, data: 0.001) G_GAN: 2.524 G_L1: 23.296 D_real: 0.866 D_fake: 0.027 \n",
            "End of epoch 71 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 72, iters: 84, time: 0.026, data: 0.003) G_GAN: 2.367 G_L1: 18.655 D_real: 0.786 D_fake: 0.027 \n",
            "(epoch: 72, iters: 184, time: 0.116, data: 0.001) G_GAN: 6.400 G_L1: 27.661 D_real: 0.016 D_fake: 0.008 \n",
            "(epoch: 72, iters: 284, time: 0.025, data: 0.002) G_GAN: 4.606 G_L1: 20.758 D_real: 0.306 D_fake: 0.019 \n",
            "End of epoch 72 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 73, iters: 88, time: 0.023, data: 0.001) G_GAN: 7.100 G_L1: 36.382 D_real: 0.013 D_fake: 0.003 \n",
            "(epoch: 73, iters: 188, time: 0.024, data: 0.001) G_GAN: 4.098 G_L1: 29.407 D_real: 0.005 D_fake: 0.053 \n",
            "(epoch: 73, iters: 288, time: 0.125, data: 0.001) G_GAN: 4.906 G_L1: 22.865 D_real: 0.009 D_fake: 0.703 \n",
            "End of epoch 73 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 74, iters: 92, time: 0.027, data: 0.001) G_GAN: 3.136 G_L1: 17.268 D_real: 0.289 D_fake: 0.040 \n",
            "(epoch: 74, iters: 192, time: 0.023, data: 0.001) G_GAN: 3.333 G_L1: 35.086 D_real: 0.721 D_fake: 0.017 \n",
            "(epoch: 74, iters: 292, time: 0.021, data: 0.001) G_GAN: 4.813 G_L1: 30.372 D_real: 0.029 D_fake: 0.017 \n",
            "End of epoch 74 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 75, iters: 96, time: 0.208, data: 0.001) G_GAN: 4.323 G_L1: 29.416 D_real: 0.007 D_fake: 0.335 \n",
            "(epoch: 75, iters: 196, time: 0.025, data: 0.001) G_GAN: 3.617 G_L1: 23.953 D_real: 0.359 D_fake: 0.042 \n",
            "(epoch: 75, iters: 296, time: 0.021, data: 0.001) G_GAN: 2.423 G_L1: 20.249 D_real: 0.321 D_fake: 0.134 \n",
            "saving the model at the end of epoch 75, iters 22200\n",
            "End of epoch 75 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 76, iters: 100, time: 0.024, data: 0.124) G_GAN: 2.873 G_L1: 30.998 D_real: 0.004 D_fake: 0.056 \n",
            "(epoch: 76, iters: 200, time: 0.383, data: 0.001) G_GAN: 3.978 G_L1: 41.426 D_real: 0.000 D_fake: 0.122 \n",
            "End of epoch 76 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 77, iters: 4, time: 0.024, data: 0.001) G_GAN: 5.349 G_L1: 42.179 D_real: 0.019 D_fake: 0.611 \n",
            "(epoch: 77, iters: 104, time: 0.023, data: 0.000) G_GAN: 4.933 G_L1: 40.841 D_real: 0.003 D_fake: 0.022 \n",
            "(epoch: 77, iters: 204, time: 0.023, data: 0.001) G_GAN: 3.649 G_L1: 24.052 D_real: 0.168 D_fake: 0.037 \n",
            "End of epoch 77 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 78, iters: 8, time: 0.240, data: 0.001) G_GAN: 5.310 G_L1: 22.700 D_real: 0.007 D_fake: 0.538 \n",
            "(epoch: 78, iters: 108, time: 0.024, data: 0.000) G_GAN: 4.064 G_L1: 30.870 D_real: 0.420 D_fake: 0.004 \n",
            "(epoch: 78, iters: 208, time: 0.024, data: 0.001) G_GAN: 4.708 G_L1: 33.072 D_real: 0.043 D_fake: 0.015 \n",
            "End of epoch 78 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 79, iters: 12, time: 0.023, data: 0.001) G_GAN: 4.462 G_L1: 27.741 D_real: 0.001 D_fake: 0.042 \n",
            "(epoch: 79, iters: 112, time: 0.122, data: 0.001) G_GAN: 5.298 G_L1: 31.831 D_real: 0.001 D_fake: 0.040 \n",
            "(epoch: 79, iters: 212, time: 0.023, data: 0.001) G_GAN: 5.168 G_L1: 29.662 D_real: 0.164 D_fake: 0.014 \n",
            "End of epoch 79 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 80, iters: 16, time: 0.032, data: 0.001) G_GAN: 5.049 G_L1: 17.598 D_real: 0.060 D_fake: 0.836 \n",
            "(epoch: 80, iters: 116, time: 0.025, data: 0.001) G_GAN: 3.838 G_L1: 22.847 D_real: 0.865 D_fake: 0.030 \n",
            "(epoch: 80, iters: 216, time: 0.115, data: 0.001) G_GAN: 3.710 G_L1: 44.504 D_real: 0.004 D_fake: 0.107 \n",
            "saving the model at the end of epoch 80, iters 23680\n",
            "End of epoch 80 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 81, iters: 20, time: 0.023, data: 0.001) G_GAN: 3.416 G_L1: 19.234 D_real: 0.063 D_fake: 0.034 \n",
            "(epoch: 81, iters: 120, time: 0.023, data: 0.001) G_GAN: 6.776 G_L1: 27.821 D_real: 0.010 D_fake: 0.004 \n",
            "(epoch: 81, iters: 220, time: 0.023, data: 0.001) G_GAN: 5.284 G_L1: 24.795 D_real: 0.003 D_fake: 1.105 \n",
            "End of epoch 81 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 82, iters: 24, time: 0.143, data: 0.001) G_GAN: 2.422 G_L1: 21.226 D_real: 0.728 D_fake: 0.077 \n",
            "(epoch: 82, iters: 124, time: 0.029, data: 0.002) G_GAN: 4.369 G_L1: 32.740 D_real: 0.141 D_fake: 0.088 \n",
            "(epoch: 82, iters: 224, time: 0.023, data: 0.001) G_GAN: 3.732 G_L1: 22.926 D_real: 0.050 D_fake: 0.201 \n",
            "End of epoch 82 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 83, iters: 28, time: 0.023, data: 0.001) G_GAN: 3.640 G_L1: 38.124 D_real: 0.199 D_fake: 0.036 \n",
            "(epoch: 83, iters: 128, time: 0.129, data: 0.001) G_GAN: 3.280 G_L1: 40.985 D_real: 0.113 D_fake: 0.063 \n",
            "(epoch: 83, iters: 228, time: 0.024, data: 0.001) G_GAN: 5.255 G_L1: 18.059 D_real: 0.016 D_fake: 1.975 \n",
            "End of epoch 83 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 84, iters: 32, time: 0.023, data: 0.001) G_GAN: 4.181 G_L1: 21.924 D_real: 0.016 D_fake: 0.418 \n",
            "(epoch: 84, iters: 132, time: 0.027, data: 0.001) G_GAN: 3.644 G_L1: 29.205 D_real: 0.007 D_fake: 0.250 \n",
            "(epoch: 84, iters: 232, time: 0.119, data: 0.001) G_GAN: 3.997 G_L1: 24.617 D_real: 0.140 D_fake: 0.051 \n",
            "End of epoch 84 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 85, iters: 36, time: 0.024, data: 0.001) G_GAN: 7.881 G_L1: 30.790 D_real: 0.076 D_fake: 0.002 \n",
            "(epoch: 85, iters: 136, time: 0.023, data: 0.001) G_GAN: 4.322 G_L1: 38.094 D_real: 0.077 D_fake: 0.021 \n",
            "saving the latest model (epoch 85, total_iters 25000)\n",
            "(epoch: 85, iters: 236, time: 0.024, data: 0.005) G_GAN: 4.051 G_L1: 26.590 D_real: 0.002 D_fake: 0.214 \n",
            "saving the model at the end of epoch 85, iters 25160\n",
            "End of epoch 85 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 86, iters: 40, time: 0.235, data: 0.001) G_GAN: 7.710 G_L1: 25.170 D_real: 0.147 D_fake: 0.001 \n",
            "(epoch: 86, iters: 140, time: 0.023, data: 0.002) G_GAN: 3.775 G_L1: 33.920 D_real: 0.001 D_fake: 0.300 \n",
            "(epoch: 86, iters: 240, time: 0.057, data: 0.001) G_GAN: 3.186 G_L1: 50.682 D_real: 0.250 D_fake: 0.245 \n",
            "End of epoch 86 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 87, iters: 44, time: 0.024, data: 0.009) G_GAN: 2.528 G_L1: 21.854 D_real: 0.730 D_fake: 0.013 \n",
            "(epoch: 87, iters: 144, time: 0.182, data: 0.001) G_GAN: 4.059 G_L1: 17.639 D_real: 0.109 D_fake: 0.041 \n",
            "(epoch: 87, iters: 244, time: 0.023, data: 0.001) G_GAN: 4.690 G_L1: 24.576 D_real: 0.029 D_fake: 0.625 \n",
            "End of epoch 87 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 88, iters: 48, time: 0.023, data: 0.001) G_GAN: 4.604 G_L1: 27.091 D_real: 0.433 D_fake: 0.005 \n",
            "(epoch: 88, iters: 148, time: 0.023, data: 0.001) G_GAN: 8.488 G_L1: 37.533 D_real: 0.435 D_fake: 0.000 \n",
            "(epoch: 88, iters: 248, time: 0.123, data: 0.001) G_GAN: 5.558 G_L1: 23.687 D_real: 0.115 D_fake: 0.211 \n",
            "End of epoch 88 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 89, iters: 52, time: 0.029, data: 0.001) G_GAN: 6.222 G_L1: 26.082 D_real: 0.006 D_fake: 0.005 \n",
            "(epoch: 89, iters: 152, time: 0.023, data: 0.001) G_GAN: 3.809 G_L1: 37.113 D_real: 0.033 D_fake: 0.177 \n",
            "(epoch: 89, iters: 252, time: 0.023, data: 0.001) G_GAN: 7.498 G_L1: 27.490 D_real: 0.010 D_fake: 0.004 \n",
            "End of epoch 89 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 90, iters: 56, time: 0.126, data: 0.002) G_GAN: 3.960 G_L1: 26.359 D_real: 0.000 D_fake: 0.207 \n",
            "(epoch: 90, iters: 156, time: 0.023, data: 0.001) G_GAN: 5.752 G_L1: 31.223 D_real: 0.153 D_fake: 0.017 \n",
            "(epoch: 90, iters: 256, time: 0.024, data: 0.001) G_GAN: 8.916 G_L1: 32.880 D_real: 0.006 D_fake: 0.003 \n",
            "saving the model at the end of epoch 90, iters 26640\n",
            "End of epoch 90 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 91, iters: 60, time: 0.024, data: 0.001) G_GAN: 6.550 G_L1: 25.092 D_real: 0.025 D_fake: 0.006 \n",
            "(epoch: 91, iters: 160, time: 0.131, data: 0.001) G_GAN: 5.358 G_L1: 30.475 D_real: 0.145 D_fake: 0.011 \n",
            "(epoch: 91, iters: 260, time: 0.023, data: 0.001) G_GAN: 5.187 G_L1: 27.118 D_real: 0.001 D_fake: 0.022 \n",
            "End of epoch 91 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 92, iters: 64, time: 0.033, data: 0.001) G_GAN: 5.287 G_L1: 24.387 D_real: 0.001 D_fake: 0.041 \n",
            "(epoch: 92, iters: 164, time: 0.029, data: 0.002) G_GAN: 6.583 G_L1: 25.973 D_real: 0.005 D_fake: 0.525 \n",
            "(epoch: 92, iters: 264, time: 0.133, data: 0.001) G_GAN: 5.556 G_L1: 28.131 D_real: 0.008 D_fake: 0.006 \n",
            "End of epoch 92 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 93, iters: 68, time: 0.024, data: 0.001) G_GAN: 4.968 G_L1: 16.004 D_real: 0.004 D_fake: 1.245 \n",
            "(epoch: 93, iters: 168, time: 0.025, data: 0.001) G_GAN: 3.947 G_L1: 36.882 D_real: 0.003 D_fake: 0.047 \n",
            "(epoch: 93, iters: 268, time: 0.033, data: 0.001) G_GAN: 5.645 G_L1: 34.494 D_real: 0.001 D_fake: 0.029 \n",
            "End of epoch 93 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 94, iters: 72, time: 0.135, data: 0.003) G_GAN: 5.515 G_L1: 31.289 D_real: 0.048 D_fake: 0.007 \n",
            "(epoch: 94, iters: 172, time: 0.024, data: 0.001) G_GAN: 5.258 G_L1: 15.996 D_real: 0.015 D_fake: 1.099 \n",
            "(epoch: 94, iters: 272, time: 0.027, data: 0.001) G_GAN: 4.428 G_L1: 49.333 D_real: 0.007 D_fake: 0.142 \n",
            "End of epoch 94 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 95, iters: 76, time: 0.023, data: 0.001) G_GAN: 3.464 G_L1: 28.418 D_real: 0.250 D_fake: 0.047 \n",
            "(epoch: 95, iters: 176, time: 0.205, data: 0.005) G_GAN: 5.629 G_L1: 17.875 D_real: 0.010 D_fake: 1.131 \n",
            "(epoch: 95, iters: 276, time: 0.025, data: 0.001) G_GAN: 6.930 G_L1: 37.300 D_real: 0.008 D_fake: 0.003 \n",
            "saving the model at the end of epoch 95, iters 28120\n",
            "End of epoch 95 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 96, iters: 80, time: 0.038, data: 0.001) G_GAN: 5.347 G_L1: 31.275 D_real: 0.002 D_fake: 0.027 \n",
            "(epoch: 96, iters: 180, time: 0.029, data: 0.002) G_GAN: 8.064 G_L1: 26.339 D_real: 0.077 D_fake: 0.001 \n",
            "(epoch: 96, iters: 280, time: 0.130, data: 0.002) G_GAN: 3.747 G_L1: 39.924 D_real: 0.020 D_fake: 0.046 \n",
            "End of epoch 96 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 97, iters: 84, time: 0.024, data: 0.002) G_GAN: 3.724 G_L1: 28.357 D_real: 0.010 D_fake: 0.247 \n",
            "(epoch: 97, iters: 184, time: 0.026, data: 0.001) G_GAN: 6.708 G_L1: 31.498 D_real: 0.003 D_fake: 0.006 \n",
            "(epoch: 97, iters: 284, time: 0.023, data: 0.002) G_GAN: 7.946 G_L1: 20.992 D_real: 0.017 D_fake: 1.532 \n",
            "End of epoch 97 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 98, iters: 88, time: 0.320, data: 0.001) G_GAN: 6.392 G_L1: 17.504 D_real: 0.021 D_fake: 2.142 \n",
            "(epoch: 98, iters: 188, time: 0.029, data: 0.001) G_GAN: 7.346 G_L1: 30.570 D_real: 0.001 D_fake: 0.005 \n",
            "(epoch: 98, iters: 288, time: 0.023, data: 0.001) G_GAN: 4.772 G_L1: 20.077 D_real: 0.019 D_fake: 0.017 \n",
            "End of epoch 98 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 99, iters: 92, time: 0.023, data: 0.001) G_GAN: 7.369 G_L1: 26.469 D_real: 0.463 D_fake: 0.000 \n",
            "(epoch: 99, iters: 192, time: 0.128, data: 0.001) G_GAN: 6.202 G_L1: 24.049 D_real: 0.374 D_fake: 0.001 \n",
            "(epoch: 99, iters: 292, time: 0.022, data: 0.001) G_GAN: 7.027 G_L1: 34.598 D_real: 0.059 D_fake: 0.003 \n",
            "End of epoch 99 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 100, iters: 96, time: 0.023, data: 0.001) G_GAN: 7.077 G_L1: 21.407 D_real: 0.130 D_fake: 0.001 \n",
            "(epoch: 100, iters: 196, time: 0.029, data: 0.001) G_GAN: 6.338 G_L1: 25.014 D_real: 1.931 D_fake: 0.001 \n",
            "(epoch: 100, iters: 296, time: 0.140, data: 0.001) G_GAN: 2.905 G_L1: 16.918 D_real: 0.278 D_fake: 0.053 \n",
            "saving the model at the end of epoch 100, iters 29600\n",
            "End of epoch 100 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 101, iters: 100, time: 0.023, data: 0.120) G_GAN: 2.651 G_L1: 22.467 D_real: 0.394 D_fake: 0.436 \n",
            "(epoch: 101, iters: 200, time: 0.023, data: 0.001) G_GAN: 6.484 G_L1: 27.251 D_real: 0.013 D_fake: 0.004 \n",
            "End of epoch 101 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 102, iters: 4, time: 0.027, data: 0.001) G_GAN: 8.689 G_L1: 27.624 D_real: 0.279 D_fake: 0.000 \n",
            "(epoch: 102, iters: 104, time: 0.132, data: 0.000) G_GAN: 10.882 G_L1: 26.751 D_real: 0.005 D_fake: 0.000 \n",
            "saving the latest model (epoch 102, total_iters 30000)\n",
            "(epoch: 102, iters: 204, time: 0.024, data: 0.001) G_GAN: 5.849 G_L1: 22.878 D_real: 0.028 D_fake: 0.007 \n",
            "End of epoch 102 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 103, iters: 8, time: 0.023, data: 0.001) G_GAN: 6.433 G_L1: 28.521 D_real: 0.016 D_fake: 0.049 \n",
            "(epoch: 103, iters: 108, time: 0.023, data: 0.001) G_GAN: 4.826 G_L1: 35.451 D_real: 0.037 D_fake: 0.051 \n",
            "(epoch: 103, iters: 208, time: 0.173, data: 0.001) G_GAN: 4.192 G_L1: 16.130 D_real: 0.104 D_fake: 0.250 \n",
            "End of epoch 103 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 104, iters: 12, time: 0.023, data: 0.001) G_GAN: 5.199 G_L1: 21.267 D_real: 0.020 D_fake: 0.612 \n",
            "(epoch: 104, iters: 112, time: 0.022, data: 0.001) G_GAN: 6.573 G_L1: 35.258 D_real: 0.124 D_fake: 0.002 \n",
            "(epoch: 104, iters: 212, time: 0.023, data: 0.001) G_GAN: 4.204 G_L1: 15.330 D_real: 0.514 D_fake: 0.025 \n",
            "End of epoch 104 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 105, iters: 16, time: 0.136, data: 0.001) G_GAN: 3.980 G_L1: 25.250 D_real: 0.001 D_fake: 0.050 \n",
            "(epoch: 105, iters: 116, time: 0.024, data: 0.001) G_GAN: 2.616 G_L1: 22.146 D_real: 0.488 D_fake: 0.275 \n",
            "(epoch: 105, iters: 216, time: 0.026, data: 0.001) G_GAN: 5.502 G_L1: 25.996 D_real: 0.021 D_fake: 0.011 \n",
            "saving the model at the end of epoch 105, iters 31080\n",
            "End of epoch 105 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 106, iters: 20, time: 0.030, data: 0.001) G_GAN: 3.340 G_L1: 21.400 D_real: 0.357 D_fake: 0.101 \n",
            "(epoch: 106, iters: 120, time: 0.164, data: 0.001) G_GAN: 4.718 G_L1: 31.883 D_real: 0.001 D_fake: 0.024 \n",
            "(epoch: 106, iters: 220, time: 0.024, data: 0.001) G_GAN: 8.843 G_L1: 19.657 D_real: 0.176 D_fake: 0.001 \n",
            "End of epoch 106 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 107, iters: 24, time: 0.025, data: 0.001) G_GAN: 4.035 G_L1: 18.154 D_real: 0.015 D_fake: 0.511 \n",
            "(epoch: 107, iters: 124, time: 0.024, data: 0.001) G_GAN: 6.519 G_L1: 18.688 D_real: 0.002 D_fake: 2.032 \n",
            "(epoch: 107, iters: 224, time: 0.192, data: 0.001) G_GAN: 2.834 G_L1: 21.977 D_real: 0.475 D_fake: 0.036 \n",
            "End of epoch 107 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 108, iters: 28, time: 0.023, data: 0.001) G_GAN: 3.595 G_L1: 29.893 D_real: 0.006 D_fake: 0.240 \n",
            "(epoch: 108, iters: 128, time: 0.023, data: 0.001) G_GAN: 3.509 G_L1: 21.669 D_real: 0.040 D_fake: 0.287 \n",
            "(epoch: 108, iters: 228, time: 0.024, data: 0.001) G_GAN: 4.668 G_L1: 20.274 D_real: 0.006 D_fake: 0.595 \n",
            "End of epoch 108 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 109, iters: 32, time: 0.137, data: 0.001) G_GAN: 4.480 G_L1: 26.751 D_real: 0.034 D_fake: 0.215 \n",
            "(epoch: 109, iters: 132, time: 0.028, data: 0.001) G_GAN: 3.980 G_L1: 41.931 D_real: 0.000 D_fake: 0.133 \n",
            "(epoch: 109, iters: 232, time: 0.023, data: 0.002) G_GAN: 3.667 G_L1: 29.342 D_real: 0.037 D_fake: 0.148 \n",
            "End of epoch 109 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 110, iters: 36, time: 0.023, data: 0.001) G_GAN: 4.058 G_L1: 22.925 D_real: 0.058 D_fake: 0.031 \n",
            "(epoch: 110, iters: 136, time: 0.186, data: 0.001) G_GAN: 2.292 G_L1: 19.545 D_real: 0.841 D_fake: 0.269 \n",
            "(epoch: 110, iters: 236, time: 0.025, data: 0.002) G_GAN: 5.378 G_L1: 21.178 D_real: 0.020 D_fake: 0.064 \n",
            "saving the model at the end of epoch 110, iters 32560\n",
            "End of epoch 110 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 111, iters: 40, time: 0.026, data: 0.001) G_GAN: 6.216 G_L1: 40.980 D_real: 0.185 D_fake: 0.011 \n",
            "(epoch: 111, iters: 140, time: 0.023, data: 0.001) G_GAN: 7.406 G_L1: 27.540 D_real: 0.010 D_fake: 0.002 \n",
            "(epoch: 111, iters: 240, time: 0.141, data: 0.001) G_GAN: 3.260 G_L1: 18.106 D_real: 0.035 D_fake: 0.256 \n",
            "End of epoch 111 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 112, iters: 44, time: 0.028, data: 0.001) G_GAN: 8.724 G_L1: 40.980 D_real: 0.004 D_fake: 0.001 \n",
            "(epoch: 112, iters: 144, time: 0.025, data: 0.001) G_GAN: 6.176 G_L1: 32.767 D_real: 0.166 D_fake: 0.001 \n",
            "(epoch: 112, iters: 244, time: 0.022, data: 0.001) G_GAN: 5.320 G_L1: 28.213 D_real: 0.002 D_fake: 0.035 \n",
            "End of epoch 112 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 113, iters: 48, time: 0.150, data: 0.001) G_GAN: 4.918 G_L1: 18.258 D_real: 0.007 D_fake: 0.481 \n",
            "(epoch: 113, iters: 148, time: 0.028, data: 0.001) G_GAN: 4.829 G_L1: 22.792 D_real: 0.411 D_fake: 0.005 \n",
            "(epoch: 113, iters: 248, time: 0.026, data: 0.001) G_GAN: 5.244 G_L1: 32.256 D_real: 0.006 D_fake: 0.056 \n",
            "End of epoch 113 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 114, iters: 52, time: 0.023, data: 0.001) G_GAN: 5.941 G_L1: 35.577 D_real: 0.000 D_fake: 0.010 \n",
            "(epoch: 114, iters: 152, time: 0.140, data: 0.001) G_GAN: 2.824 G_L1: 18.257 D_real: 0.806 D_fake: 0.064 \n",
            "(epoch: 114, iters: 252, time: 0.024, data: 0.001) G_GAN: 4.678 G_L1: 22.659 D_real: 0.073 D_fake: 0.077 \n",
            "End of epoch 114 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 115, iters: 56, time: 0.023, data: 0.001) G_GAN: 5.508 G_L1: 21.192 D_real: 0.002 D_fake: 0.267 \n",
            "(epoch: 115, iters: 156, time: 0.023, data: 0.001) G_GAN: 3.912 G_L1: 16.661 D_real: 0.019 D_fake: 0.062 \n",
            "(epoch: 115, iters: 256, time: 0.163, data: 0.001) G_GAN: 4.776 G_L1: 24.970 D_real: 0.002 D_fake: 0.077 \n",
            "saving the model at the end of epoch 115, iters 34040\n",
            "End of epoch 115 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 116, iters: 60, time: 0.022, data: 0.001) G_GAN: 1.999 G_L1: 19.096 D_real: 1.274 D_fake: 0.049 \n",
            "(epoch: 116, iters: 160, time: 0.030, data: 0.001) G_GAN: 3.283 G_L1: 49.771 D_real: 0.005 D_fake: 0.139 \n",
            "(epoch: 116, iters: 260, time: 0.024, data: 0.001) G_GAN: 2.751 G_L1: 23.434 D_real: 1.111 D_fake: 0.008 \n",
            "End of epoch 116 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 117, iters: 64, time: 0.217, data: 0.001) G_GAN: 3.756 G_L1: 19.387 D_real: 0.233 D_fake: 0.019 \n",
            "(epoch: 117, iters: 164, time: 0.029, data: 0.001) G_GAN: 9.195 G_L1: 29.969 D_real: 0.025 D_fake: 0.002 \n",
            "(epoch: 117, iters: 264, time: 0.024, data: 0.001) G_GAN: 8.268 G_L1: 27.131 D_real: 0.028 D_fake: 0.001 \n",
            "End of epoch 117 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 118, iters: 68, time: 0.023, data: 0.001) G_GAN: 3.757 G_L1: 41.246 D_real: 0.006 D_fake: 0.269 \n",
            "(epoch: 118, iters: 168, time: 0.168, data: 0.001) G_GAN: 4.961 G_L1: 30.422 D_real: 0.007 D_fake: 0.430 \n",
            "(epoch: 118, iters: 268, time: 0.022, data: 0.001) G_GAN: 7.249 G_L1: 22.110 D_real: 0.090 D_fake: 0.003 \n",
            "End of epoch 118 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 119, iters: 72, time: 0.024, data: 0.001) G_GAN: 1.583 G_L1: 27.341 D_real: 1.002 D_fake: 0.132 \n",
            "saving the latest model (epoch 119, total_iters 35000)\n",
            "(epoch: 119, iters: 172, time: 0.023, data: 0.001) G_GAN: 3.697 G_L1: 18.752 D_real: 0.293 D_fake: 0.211 \n",
            "(epoch: 119, iters: 272, time: 0.170, data: 0.001) G_GAN: 3.323 G_L1: 19.453 D_real: 0.182 D_fake: 0.255 \n",
            "End of epoch 119 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 120, iters: 76, time: 0.024, data: 0.001) G_GAN: 6.115 G_L1: 35.277 D_real: 0.007 D_fake: 0.021 \n",
            "(epoch: 120, iters: 176, time: 0.023, data: 0.001) G_GAN: 4.161 G_L1: 41.345 D_real: 0.140 D_fake: 0.102 \n",
            "(epoch: 120, iters: 276, time: 0.028, data: 0.001) G_GAN: 5.251 G_L1: 45.953 D_real: 0.091 D_fake: 0.006 \n",
            "saving the model at the end of epoch 120, iters 35520\n",
            "End of epoch 120 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 121, iters: 80, time: 0.187, data: 0.001) G_GAN: 5.383 G_L1: 28.292 D_real: 0.002 D_fake: 0.153 \n",
            "(epoch: 121, iters: 180, time: 0.023, data: 0.001) G_GAN: 7.423 G_L1: 23.006 D_real: 0.026 D_fake: 0.002 \n",
            "(epoch: 121, iters: 280, time: 0.040, data: 0.001) G_GAN: 6.905 G_L1: 31.510 D_real: 0.044 D_fake: 0.018 \n",
            "End of epoch 121 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 122, iters: 84, time: 0.029, data: 0.001) G_GAN: 2.910 G_L1: 18.566 D_real: 1.947 D_fake: 0.000 \n",
            "(epoch: 122, iters: 184, time: 0.152, data: 0.001) G_GAN: 6.593 G_L1: 22.764 D_real: 0.597 D_fake: 0.001 \n",
            "(epoch: 122, iters: 284, time: 0.024, data: 0.001) G_GAN: 6.881 G_L1: 27.431 D_real: 0.055 D_fake: 1.170 \n",
            "End of epoch 122 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 123, iters: 88, time: 0.025, data: 0.001) G_GAN: 2.816 G_L1: 18.252 D_real: 0.152 D_fake: 0.055 \n",
            "(epoch: 123, iters: 188, time: 0.024, data: 0.001) G_GAN: 3.887 G_L1: 23.107 D_real: 0.057 D_fake: 0.137 \n",
            "(epoch: 123, iters: 288, time: 0.152, data: 0.001) G_GAN: 3.803 G_L1: 24.203 D_real: 0.006 D_fake: 0.072 \n",
            "End of epoch 123 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 124, iters: 92, time: 0.034, data: 0.001) G_GAN: 7.642 G_L1: 26.777 D_real: 0.005 D_fake: 0.002 \n",
            "(epoch: 124, iters: 192, time: 0.027, data: 0.001) G_GAN: 4.867 G_L1: 21.488 D_real: 0.218 D_fake: 0.011 \n",
            "(epoch: 124, iters: 292, time: 0.022, data: 0.001) G_GAN: 7.274 G_L1: 27.311 D_real: 0.004 D_fake: 0.003 \n",
            "End of epoch 124 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 125, iters: 96, time: 0.223, data: 0.001) G_GAN: 8.543 G_L1: 30.230 D_real: 0.107 D_fake: 0.001 \n",
            "(epoch: 125, iters: 196, time: 0.029, data: 0.001) G_GAN: 3.748 G_L1: 20.373 D_real: 0.062 D_fake: 0.131 \n",
            "(epoch: 125, iters: 296, time: 0.028, data: 0.002) G_GAN: 3.349 G_L1: 13.740 D_real: 0.133 D_fake: 0.075 \n",
            "saving the model at the end of epoch 125, iters 37000\n",
            "End of epoch 125 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 126, iters: 100, time: 0.027, data: 0.117) G_GAN: 5.806 G_L1: 23.411 D_real: 0.005 D_fake: 0.023 \n",
            "(epoch: 126, iters: 200, time: 0.158, data: 0.001) G_GAN: 7.724 G_L1: 26.458 D_real: 0.041 D_fake: 0.003 \n",
            "End of epoch 126 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 127, iters: 4, time: 0.027, data: 0.004) G_GAN: 4.685 G_L1: 26.704 D_real: 0.011 D_fake: 0.180 \n",
            "(epoch: 127, iters: 104, time: 0.022, data: 0.000) G_GAN: 8.721 G_L1: 37.793 D_real: 0.001 D_fake: 0.001 \n",
            "(epoch: 127, iters: 204, time: 0.024, data: 0.001) G_GAN: 6.765 G_L1: 20.123 D_real: 0.030 D_fake: 1.308 \n",
            "End of epoch 127 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 128, iters: 8, time: 0.156, data: 0.001) G_GAN: 4.202 G_L1: 19.374 D_real: 0.101 D_fake: 0.073 \n",
            "(epoch: 128, iters: 108, time: 0.028, data: 0.000) G_GAN: 6.117 G_L1: 22.747 D_real: 0.011 D_fake: 0.010 \n",
            "(epoch: 128, iters: 208, time: 0.024, data: 0.001) G_GAN: 5.455 G_L1: 22.927 D_real: 0.007 D_fake: 0.560 \n",
            "End of epoch 128 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 129, iters: 12, time: 0.023, data: 0.001) G_GAN: 3.960 G_L1: 17.225 D_real: 0.017 D_fake: 0.221 \n",
            "(epoch: 129, iters: 112, time: 0.152, data: 0.001) G_GAN: 3.950 G_L1: 18.113 D_real: 0.367 D_fake: 0.019 \n",
            "(epoch: 129, iters: 212, time: 0.023, data: 0.001) G_GAN: 3.394 G_L1: 17.411 D_real: 0.040 D_fake: 0.069 \n",
            "End of epoch 129 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 130, iters: 16, time: 0.030, data: 0.001) G_GAN: 5.116 G_L1: 15.948 D_real: 0.040 D_fake: 0.508 \n",
            "(epoch: 130, iters: 116, time: 0.023, data: 0.001) G_GAN: 6.636 G_L1: 15.755 D_real: 0.017 D_fake: 1.122 \n",
            "(epoch: 130, iters: 216, time: 0.295, data: 0.001) G_GAN: 4.485 G_L1: 27.251 D_real: 0.019 D_fake: 0.052 \n",
            "saving the model at the end of epoch 130, iters 38480\n",
            "End of epoch 130 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 131, iters: 20, time: 0.026, data: 0.001) G_GAN: 5.323 G_L1: 27.662 D_real: 0.054 D_fake: 0.816 \n",
            "(epoch: 131, iters: 120, time: 0.023, data: 0.001) G_GAN: 6.893 G_L1: 26.717 D_real: 0.027 D_fake: 0.009 \n",
            "(epoch: 131, iters: 220, time: 0.047, data: 0.001) G_GAN: 4.061 G_L1: 29.843 D_real: 0.033 D_fake: 0.052 \n",
            "End of epoch 131 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 132, iters: 24, time: 0.157, data: 0.002) G_GAN: 3.710 G_L1: 16.162 D_real: 0.071 D_fake: 0.101 \n",
            "(epoch: 132, iters: 124, time: 0.025, data: 0.001) G_GAN: 5.651 G_L1: 20.542 D_real: 0.051 D_fake: 0.036 \n",
            "(epoch: 132, iters: 224, time: 0.024, data: 0.002) G_GAN: 5.395 G_L1: 28.232 D_real: 0.236 D_fake: 0.013 \n",
            "End of epoch 132 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 133, iters: 28, time: 0.023, data: 0.001) G_GAN: 3.940 G_L1: 19.181 D_real: 0.040 D_fake: 0.142 \n",
            "(epoch: 133, iters: 128, time: 0.220, data: 0.001) G_GAN: 4.013 G_L1: 27.735 D_real: 0.043 D_fake: 0.040 \n",
            "(epoch: 133, iters: 228, time: 0.024, data: 0.001) G_GAN: 6.137 G_L1: 27.236 D_real: 0.030 D_fake: 0.027 \n",
            "End of epoch 133 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 134, iters: 32, time: 0.023, data: 0.001) G_GAN: 7.175 G_L1: 28.680 D_real: 0.001 D_fake: 0.006 \n",
            "(epoch: 134, iters: 132, time: 0.024, data: 0.001) G_GAN: 3.449 G_L1: 16.010 D_real: 0.146 D_fake: 0.223 \n",
            "(epoch: 134, iters: 232, time: 0.160, data: 0.001) G_GAN: 5.069 G_L1: 18.244 D_real: 0.511 D_fake: 0.004 \n",
            "End of epoch 134 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 135, iters: 36, time: 0.023, data: 0.001) G_GAN: 4.425 G_L1: 25.141 D_real: 0.037 D_fake: 0.035 \n",
            "(epoch: 135, iters: 136, time: 0.023, data: 0.001) G_GAN: 3.566 G_L1: 22.180 D_real: 0.190 D_fake: 0.056 \n",
            "(epoch: 135, iters: 236, time: 0.032, data: 0.001) G_GAN: 5.846 G_L1: 36.409 D_real: 0.017 D_fake: 0.007 \n",
            "saving the model at the end of epoch 135, iters 39960\n",
            "End of epoch 135 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 136, iters: 40, time: 0.166, data: 0.001) G_GAN: 2.377 G_L1: 24.541 D_real: 0.890 D_fake: 0.078 \n",
            "saving the latest model (epoch 136, total_iters 40000)\n",
            "(epoch: 136, iters: 140, time: 0.024, data: 0.001) G_GAN: 4.897 G_L1: 21.118 D_real: 0.154 D_fake: 0.010 \n",
            "(epoch: 136, iters: 240, time: 0.024, data: 0.001) G_GAN: 5.042 G_L1: 21.503 D_real: 0.001 D_fake: 0.079 \n",
            "End of epoch 136 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 137, iters: 44, time: 0.023, data: 0.001) G_GAN: 3.644 G_L1: 29.581 D_real: 0.041 D_fake: 0.066 \n",
            "(epoch: 137, iters: 144, time: 0.166, data: 0.001) G_GAN: 9.479 G_L1: 23.649 D_real: 0.183 D_fake: 0.000 \n",
            "(epoch: 137, iters: 244, time: 0.036, data: 0.001) G_GAN: 4.663 G_L1: 16.950 D_real: 0.046 D_fake: 0.727 \n",
            "End of epoch 137 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 138, iters: 48, time: 0.024, data: 0.001) G_GAN: 2.435 G_L1: 23.000 D_real: 1.185 D_fake: 0.012 \n",
            "(epoch: 138, iters: 148, time: 0.023, data: 0.001) G_GAN: 5.959 G_L1: 40.993 D_real: 0.002 D_fake: 0.007 \n",
            "(epoch: 138, iters: 248, time: 0.159, data: 0.001) G_GAN: 3.754 G_L1: 29.543 D_real: 0.013 D_fake: 0.112 \n",
            "End of epoch 138 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 139, iters: 52, time: 0.029, data: 0.001) G_GAN: 4.935 G_L1: 27.185 D_real: 0.001 D_fake: 0.031 \n",
            "(epoch: 139, iters: 152, time: 0.023, data: 0.001) G_GAN: 7.162 G_L1: 22.781 D_real: 0.134 D_fake: 0.002 \n",
            "(epoch: 139, iters: 252, time: 0.023, data: 0.001) G_GAN: 6.937 G_L1: 21.170 D_real: 0.086 D_fake: 0.003 \n",
            "End of epoch 139 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 140, iters: 56, time: 0.222, data: 0.001) G_GAN: 4.832 G_L1: 16.786 D_real: 0.010 D_fake: 0.502 \n",
            "(epoch: 140, iters: 156, time: 0.023, data: 0.001) G_GAN: 4.279 G_L1: 26.150 D_real: 0.001 D_fake: 0.142 \n",
            "(epoch: 140, iters: 256, time: 0.026, data: 0.001) G_GAN: 4.536 G_L1: 23.875 D_real: 0.020 D_fake: 0.017 \n",
            "saving the model at the end of epoch 140, iters 41440\n",
            "End of epoch 140 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 141, iters: 60, time: 0.024, data: 0.001) G_GAN: 5.269 G_L1: 29.759 D_real: 0.022 D_fake: 0.026 \n",
            "(epoch: 141, iters: 160, time: 0.170, data: 0.001) G_GAN: 8.605 G_L1: 32.566 D_real: 0.285 D_fake: 0.000 \n",
            "(epoch: 141, iters: 260, time: 0.023, data: 0.001) G_GAN: 4.642 G_L1: 22.083 D_real: 0.038 D_fake: 0.297 \n",
            "End of epoch 141 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 142, iters: 64, time: 0.040, data: 0.001) G_GAN: 9.204 G_L1: 34.794 D_real: 0.161 D_fake: 0.002 \n",
            "(epoch: 142, iters: 164, time: 0.024, data: 0.002) G_GAN: 5.332 G_L1: 20.785 D_real: 0.008 D_fake: 0.676 \n",
            "(epoch: 142, iters: 264, time: 0.175, data: 0.001) G_GAN: 4.704 G_L1: 22.473 D_real: 0.001 D_fake: 0.049 \n",
            "End of epoch 142 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 143, iters: 68, time: 0.025, data: 0.001) G_GAN: 6.156 G_L1: 16.511 D_real: 0.019 D_fake: 0.851 \n",
            "(epoch: 143, iters: 168, time: 0.030, data: 0.001) G_GAN: 1.001 G_L1: 13.725 D_real: 0.869 D_fake: 0.108 \n",
            "(epoch: 143, iters: 268, time: 0.024, data: 0.001) G_GAN: 6.382 G_L1: 28.906 D_real: 0.017 D_fake: 0.011 \n",
            "End of epoch 143 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 144, iters: 72, time: 0.195, data: 0.001) G_GAN: 4.448 G_L1: 22.860 D_real: 0.002 D_fake: 0.047 \n",
            "(epoch: 144, iters: 172, time: 0.024, data: 0.001) G_GAN: 4.798 G_L1: 28.206 D_real: 0.002 D_fake: 0.016 \n",
            "(epoch: 144, iters: 272, time: 0.024, data: 0.001) G_GAN: 6.400 G_L1: 23.765 D_real: 0.031 D_fake: 0.008 \n",
            "End of epoch 144 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 145, iters: 76, time: 0.023, data: 0.001) G_GAN: 4.813 G_L1: 24.850 D_real: 0.493 D_fake: 0.005 \n",
            "(epoch: 145, iters: 176, time: 0.165, data: 0.001) G_GAN: 7.330 G_L1: 30.094 D_real: 0.056 D_fake: 0.002 \n",
            "(epoch: 145, iters: 276, time: 0.028, data: 0.001) G_GAN: 4.374 G_L1: 31.376 D_real: 0.005 D_fake: 0.494 \n",
            "saving the model at the end of epoch 145, iters 42920\n",
            "End of epoch 145 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 146, iters: 80, time: 0.023, data: 0.003) G_GAN: 4.487 G_L1: 33.622 D_real: 0.007 D_fake: 0.099 \n",
            "(epoch: 146, iters: 180, time: 0.024, data: 0.001) G_GAN: 4.474 G_L1: 25.224 D_real: 0.722 D_fake: 0.027 \n",
            "(epoch: 146, iters: 280, time: 0.228, data: 0.001) G_GAN: 3.540 G_L1: 23.206 D_real: 0.062 D_fake: 0.234 \n",
            "End of epoch 146 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 147, iters: 84, time: 0.024, data: 0.002) G_GAN: 8.582 G_L1: 25.225 D_real: 0.046 D_fake: 0.002 \n",
            "(epoch: 147, iters: 184, time: 0.039, data: 0.001) G_GAN: 3.730 G_L1: 14.159 D_real: 0.204 D_fake: 0.040 \n",
            "(epoch: 147, iters: 284, time: 0.024, data: 0.001) G_GAN: 5.383 G_L1: 19.593 D_real: 0.033 D_fake: 0.006 \n",
            "End of epoch 147 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 148, iters: 88, time: 0.191, data: 0.001) G_GAN: 4.877 G_L1: 16.956 D_real: 0.070 D_fake: 0.031 \n",
            "(epoch: 148, iters: 188, time: 0.025, data: 0.002) G_GAN: 6.556 G_L1: 29.317 D_real: 0.141 D_fake: 0.013 \n",
            "(epoch: 148, iters: 288, time: 0.030, data: 0.001) G_GAN: 4.399 G_L1: 26.739 D_real: 0.000 D_fake: 0.052 \n",
            "End of epoch 148 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 149, iters: 92, time: 0.023, data: 0.001) G_GAN: 7.991 G_L1: 23.695 D_real: 0.024 D_fake: 0.005 \n",
            "(epoch: 149, iters: 192, time: 0.178, data: 0.001) G_GAN: 3.503 G_L1: 19.613 D_real: 0.294 D_fake: 0.072 \n",
            "(epoch: 149, iters: 292, time: 0.022, data: 0.001) G_GAN: 3.132 G_L1: 19.762 D_real: 1.481 D_fake: 0.004 \n",
            "End of epoch 149 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 150, iters: 96, time: 0.024, data: 0.001) G_GAN: 4.917 G_L1: 18.979 D_real: 0.001 D_fake: 0.084 \n",
            "(epoch: 150, iters: 196, time: 0.023, data: 0.001) G_GAN: 3.387 G_L1: 28.180 D_real: 0.058 D_fake: 0.195 \n",
            "(epoch: 150, iters: 296, time: 0.171, data: 0.001) G_GAN: 7.889 G_L1: 29.997 D_real: 0.003 D_fake: 0.002 \n",
            "saving the model at the end of epoch 150, iters 44400\n",
            "End of epoch 150 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 151, iters: 100, time: 0.029, data: 0.126) G_GAN: 5.031 G_L1: 23.873 D_real: 0.011 D_fake: 0.091 \n",
            "(epoch: 151, iters: 200, time: 0.024, data: 0.001) G_GAN: 7.184 G_L1: 25.544 D_real: 0.393 D_fake: 0.005 \n",
            "End of epoch 151 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 152, iters: 4, time: 0.032, data: 0.001) G_GAN: 4.748 G_L1: 18.913 D_real: 1.395 D_fake: 0.001 \n",
            "(epoch: 152, iters: 104, time: 0.178, data: 0.000) G_GAN: 7.098 G_L1: 37.953 D_real: 0.001 D_fake: 0.003 \n",
            "(epoch: 152, iters: 204, time: 0.024, data: 0.001) G_GAN: 4.101 G_L1: 20.896 D_real: 0.004 D_fake: 0.070 \n",
            "End of epoch 152 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 153, iters: 8, time: 0.029, data: 0.001) G_GAN: 4.840 G_L1: 34.095 D_real: 0.000 D_fake: 1.009 \n",
            "saving the latest model (epoch 153, total_iters 45000)\n",
            "(epoch: 153, iters: 108, time: 0.028, data: 0.002) G_GAN: 4.288 G_L1: 19.315 D_real: 0.294 D_fake: 0.018 \n",
            "(epoch: 153, iters: 208, time: 0.240, data: 0.001) G_GAN: 7.498 G_L1: 23.700 D_real: 0.015 D_fake: 0.002 \n",
            "End of epoch 153 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 154, iters: 12, time: 0.023, data: 0.007) G_GAN: 3.620 G_L1: 17.902 D_real: 0.263 D_fake: 0.475 \n",
            "(epoch: 154, iters: 112, time: 0.024, data: 0.001) G_GAN: 7.548 G_L1: 27.327 D_real: 0.000 D_fake: 0.022 \n",
            "(epoch: 154, iters: 212, time: 0.024, data: 0.001) G_GAN: 5.782 G_L1: 20.126 D_real: 0.003 D_fake: 0.032 \n",
            "End of epoch 154 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 155, iters: 16, time: 0.188, data: 0.001) G_GAN: 5.756 G_L1: 23.541 D_real: 0.020 D_fake: 0.008 \n",
            "(epoch: 155, iters: 116, time: 0.023, data: 0.002) G_GAN: 5.128 G_L1: 22.989 D_real: 0.014 D_fake: 0.128 \n",
            "(epoch: 155, iters: 216, time: 0.024, data: 0.001) G_GAN: 4.650 G_L1: 30.156 D_real: 0.311 D_fake: 0.009 \n",
            "saving the model at the end of epoch 155, iters 45880\n",
            "End of epoch 155 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 156, iters: 20, time: 0.029, data: 0.001) G_GAN: 2.803 G_L1: 17.753 D_real: 0.502 D_fake: 0.057 \n",
            "(epoch: 156, iters: 120, time: 0.175, data: 0.001) G_GAN: 3.730 G_L1: 19.159 D_real: 0.007 D_fake: 0.229 \n",
            "(epoch: 156, iters: 220, time: 0.024, data: 0.001) G_GAN: 8.249 G_L1: 28.391 D_real: 0.002 D_fake: 0.001 \n",
            "End of epoch 156 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 157, iters: 24, time: 0.024, data: 0.001) G_GAN: 4.813 G_L1: 30.633 D_real: 0.001 D_fake: 0.025 \n",
            "(epoch: 157, iters: 124, time: 0.030, data: 0.001) G_GAN: 8.663 G_L1: 25.814 D_real: 0.000 D_fake: 0.001 \n",
            "(epoch: 157, iters: 224, time: 0.174, data: 0.001) G_GAN: 6.554 G_L1: 23.653 D_real: 0.438 D_fake: 0.002 \n",
            "End of epoch 157 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 158, iters: 28, time: 0.027, data: 0.001) G_GAN: 5.027 G_L1: 22.459 D_real: 0.077 D_fake: 0.009 \n",
            "(epoch: 158, iters: 128, time: 0.029, data: 0.001) G_GAN: 5.027 G_L1: 25.152 D_real: 0.000 D_fake: 0.030 \n",
            "(epoch: 158, iters: 228, time: 0.024, data: 0.001) G_GAN: 6.335 G_L1: 24.866 D_real: 0.019 D_fake: 0.011 \n",
            "End of epoch 158 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 159, iters: 32, time: 0.180, data: 0.001) G_GAN: 6.835 G_L1: 22.268 D_real: 0.014 D_fake: 0.006 \n",
            "(epoch: 159, iters: 132, time: 0.030, data: 0.001) G_GAN: 3.916 G_L1: 24.102 D_real: 0.000 D_fake: 0.138 \n",
            "(epoch: 159, iters: 232, time: 0.031, data: 0.001) G_GAN: 4.733 G_L1: 20.677 D_real: 0.001 D_fake: 0.191 \n",
            "End of epoch 159 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 160, iters: 36, time: 0.029, data: 0.002) G_GAN: 5.070 G_L1: 20.983 D_real: 0.123 D_fake: 0.086 \n",
            "(epoch: 160, iters: 136, time: 0.230, data: 0.001) G_GAN: 5.495 G_L1: 35.624 D_real: 0.001 D_fake: 0.628 \n",
            "(epoch: 160, iters: 236, time: 0.023, data: 0.001) G_GAN: 3.735 G_L1: 24.314 D_real: 1.000 D_fake: 0.022 \n",
            "saving the model at the end of epoch 160, iters 47360\n",
            "End of epoch 160 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 161, iters: 40, time: 0.024, data: 0.001) G_GAN: 4.661 G_L1: 21.361 D_real: 0.027 D_fake: 0.493 \n",
            "(epoch: 161, iters: 140, time: 0.024, data: 0.001) G_GAN: 5.425 G_L1: 18.435 D_real: 0.014 D_fake: 0.240 \n",
            "(epoch: 161, iters: 240, time: 0.226, data: 0.001) G_GAN: 0.886 G_L1: 20.101 D_real: 1.328 D_fake: 0.130 \n",
            "End of epoch 161 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 162, iters: 44, time: 0.024, data: 0.002) G_GAN: 4.611 G_L1: 21.751 D_real: 0.035 D_fake: 0.024 \n",
            "(epoch: 162, iters: 144, time: 0.023, data: 0.001) G_GAN: 4.933 G_L1: 22.665 D_real: 0.042 D_fake: 0.139 \n",
            "(epoch: 162, iters: 244, time: 0.024, data: 0.001) G_GAN: 5.191 G_L1: 21.506 D_real: 0.029 D_fake: 0.049 \n",
            "End of epoch 162 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 163, iters: 48, time: 0.186, data: 0.001) G_GAN: 7.151 G_L1: 24.845 D_real: 0.009 D_fake: 0.002 \n",
            "(epoch: 163, iters: 148, time: 0.024, data: 0.001) G_GAN: 3.879 G_L1: 21.413 D_real: 0.035 D_fake: 0.156 \n",
            "(epoch: 163, iters: 248, time: 0.024, data: 0.001) G_GAN: 4.679 G_L1: 19.125 D_real: 0.326 D_fake: 0.016 \n",
            "End of epoch 163 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 164, iters: 52, time: 0.024, data: 0.001) G_GAN: 3.166 G_L1: 24.006 D_real: 0.194 D_fake: 0.072 \n",
            "(epoch: 164, iters: 152, time: 0.209, data: 0.001) G_GAN: 4.652 G_L1: 21.336 D_real: 0.003 D_fake: 0.031 \n",
            "(epoch: 164, iters: 252, time: 0.023, data: 0.001) G_GAN: 4.538 G_L1: 19.542 D_real: 0.013 D_fake: 0.182 \n",
            "End of epoch 164 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 165, iters: 56, time: 0.023, data: 0.001) G_GAN: 4.370 G_L1: 22.446 D_real: 0.003 D_fake: 0.048 \n",
            "(epoch: 165, iters: 156, time: 0.026, data: 0.001) G_GAN: 3.855 G_L1: 22.912 D_real: 0.402 D_fake: 0.007 \n",
            "(epoch: 165, iters: 256, time: 0.191, data: 0.001) G_GAN: 4.142 G_L1: 28.223 D_real: 0.127 D_fake: 0.075 \n",
            "saving the model at the end of epoch 165, iters 48840\n",
            "End of epoch 165 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 166, iters: 60, time: 0.025, data: 0.001) G_GAN: 4.930 G_L1: 21.726 D_real: 0.056 D_fake: 0.171 \n",
            "(epoch: 166, iters: 160, time: 0.023, data: 0.001) G_GAN: 3.510 G_L1: 19.816 D_real: 0.634 D_fake: 0.005 \n",
            "(epoch: 166, iters: 260, time: 0.023, data: 0.001) G_GAN: 6.445 G_L1: 29.379 D_real: 0.007 D_fake: 0.040 \n",
            "End of epoch 166 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 167, iters: 64, time: 0.267, data: 0.001) G_GAN: 6.407 G_L1: 24.313 D_real: 0.008 D_fake: 0.002 \n",
            "(epoch: 167, iters: 164, time: 0.024, data: 0.002) G_GAN: 4.601 G_L1: 21.253 D_real: 0.073 D_fake: 0.042 \n",
            "(epoch: 167, iters: 264, time: 0.023, data: 0.001) G_GAN: 3.310 G_L1: 16.478 D_real: 0.015 D_fake: 0.138 \n",
            "End of epoch 167 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 168, iters: 68, time: 0.029, data: 0.001) G_GAN: 4.245 G_L1: 17.519 D_real: 0.019 D_fake: 0.175 \n",
            "(epoch: 168, iters: 168, time: 0.191, data: 0.002) G_GAN: 5.533 G_L1: 26.357 D_real: 0.002 D_fake: 0.008 \n",
            "(epoch: 168, iters: 268, time: 0.032, data: 0.001) G_GAN: 4.129 G_L1: 21.080 D_real: 0.001 D_fake: 0.077 \n",
            "End of epoch 168 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 169, iters: 72, time: 0.023, data: 0.001) G_GAN: 5.558 G_L1: 21.199 D_real: 0.011 D_fake: 0.151 \n",
            "(epoch: 169, iters: 172, time: 0.023, data: 0.001) G_GAN: 4.996 G_L1: 23.613 D_real: 0.084 D_fake: 0.254 \n",
            "(epoch: 169, iters: 272, time: 0.194, data: 0.001) G_GAN: 5.455 G_L1: 23.370 D_real: 0.253 D_fake: 0.841 \n",
            "saving the latest model (epoch 169, total_iters 50000)\n",
            "End of epoch 169 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 170, iters: 76, time: 0.024, data: 0.001) G_GAN: 2.713 G_L1: 19.463 D_real: 1.231 D_fake: 0.009 \n",
            "(epoch: 170, iters: 176, time: 0.027, data: 0.001) G_GAN: 3.131 G_L1: 17.960 D_real: 0.233 D_fake: 0.132 \n",
            "(epoch: 170, iters: 276, time: 0.025, data: 0.002) G_GAN: 11.090 G_L1: 22.002 D_real: 0.004 D_fake: 0.000 \n",
            "saving the model at the end of epoch 170, iters 50320\n",
            "End of epoch 170 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 171, iters: 80, time: 0.192, data: 0.001) G_GAN: 4.143 G_L1: 17.650 D_real: 0.122 D_fake: 0.046 \n",
            "(epoch: 171, iters: 180, time: 0.031, data: 0.001) G_GAN: 2.443 G_L1: 20.804 D_real: 0.572 D_fake: 0.142 \n",
            "(epoch: 171, iters: 280, time: 0.024, data: 0.001) G_GAN: 4.911 G_L1: 20.931 D_real: 0.191 D_fake: 0.030 \n",
            "End of epoch 171 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 172, iters: 84, time: 0.024, data: 0.001) G_GAN: 7.229 G_L1: 41.482 D_real: 0.073 D_fake: 0.001 \n",
            "(epoch: 172, iters: 184, time: 0.257, data: 0.001) G_GAN: 4.586 G_L1: 16.355 D_real: 0.011 D_fake: 0.845 \n",
            "(epoch: 172, iters: 284, time: 0.023, data: 0.001) G_GAN: 5.177 G_L1: 24.486 D_real: 0.020 D_fake: 0.378 \n",
            "End of epoch 172 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 173, iters: 88, time: 0.025, data: 0.001) G_GAN: 5.807 G_L1: 20.427 D_real: 0.018 D_fake: 1.460 \n",
            "(epoch: 173, iters: 188, time: 0.029, data: 0.001) G_GAN: 4.632 G_L1: 21.776 D_real: 0.056 D_fake: 0.022 \n",
            "(epoch: 173, iters: 288, time: 0.190, data: 0.001) G_GAN: 3.980 G_L1: 19.351 D_real: 0.005 D_fake: 0.223 \n",
            "End of epoch 173 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 174, iters: 92, time: 0.027, data: 0.002) G_GAN: 3.855 G_L1: 20.888 D_real: 0.009 D_fake: 0.221 \n",
            "(epoch: 174, iters: 192, time: 0.023, data: 0.001) G_GAN: 5.224 G_L1: 14.975 D_real: 0.035 D_fake: 0.028 \n",
            "(epoch: 174, iters: 292, time: 0.028, data: 0.001) G_GAN: 4.348 G_L1: 17.616 D_real: 0.006 D_fake: 0.036 \n",
            "End of epoch 174 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 175, iters: 96, time: 0.195, data: 0.001) G_GAN: 4.145 G_L1: 23.901 D_real: 0.022 D_fake: 0.018 \n",
            "(epoch: 175, iters: 196, time: 0.033, data: 0.001) G_GAN: 5.590 G_L1: 20.732 D_real: 0.050 D_fake: 0.008 \n",
            "(epoch: 175, iters: 296, time: 0.024, data: 0.001) G_GAN: 6.031 G_L1: 24.925 D_real: 0.003 D_fake: 0.009 \n",
            "saving the model at the end of epoch 175, iters 51800\n",
            "End of epoch 175 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 176, iters: 100, time: 0.023, data: 0.127) G_GAN: 3.783 G_L1: 42.783 D_real: 0.003 D_fake: 0.051 \n",
            "(epoch: 176, iters: 200, time: 0.470, data: 0.001) G_GAN: 3.704 G_L1: 18.227 D_real: 0.077 D_fake: 0.182 \n",
            "End of epoch 176 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 177, iters: 4, time: 0.036, data: 0.002) G_GAN: 4.847 G_L1: 30.698 D_real: 0.281 D_fake: 0.011 \n",
            "(epoch: 177, iters: 104, time: 0.024, data: 0.000) G_GAN: 3.326 G_L1: 14.620 D_real: 0.088 D_fake: 0.055 \n",
            "(epoch: 177, iters: 204, time: 0.024, data: 0.001) G_GAN: 7.104 G_L1: 24.588 D_real: 0.048 D_fake: 0.004 \n",
            "End of epoch 177 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 178, iters: 8, time: 0.389, data: 0.001) G_GAN: 8.556 G_L1: 16.735 D_real: 0.088 D_fake: 0.002 \n",
            "(epoch: 178, iters: 108, time: 0.023, data: 0.001) G_GAN: 4.895 G_L1: 24.251 D_real: 0.001 D_fake: 0.173 \n",
            "(epoch: 178, iters: 208, time: 0.024, data: 0.001) G_GAN: 4.311 G_L1: 20.161 D_real: 0.293 D_fake: 0.023 \n",
            "End of epoch 178 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 179, iters: 12, time: 0.024, data: 0.001) G_GAN: 6.087 G_L1: 16.378 D_real: 0.003 D_fake: 0.680 \n",
            "(epoch: 179, iters: 112, time: 0.189, data: 0.001) G_GAN: 7.248 G_L1: 19.795 D_real: 0.572 D_fake: 0.001 \n",
            "(epoch: 179, iters: 212, time: 0.023, data: 0.001) G_GAN: 6.226 G_L1: 17.572 D_real: 0.040 D_fake: 0.005 \n",
            "End of epoch 179 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 180, iters: 16, time: 0.029, data: 0.001) G_GAN: 6.585 G_L1: 27.406 D_real: 0.022 D_fake: 0.008 \n",
            "(epoch: 180, iters: 116, time: 0.024, data: 0.001) G_GAN: 5.900 G_L1: 16.548 D_real: 0.027 D_fake: 0.010 \n",
            "(epoch: 180, iters: 216, time: 0.193, data: 0.001) G_GAN: 5.592 G_L1: 21.749 D_real: 0.124 D_fake: 0.006 \n",
            "saving the model at the end of epoch 180, iters 53280\n",
            "End of epoch 180 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 181, iters: 20, time: 0.029, data: 0.001) G_GAN: 4.928 G_L1: 17.677 D_real: 0.336 D_fake: 0.008 \n",
            "(epoch: 181, iters: 120, time: 0.023, data: 0.001) G_GAN: 3.364 G_L1: 18.521 D_real: 0.016 D_fake: 0.068 \n",
            "(epoch: 181, iters: 220, time: 0.024, data: 0.001) G_GAN: 5.156 G_L1: 20.179 D_real: 0.106 D_fake: 0.030 \n",
            "End of epoch 181 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 182, iters: 24, time: 0.205, data: 0.001) G_GAN: 5.202 G_L1: 22.732 D_real: 0.100 D_fake: 0.785 \n",
            "(epoch: 182, iters: 124, time: 0.029, data: 0.001) G_GAN: 4.815 G_L1: 21.122 D_real: 0.026 D_fake: 0.597 \n",
            "(epoch: 182, iters: 224, time: 0.024, data: 0.001) G_GAN: 7.031 G_L1: 16.078 D_real: 0.007 D_fake: 1.283 \n",
            "End of epoch 182 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 183, iters: 28, time: 0.023, data: 0.001) G_GAN: 6.764 G_L1: 31.760 D_real: 0.081 D_fake: 0.002 \n",
            "(epoch: 183, iters: 128, time: 0.262, data: 0.001) G_GAN: 7.322 G_L1: 18.647 D_real: 0.488 D_fake: 0.002 \n",
            "(epoch: 183, iters: 228, time: 0.025, data: 0.001) G_GAN: 4.614 G_L1: 19.912 D_real: 0.016 D_fake: 0.076 \n",
            "End of epoch 183 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 184, iters: 32, time: 0.023, data: 0.001) G_GAN: 1.459 G_L1: 15.444 D_real: 1.712 D_fake: 0.055 \n",
            "(epoch: 184, iters: 132, time: 0.023, data: 0.001) G_GAN: 4.332 G_L1: 17.993 D_real: 0.001 D_fake: 0.191 \n",
            "(epoch: 184, iters: 232, time: 0.208, data: 0.001) G_GAN: 4.839 G_L1: 17.382 D_real: 0.093 D_fake: 0.057 \n",
            "End of epoch 184 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 185, iters: 36, time: 0.030, data: 0.001) G_GAN: 5.463 G_L1: 24.907 D_real: 0.013 D_fake: 0.322 \n",
            "(epoch: 185, iters: 136, time: 0.023, data: 0.001) G_GAN: 5.141 G_L1: 15.636 D_real: 0.768 D_fake: 0.003 \n",
            "(epoch: 185, iters: 236, time: 0.027, data: 0.001) G_GAN: 4.170 G_L1: 22.008 D_real: 0.014 D_fake: 0.312 \n",
            "saving the model at the end of epoch 185, iters 54760\n",
            "End of epoch 185 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 186, iters: 40, time: 0.205, data: 0.001) G_GAN: 9.381 G_L1: 27.250 D_real: 0.022 D_fake: 0.000 \n",
            "(epoch: 186, iters: 140, time: 0.024, data: 0.002) G_GAN: 4.997 G_L1: 21.041 D_real: 0.013 D_fake: 0.277 \n",
            "(epoch: 186, iters: 240, time: 0.024, data: 0.002) G_GAN: 6.171 G_L1: 18.148 D_real: 0.031 D_fake: 0.994 \n",
            "saving the latest model (epoch 186, total_iters 55000)\n",
            "End of epoch 186 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 187, iters: 44, time: 0.023, data: 0.001) G_GAN: 4.633 G_L1: 19.155 D_real: 0.238 D_fake: 0.012 \n",
            "(epoch: 187, iters: 144, time: 0.247, data: 0.001) G_GAN: 4.889 G_L1: 19.876 D_real: 0.013 D_fake: 0.017 \n",
            "(epoch: 187, iters: 244, time: 0.023, data: 0.001) G_GAN: 2.634 G_L1: 23.052 D_real: 1.073 D_fake: 0.009 \n",
            "End of epoch 187 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 188, iters: 48, time: 0.027, data: 0.001) G_GAN: 5.824 G_L1: 19.165 D_real: 0.005 D_fake: 0.105 \n",
            "(epoch: 188, iters: 148, time: 0.023, data: 0.001) G_GAN: 4.019 G_L1: 19.345 D_real: 0.009 D_fake: 0.403 \n",
            "(epoch: 188, iters: 248, time: 0.253, data: 0.002) G_GAN: 5.718 G_L1: 12.868 D_real: 0.002 D_fake: 3.897 \n",
            "End of epoch 188 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 189, iters: 52, time: 0.025, data: 0.001) G_GAN: 2.624 G_L1: 18.279 D_real: 0.677 D_fake: 0.171 \n",
            "(epoch: 189, iters: 152, time: 0.024, data: 0.001) G_GAN: 4.518 G_L1: 21.403 D_real: 0.836 D_fake: 0.012 \n",
            "(epoch: 189, iters: 252, time: 0.029, data: 0.001) G_GAN: 6.385 G_L1: 21.478 D_real: 0.017 D_fake: 0.007 \n",
            "End of epoch 189 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 190, iters: 56, time: 0.208, data: 0.002) G_GAN: 9.425 G_L1: 14.465 D_real: 0.004 D_fake: 1.835 \n",
            "(epoch: 190, iters: 156, time: 0.025, data: 0.001) G_GAN: 6.199 G_L1: 17.163 D_real: 0.025 D_fake: 0.903 \n",
            "(epoch: 190, iters: 256, time: 0.025, data: 0.001) G_GAN: 4.765 G_L1: 17.209 D_real: 0.124 D_fake: 0.013 \n",
            "saving the model at the end of epoch 190, iters 56240\n",
            "End of epoch 190 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 191, iters: 60, time: 0.024, data: 0.001) G_GAN: 6.712 G_L1: 20.774 D_real: 0.060 D_fake: 0.003 \n",
            "(epoch: 191, iters: 160, time: 0.203, data: 0.001) G_GAN: 1.961 G_L1: 18.728 D_real: 0.715 D_fake: 0.067 \n",
            "(epoch: 191, iters: 260, time: 0.023, data: 0.001) G_GAN: 4.288 G_L1: 15.695 D_real: 0.116 D_fake: 0.028 \n",
            "End of epoch 191 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 192, iters: 64, time: 0.023, data: 0.001) G_GAN: 10.415 G_L1: 23.662 D_real: 0.007 D_fake: 0.000 \n",
            "(epoch: 192, iters: 164, time: 0.024, data: 0.001) G_GAN: 9.411 G_L1: 21.644 D_real: 0.015 D_fake: 0.001 \n",
            "(epoch: 192, iters: 264, time: 0.217, data: 0.001) G_GAN: 7.650 G_L1: 23.703 D_real: 0.000 D_fake: 0.020 \n",
            "End of epoch 192 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 193, iters: 68, time: 0.023, data: 0.001) G_GAN: 6.780 G_L1: 26.171 D_real: 0.908 D_fake: 0.001 \n",
            "(epoch: 193, iters: 168, time: 0.024, data: 0.001) G_GAN: 7.628 G_L1: 27.845 D_real: 0.055 D_fake: 0.001 \n",
            "(epoch: 193, iters: 268, time: 0.024, data: 0.001) G_GAN: 1.142 G_L1: 16.032 D_real: 0.753 D_fake: 0.122 \n",
            "End of epoch 193 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 194, iters: 72, time: 0.259, data: 0.001) G_GAN: 5.235 G_L1: 17.667 D_real: 0.189 D_fake: 0.005 \n",
            "(epoch: 194, iters: 172, time: 0.027, data: 0.001) G_GAN: 4.693 G_L1: 23.785 D_real: 0.005 D_fake: 0.055 \n",
            "(epoch: 194, iters: 272, time: 0.023, data: 0.001) G_GAN: 7.969 G_L1: 18.622 D_real: 0.005 D_fake: 2.592 \n",
            "End of epoch 194 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 195, iters: 76, time: 0.023, data: 0.001) G_GAN: 6.931 G_L1: 21.201 D_real: 0.013 D_fake: 0.005 \n",
            "(epoch: 195, iters: 176, time: 0.348, data: 0.001) G_GAN: 4.345 G_L1: 20.088 D_real: 0.077 D_fake: 0.033 \n",
            "(epoch: 195, iters: 276, time: 0.031, data: 0.001) G_GAN: 5.226 G_L1: 18.870 D_real: 0.123 D_fake: 0.025 \n",
            "saving the model at the end of epoch 195, iters 57720\n",
            "End of epoch 195 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 196, iters: 80, time: 0.025, data: 0.001) G_GAN: 5.095 G_L1: 18.738 D_real: 0.372 D_fake: 0.007 \n",
            "(epoch: 196, iters: 180, time: 0.023, data: 0.001) G_GAN: 4.672 G_L1: 29.982 D_real: 0.000 D_fake: 0.091 \n",
            "(epoch: 196, iters: 280, time: 0.272, data: 0.001) G_GAN: 6.831 G_L1: 52.354 D_real: 0.003 D_fake: 0.016 \n",
            "End of epoch 196 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 197, iters: 84, time: 0.031, data: 0.001) G_GAN: 5.750 G_L1: 22.376 D_real: 0.069 D_fake: 0.025 \n",
            "(epoch: 197, iters: 184, time: 0.026, data: 0.001) G_GAN: 4.011 G_L1: 19.900 D_real: 0.486 D_fake: 0.018 \n",
            "(epoch: 197, iters: 284, time: 0.026, data: 0.002) G_GAN: 4.888 G_L1: 19.932 D_real: 0.077 D_fake: 0.021 \n",
            "End of epoch 197 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 198, iters: 88, time: 0.229, data: 0.001) G_GAN: 4.114 G_L1: 27.889 D_real: 0.236 D_fake: 0.017 \n",
            "(epoch: 198, iters: 188, time: 0.025, data: 0.001) G_GAN: 7.372 G_L1: 24.019 D_real: 0.024 D_fake: 0.002 \n",
            "(epoch: 198, iters: 288, time: 0.029, data: 0.001) G_GAN: 5.077 G_L1: 17.965 D_real: 0.023 D_fake: 0.179 \n",
            "End of epoch 198 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 199, iters: 92, time: 0.022, data: 0.001) G_GAN: 2.819 G_L1: 15.282 D_real: 0.193 D_fake: 0.304 \n",
            "(epoch: 199, iters: 192, time: 0.264, data: 0.001) G_GAN: 3.665 G_L1: 17.563 D_real: 0.008 D_fake: 0.070 \n",
            "(epoch: 199, iters: 292, time: 0.021, data: 0.001) G_GAN: 3.896 G_L1: 14.456 D_real: 0.504 D_fake: 0.017 \n",
            "End of epoch 199 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 200, iters: 96, time: 0.029, data: 0.001) G_GAN: 6.192 G_L1: 16.304 D_real: 0.015 D_fake: 0.005 \n",
            "(epoch: 200, iters: 196, time: 0.026, data: 0.002) G_GAN: 4.121 G_L1: 17.149 D_real: 0.131 D_fake: 0.474 \n",
            "(epoch: 200, iters: 296, time: 0.214, data: 0.001) G_GAN: 7.266 G_L1: 17.368 D_real: 0.001 D_fake: 1.396 \n",
            "saving the model at the end of epoch 200, iters 59200\n",
            "End of epoch 200 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 201, iters: 100, time: 0.024, data: 0.103) G_GAN: 7.278 G_L1: 14.046 D_real: 0.182 D_fake: 0.003 \n",
            "(epoch: 201, iters: 200, time: 0.024, data: 0.002) G_GAN: 5.594 G_L1: 16.712 D_real: 0.007 D_fake: 0.021 \n",
            "End of epoch 201 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 202, iters: 4, time: 0.028, data: 0.001) G_GAN: 4.671 G_L1: 20.471 D_real: 0.005 D_fake: 0.115 \n",
            "(epoch: 202, iters: 104, time: 0.206, data: 0.001) G_GAN: 6.220 G_L1: 15.024 D_real: 0.756 D_fake: 0.002 \n",
            "(epoch: 202, iters: 204, time: 0.023, data: 0.001) G_GAN: 7.503 G_L1: 18.756 D_real: 0.061 D_fake: 0.001 \n",
            "End of epoch 202 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 203, iters: 8, time: 0.023, data: 0.001) G_GAN: 5.384 G_L1: 22.256 D_real: 0.052 D_fake: 0.044 \n",
            "(epoch: 203, iters: 108, time: 0.029, data: 0.000) G_GAN: 5.089 G_L1: 20.839 D_real: 0.001 D_fake: 0.122 \n",
            "(epoch: 203, iters: 208, time: 0.346, data: 0.001) G_GAN: 5.346 G_L1: 15.719 D_real: 0.003 D_fake: 0.016 \n",
            "saving the latest model (epoch 203, total_iters 60000)\n",
            "End of epoch 203 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 204, iters: 12, time: 0.024, data: 0.007) G_GAN: 7.498 G_L1: 22.669 D_real: 0.025 D_fake: 0.003 \n",
            "(epoch: 204, iters: 112, time: 0.023, data: 0.001) G_GAN: 4.515 G_L1: 17.573 D_real: 0.058 D_fake: 0.354 \n",
            "(epoch: 204, iters: 212, time: 0.023, data: 0.001) G_GAN: 6.024 G_L1: 14.736 D_real: 0.007 D_fake: 0.575 \n",
            "End of epoch 204 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 205, iters: 16, time: 0.274, data: 0.001) G_GAN: 3.869 G_L1: 21.221 D_real: 0.064 D_fake: 0.069 \n",
            "(epoch: 205, iters: 116, time: 0.023, data: 0.001) G_GAN: 5.815 G_L1: 23.052 D_real: 0.003 D_fake: 0.012 \n",
            "(epoch: 205, iters: 216, time: 0.023, data: 0.001) G_GAN: 5.151 G_L1: 16.563 D_real: 0.394 D_fake: 0.015 \n",
            "saving the model at the end of epoch 205, iters 60680\n",
            "End of epoch 205 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 206, iters: 20, time: 0.025, data: 0.001) G_GAN: 5.704 G_L1: 24.424 D_real: 0.020 D_fake: 0.663 \n",
            "(epoch: 206, iters: 120, time: 0.371, data: 0.001) G_GAN: 6.275 G_L1: 17.613 D_real: 0.021 D_fake: 0.008 \n",
            "(epoch: 206, iters: 220, time: 0.023, data: 0.002) G_GAN: 6.380 G_L1: 24.058 D_real: 2.110 D_fake: 0.001 \n",
            "End of epoch 206 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 207, iters: 24, time: 0.023, data: 0.001) G_GAN: 5.754 G_L1: 14.611 D_real: 0.122 D_fake: 0.822 \n",
            "(epoch: 207, iters: 124, time: 0.024, data: 0.001) G_GAN: 8.423 G_L1: 28.909 D_real: 0.037 D_fake: 0.004 \n",
            "(epoch: 207, iters: 224, time: 0.213, data: 0.001) G_GAN: 4.003 G_L1: 17.892 D_real: 0.348 D_fake: 0.010 \n",
            "End of epoch 207 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 208, iters: 28, time: 0.022, data: 0.001) G_GAN: 3.848 G_L1: 19.763 D_real: 0.029 D_fake: 0.088 \n",
            "(epoch: 208, iters: 128, time: 0.023, data: 0.001) G_GAN: 4.887 G_L1: 22.608 D_real: 0.009 D_fake: 0.123 \n",
            "(epoch: 208, iters: 228, time: 0.024, data: 0.001) G_GAN: 2.217 G_L1: 19.103 D_real: 1.629 D_fake: 0.025 \n",
            "End of epoch 208 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 209, iters: 32, time: 0.275, data: 0.001) G_GAN: 6.339 G_L1: 18.102 D_real: 0.073 D_fake: 0.003 \n",
            "(epoch: 209, iters: 132, time: 0.023, data: 0.001) G_GAN: 4.872 G_L1: 20.615 D_real: 0.005 D_fake: 0.378 \n",
            "(epoch: 209, iters: 232, time: 0.031, data: 0.001) G_GAN: 6.330 G_L1: 18.822 D_real: 0.130 D_fake: 0.868 \n",
            "End of epoch 209 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 210, iters: 36, time: 0.023, data: 0.002) G_GAN: 4.116 G_L1: 17.108 D_real: 0.002 D_fake: 0.389 \n",
            "(epoch: 210, iters: 136, time: 0.220, data: 0.001) G_GAN: 4.638 G_L1: 24.887 D_real: 0.001 D_fake: 0.063 \n",
            "(epoch: 210, iters: 236, time: 0.028, data: 0.001) G_GAN: 9.520 G_L1: 21.246 D_real: 0.000 D_fake: 1.497 \n",
            "saving the model at the end of epoch 210, iters 62160\n",
            "End of epoch 210 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 211, iters: 40, time: 0.024, data: 0.003) G_GAN: 6.385 G_L1: 19.480 D_real: 0.286 D_fake: 0.002 \n",
            "(epoch: 211, iters: 140, time: 0.023, data: 0.001) G_GAN: 5.921 G_L1: 19.287 D_real: 0.019 D_fake: 0.013 \n",
            "(epoch: 211, iters: 240, time: 0.238, data: 0.001) G_GAN: 5.992 G_L1: 18.935 D_real: 0.004 D_fake: 0.004 \n",
            "End of epoch 211 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 212, iters: 44, time: 0.032, data: 0.002) G_GAN: 4.534 G_L1: 20.861 D_real: 0.176 D_fake: 0.038 \n",
            "(epoch: 212, iters: 144, time: 0.024, data: 0.001) G_GAN: 5.709 G_L1: 17.116 D_real: 0.123 D_fake: 0.004 \n",
            "(epoch: 212, iters: 244, time: 0.024, data: 0.001) G_GAN: 4.311 G_L1: 16.768 D_real: 0.347 D_fake: 0.020 \n",
            "End of epoch 212 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 213, iters: 48, time: 0.254, data: 0.001) G_GAN: 4.561 G_L1: 15.855 D_real: 0.042 D_fake: 0.078 \n",
            "(epoch: 213, iters: 148, time: 0.025, data: 0.002) G_GAN: 3.857 G_L1: 24.879 D_real: 0.009 D_fake: 0.071 \n",
            "(epoch: 213, iters: 248, time: 0.031, data: 0.001) G_GAN: 4.003 G_L1: 17.672 D_real: 0.001 D_fake: 0.111 \n",
            "End of epoch 213 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 214, iters: 52, time: 0.024, data: 0.002) G_GAN: 5.348 G_L1: 22.767 D_real: 0.159 D_fake: 0.023 \n",
            "(epoch: 214, iters: 152, time: 0.307, data: 0.001) G_GAN: 7.968 G_L1: 20.089 D_real: 0.113 D_fake: 0.001 \n",
            "(epoch: 214, iters: 252, time: 0.023, data: 0.001) G_GAN: 5.260 G_L1: 16.850 D_real: 0.008 D_fake: 0.145 \n",
            "End of epoch 214 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 215, iters: 56, time: 0.024, data: 0.001) G_GAN: 5.464 G_L1: 18.265 D_real: 0.066 D_fake: 0.010 \n",
            "(epoch: 215, iters: 156, time: 0.024, data: 0.001) G_GAN: 4.701 G_L1: 17.722 D_real: 0.010 D_fake: 0.035 \n",
            "(epoch: 215, iters: 256, time: 0.224, data: 0.002) G_GAN: 6.245 G_L1: 13.767 D_real: 0.134 D_fake: 0.010 \n",
            "saving the model at the end of epoch 215, iters 63640\n",
            "End of epoch 215 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 216, iters: 60, time: 0.025, data: 0.001) G_GAN: 5.988 G_L1: 28.808 D_real: 0.015 D_fake: 0.010 \n",
            "(epoch: 216, iters: 160, time: 0.024, data: 0.002) G_GAN: 3.578 G_L1: 18.905 D_real: 0.349 D_fake: 0.092 \n",
            "(epoch: 216, iters: 260, time: 0.025, data: 0.001) G_GAN: 4.463 G_L1: 21.340 D_real: 0.058 D_fake: 0.097 \n",
            "End of epoch 216 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 217, iters: 64, time: 0.247, data: 0.001) G_GAN: 2.861 G_L1: 14.447 D_real: 0.364 D_fake: 0.062 \n",
            "(epoch: 217, iters: 164, time: 0.028, data: 0.002) G_GAN: 4.621 G_L1: 26.368 D_real: 0.009 D_fake: 0.106 \n",
            "(epoch: 217, iters: 264, time: 0.026, data: 0.001) G_GAN: 4.330 G_L1: 33.446 D_real: 0.053 D_fake: 0.087 \n",
            "End of epoch 217 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 218, iters: 68, time: 0.025, data: 0.002) G_GAN: 5.020 G_L1: 22.153 D_real: 0.154 D_fake: 0.012 \n",
            "(epoch: 218, iters: 168, time: 0.300, data: 0.001) G_GAN: 5.679 G_L1: 19.881 D_real: 0.069 D_fake: 0.014 \n",
            "(epoch: 218, iters: 268, time: 0.025, data: 0.002) G_GAN: 7.269 G_L1: 18.570 D_real: 0.220 D_fake: 0.003 \n",
            "End of epoch 218 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 219, iters: 72, time: 0.027, data: 0.001) G_GAN: 5.615 G_L1: 15.654 D_real: 0.354 D_fake: 0.005 \n",
            "(epoch: 219, iters: 172, time: 0.024, data: 0.002) G_GAN: 6.669 G_L1: 20.067 D_real: 0.105 D_fake: 1.072 \n",
            "(epoch: 219, iters: 272, time: 0.242, data: 0.002) G_GAN: 3.379 G_L1: 16.166 D_real: 0.183 D_fake: 0.055 \n",
            "End of epoch 219 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 220, iters: 76, time: 0.029, data: 0.002) G_GAN: 4.465 G_L1: 19.614 D_real: 0.626 D_fake: 0.006 \n",
            "(epoch: 220, iters: 176, time: 0.025, data: 0.001) G_GAN: 4.424 G_L1: 14.345 D_real: 0.317 D_fake: 0.004 \n",
            "saving the latest model (epoch 220, total_iters 65000)\n",
            "(epoch: 220, iters: 276, time: 0.024, data: 0.002) G_GAN: 4.708 G_L1: 17.510 D_real: 0.002 D_fake: 0.249 \n",
            "saving the model at the end of epoch 220, iters 65120\n",
            "End of epoch 220 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 221, iters: 80, time: 0.268, data: 0.001) G_GAN: 4.882 G_L1: 21.058 D_real: 0.016 D_fake: 0.026 \n",
            "(epoch: 221, iters: 180, time: 0.028, data: 0.002) G_GAN: 8.929 G_L1: 18.391 D_real: 0.195 D_fake: 0.001 \n",
            "(epoch: 221, iters: 280, time: 0.039, data: 0.001) G_GAN: 4.938 G_L1: 20.990 D_real: 0.023 D_fake: 0.061 \n",
            "End of epoch 221 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 222, iters: 84, time: 0.027, data: 0.001) G_GAN: 11.251 G_L1: 17.347 D_real: 0.003 D_fake: 1.882 \n",
            "(epoch: 222, iters: 184, time: 0.239, data: 0.001) G_GAN: 7.463 G_L1: 18.618 D_real: 0.291 D_fake: 0.002 \n",
            "(epoch: 222, iters: 284, time: 0.029, data: 0.002) G_GAN: 3.816 G_L1: 21.012 D_real: 0.850 D_fake: 0.003 \n",
            "End of epoch 222 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 223, iters: 88, time: 0.024, data: 0.001) G_GAN: 3.971 G_L1: 14.751 D_real: 0.066 D_fake: 0.093 \n",
            "(epoch: 223, iters: 188, time: 0.025, data: 0.001) G_GAN: 3.289 G_L1: 15.414 D_real: 0.167 D_fake: 0.041 \n",
            "(epoch: 223, iters: 288, time: 0.302, data: 0.001) G_GAN: 3.969 G_L1: 18.835 D_real: 0.748 D_fake: 0.019 \n",
            "End of epoch 223 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 224, iters: 92, time: 0.025, data: 0.002) G_GAN: 5.785 G_L1: 14.322 D_real: 0.056 D_fake: 0.505 \n",
            "(epoch: 224, iters: 192, time: 0.027, data: 0.001) G_GAN: 5.183 G_L1: 23.435 D_real: 0.006 D_fake: 0.012 \n",
            "(epoch: 224, iters: 292, time: 0.024, data: 0.002) G_GAN: 4.965 G_L1: 21.597 D_real: 0.007 D_fake: 0.031 \n",
            "End of epoch 224 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 225, iters: 96, time: 0.247, data: 0.001) G_GAN: 5.526 G_L1: 16.063 D_real: 0.037 D_fake: 0.037 \n",
            "(epoch: 225, iters: 196, time: 0.025, data: 0.001) G_GAN: 10.093 G_L1: 24.882 D_real: 0.010 D_fake: 1.447 \n",
            "(epoch: 225, iters: 296, time: 0.022, data: 0.002) G_GAN: 6.518 G_L1: 14.866 D_real: 0.101 D_fake: 0.808 \n",
            "saving the model at the end of epoch 225, iters 66600\n",
            "End of epoch 225 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 226, iters: 100, time: 0.031, data: 0.120) G_GAN: 8.577 G_L1: 16.858 D_real: 0.013 D_fake: 0.001 \n",
            "(epoch: 226, iters: 200, time: 0.241, data: 0.002) G_GAN: 9.399 G_L1: 17.097 D_real: 0.048 D_fake: 0.000 \n",
            "End of epoch 226 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 227, iters: 4, time: 0.030, data: 0.002) G_GAN: 9.609 G_L1: 21.865 D_real: 0.004 D_fake: 1.196 \n",
            "(epoch: 227, iters: 104, time: 0.023, data: 0.000) G_GAN: 5.979 G_L1: 25.151 D_real: 0.513 D_fake: 0.010 \n",
            "(epoch: 227, iters: 204, time: 0.026, data: 0.001) G_GAN: 4.676 G_L1: 24.967 D_real: 0.028 D_fake: 0.145 \n",
            "End of epoch 227 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 228, iters: 8, time: 0.311, data: 0.002) G_GAN: 4.178 G_L1: 16.800 D_real: 0.370 D_fake: 0.338 \n",
            "(epoch: 228, iters: 108, time: 0.025, data: 0.000) G_GAN: 5.891 G_L1: 19.916 D_real: 0.047 D_fake: 0.081 \n",
            "(epoch: 228, iters: 208, time: 0.024, data: 0.001) G_GAN: 5.606 G_L1: 24.547 D_real: 0.009 D_fake: 0.110 \n",
            "End of epoch 228 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 229, iters: 12, time: 0.024, data: 0.002) G_GAN: 6.629 G_L1: 18.460 D_real: 0.093 D_fake: 0.003 \n",
            "(epoch: 229, iters: 112, time: 0.381, data: 0.001) G_GAN: 2.738 G_L1: 21.178 D_real: 0.570 D_fake: 0.229 \n",
            "(epoch: 229, iters: 212, time: 0.026, data: 0.002) G_GAN: 4.497 G_L1: 16.590 D_real: 0.189 D_fake: 0.182 \n",
            "End of epoch 229 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 230, iters: 16, time: 0.024, data: 0.001) G_GAN: 9.572 G_L1: 19.111 D_real: 0.093 D_fake: 0.000 \n",
            "(epoch: 230, iters: 116, time: 0.025, data: 0.001) G_GAN: 5.485 G_L1: 22.133 D_real: 0.017 D_fake: 0.207 \n",
            "(epoch: 230, iters: 216, time: 0.237, data: 0.001) G_GAN: 6.828 G_L1: 20.007 D_real: 0.001 D_fake: 0.355 \n",
            "saving the model at the end of epoch 230, iters 68080\n",
            "End of epoch 230 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 231, iters: 20, time: 0.028, data: 0.001) G_GAN: 5.619 G_L1: 18.533 D_real: 0.075 D_fake: 0.014 \n",
            "(epoch: 231, iters: 120, time: 0.026, data: 0.001) G_GAN: 5.179 G_L1: 18.563 D_real: 0.031 D_fake: 0.343 \n",
            "(epoch: 231, iters: 220, time: 0.023, data: 0.001) G_GAN: 5.211 G_L1: 17.726 D_real: 0.019 D_fake: 0.131 \n",
            "End of epoch 231 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 232, iters: 24, time: 0.333, data: 0.001) G_GAN: 3.104 G_L1: 22.534 D_real: 0.526 D_fake: 0.016 \n",
            "(epoch: 232, iters: 124, time: 0.027, data: 0.001) G_GAN: 4.572 G_L1: 19.417 D_real: 0.001 D_fake: 0.024 \n",
            "(epoch: 232, iters: 224, time: 0.026, data: 0.002) G_GAN: 4.321 G_L1: 19.741 D_real: 0.008 D_fake: 0.103 \n",
            "End of epoch 232 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 233, iters: 28, time: 0.029, data: 0.001) G_GAN: 8.537 G_L1: 20.312 D_real: 0.002 D_fake: 1.692 \n",
            "(epoch: 233, iters: 128, time: 0.241, data: 0.001) G_GAN: 5.897 G_L1: 15.849 D_real: 1.220 D_fake: 0.002 \n",
            "(epoch: 233, iters: 228, time: 0.029, data: 0.001) G_GAN: 5.494 G_L1: 22.640 D_real: 0.015 D_fake: 0.182 \n",
            "End of epoch 233 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 234, iters: 32, time: 0.025, data: 0.001) G_GAN: 10.684 G_L1: 16.607 D_real: 0.001 D_fake: 2.397 \n",
            "(epoch: 234, iters: 132, time: 0.032, data: 0.001) G_GAN: 6.355 G_L1: 19.668 D_real: 0.016 D_fake: 0.850 \n",
            "(epoch: 234, iters: 232, time: 0.242, data: 0.001) G_GAN: 5.191 G_L1: 19.946 D_real: 0.002 D_fake: 0.214 \n",
            "End of epoch 234 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 235, iters: 36, time: 0.025, data: 0.001) G_GAN: 7.358 G_L1: 26.555 D_real: 0.013 D_fake: 0.004 \n",
            "(epoch: 235, iters: 136, time: 0.030, data: 0.001) G_GAN: 10.080 G_L1: 21.114 D_real: 0.107 D_fake: 0.000 \n",
            "(epoch: 235, iters: 236, time: 0.024, data: 0.001) G_GAN: 4.692 G_L1: 16.240 D_real: 0.031 D_fake: 0.440 \n",
            "saving the model at the end of epoch 235, iters 69560\n",
            "End of epoch 235 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 236, iters: 40, time: 0.283, data: 0.001) G_GAN: 4.268 G_L1: 20.177 D_real: 0.059 D_fake: 0.065 \n",
            "(epoch: 236, iters: 140, time: 0.024, data: 0.002) G_GAN: 5.850 G_L1: 21.551 D_real: 0.001 D_fake: 0.467 \n",
            "(epoch: 236, iters: 240, time: 0.024, data: 0.002) G_GAN: 5.764 G_L1: 19.788 D_real: 0.005 D_fake: 0.011 \n",
            "End of epoch 236 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 237, iters: 44, time: 0.031, data: 0.002) G_GAN: 5.879 G_L1: 15.117 D_real: 0.061 D_fake: 0.041 \n",
            "(epoch: 237, iters: 144, time: 0.317, data: 0.001) G_GAN: 4.860 G_L1: 20.060 D_real: 0.949 D_fake: 0.010 \n",
            "saving the latest model (epoch 237, total_iters 70000)\n",
            "(epoch: 237, iters: 244, time: 0.024, data: 0.002) G_GAN: 3.633 G_L1: 21.091 D_real: 0.049 D_fake: 0.148 \n",
            "End of epoch 237 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 238, iters: 48, time: 0.024, data: 0.001) G_GAN: 3.449 G_L1: 15.266 D_real: 0.124 D_fake: 0.022 \n",
            "(epoch: 238, iters: 148, time: 0.025, data: 0.001) G_GAN: 5.006 G_L1: 16.952 D_real: 0.026 D_fake: 0.409 \n",
            "(epoch: 238, iters: 248, time: 0.249, data: 0.001) G_GAN: 5.072 G_L1: 20.994 D_real: 0.001 D_fake: 0.044 \n",
            "End of epoch 238 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 239, iters: 52, time: 0.033, data: 0.001) G_GAN: 7.958 G_L1: 18.521 D_real: 0.002 D_fake: 0.009 \n",
            "(epoch: 239, iters: 152, time: 0.030, data: 0.002) G_GAN: 4.653 G_L1: 15.492 D_real: 0.016 D_fake: 0.232 \n",
            "(epoch: 239, iters: 252, time: 0.032, data: 0.002) G_GAN: 11.516 G_L1: 14.416 D_real: 0.102 D_fake: 2.054 \n",
            "End of epoch 239 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 240, iters: 56, time: 0.250, data: 0.002) G_GAN: 6.792 G_L1: 19.309 D_real: 0.014 D_fake: 0.028 \n",
            "(epoch: 240, iters: 156, time: 0.024, data: 0.002) G_GAN: 7.797 G_L1: 23.396 D_real: 0.010 D_fake: 0.007 \n",
            "(epoch: 240, iters: 256, time: 0.024, data: 0.002) G_GAN: 3.926 G_L1: 16.909 D_real: 0.154 D_fake: 0.130 \n",
            "saving the model at the end of epoch 240, iters 71040\n",
            "End of epoch 240 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 241, iters: 60, time: 0.025, data: 0.001) G_GAN: 5.090 G_L1: 18.630 D_real: 0.071 D_fake: 0.012 \n",
            "(epoch: 241, iters: 160, time: 0.304, data: 0.001) G_GAN: 4.837 G_L1: 20.902 D_real: 0.099 D_fake: 0.042 \n",
            "(epoch: 241, iters: 260, time: 0.024, data: 0.002) G_GAN: 3.887 G_L1: 12.532 D_real: 0.158 D_fake: 0.080 \n",
            "End of epoch 241 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 242, iters: 64, time: 0.025, data: 0.001) G_GAN: 4.100 G_L1: 17.157 D_real: 0.001 D_fake: 0.269 \n",
            "(epoch: 242, iters: 164, time: 0.023, data: 0.001) G_GAN: 8.169 G_L1: 24.269 D_real: 0.031 D_fake: 0.003 \n",
            "(epoch: 242, iters: 264, time: 0.248, data: 0.001) G_GAN: 3.881 G_L1: 16.059 D_real: 0.677 D_fake: 0.047 \n",
            "End of epoch 242 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 243, iters: 68, time: 0.025, data: 0.002) G_GAN: 5.505 G_L1: 31.954 D_real: 0.136 D_fake: 0.009 \n",
            "(epoch: 243, iters: 168, time: 0.026, data: 0.001) G_GAN: 5.623 G_L1: 17.811 D_real: 0.007 D_fake: 0.083 \n",
            "(epoch: 243, iters: 268, time: 0.024, data: 0.001) G_GAN: 5.110 G_L1: 23.466 D_real: 0.125 D_fake: 0.024 \n",
            "End of epoch 243 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 244, iters: 72, time: 0.280, data: 0.002) G_GAN: 5.809 G_L1: 18.464 D_real: 0.013 D_fake: 0.010 \n",
            "(epoch: 244, iters: 172, time: 0.028, data: 0.003) G_GAN: 9.068 G_L1: 15.248 D_real: 0.065 D_fake: 1.749 \n",
            "(epoch: 244, iters: 272, time: 0.028, data: 0.001) G_GAN: 4.425 G_L1: 18.742 D_real: 0.273 D_fake: 0.020 \n",
            "End of epoch 244 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 245, iters: 76, time: 0.025, data: 0.001) G_GAN: 4.904 G_L1: 17.324 D_real: 0.035 D_fake: 0.230 \n",
            "(epoch: 245, iters: 176, time: 0.334, data: 0.001) G_GAN: 5.771 G_L1: 19.410 D_real: 0.071 D_fake: 0.466 \n",
            "(epoch: 245, iters: 276, time: 0.025, data: 0.001) G_GAN: 5.491 G_L1: 20.394 D_real: 0.000 D_fake: 0.027 \n",
            "saving the model at the end of epoch 245, iters 72520\n",
            "End of epoch 245 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 246, iters: 80, time: 0.024, data: 0.001) G_GAN: 8.834 G_L1: 17.302 D_real: 0.620 D_fake: 0.000 \n",
            "(epoch: 246, iters: 180, time: 0.026, data: 0.001) G_GAN: 6.228 G_L1: 14.151 D_real: 0.349 D_fake: 0.002 \n",
            "(epoch: 246, iters: 280, time: 0.287, data: 0.001) G_GAN: 5.341 G_L1: 14.573 D_real: 0.061 D_fake: 0.010 \n",
            "End of epoch 246 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 247, iters: 84, time: 0.031, data: 0.002) G_GAN: 5.877 G_L1: 16.338 D_real: 0.013 D_fake: 0.427 \n",
            "(epoch: 247, iters: 184, time: 0.034, data: 0.002) G_GAN: 5.845 G_L1: 13.540 D_real: 0.173 D_fake: 0.005 \n",
            "(epoch: 247, iters: 284, time: 0.026, data: 0.002) G_GAN: 4.455 G_L1: 17.662 D_real: 0.010 D_fake: 0.181 \n",
            "End of epoch 247 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 248, iters: 88, time: 0.260, data: 0.001) G_GAN: 4.402 G_L1: 15.485 D_real: 0.010 D_fake: 0.242 \n",
            "(epoch: 248, iters: 188, time: 0.032, data: 0.001) G_GAN: 5.193 G_L1: 16.084 D_real: 0.017 D_fake: 0.026 \n",
            "(epoch: 248, iters: 288, time: 0.023, data: 0.002) G_GAN: 4.836 G_L1: 18.594 D_real: 0.006 D_fake: 0.215 \n",
            "End of epoch 248 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 249, iters: 92, time: 0.030, data: 0.001) G_GAN: 4.152 G_L1: 18.702 D_real: 0.036 D_fake: 0.188 \n",
            "(epoch: 249, iters: 192, time: 0.453, data: 0.002) G_GAN: 3.572 G_L1: 23.362 D_real: 0.080 D_fake: 0.043 \n",
            "(epoch: 249, iters: 292, time: 0.023, data: 0.001) G_GAN: 1.452 G_L1: 14.754 D_real: 2.190 D_fake: 0.020 \n",
            "End of epoch 249 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 250, iters: 96, time: 0.025, data: 0.002) G_GAN: 3.438 G_L1: 14.964 D_real: 0.124 D_fake: 0.231 \n",
            "(epoch: 250, iters: 196, time: 0.025, data: 0.001) G_GAN: 4.569 G_L1: 22.390 D_real: 0.013 D_fake: 0.222 \n",
            "(epoch: 250, iters: 296, time: 0.271, data: 0.001) G_GAN: 7.278 G_L1: 22.999 D_real: 0.007 D_fake: 0.004 \n",
            "saving the model at the end of epoch 250, iters 74000\n",
            "End of epoch 250 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 251, iters: 100, time: 0.030, data: 0.129) G_GAN: 5.085 G_L1: 16.680 D_real: 0.027 D_fake: 0.289 \n",
            "(epoch: 251, iters: 200, time: 0.025, data: 0.002) G_GAN: 9.148 G_L1: 25.403 D_real: 0.013 D_fake: 0.001 \n",
            "End of epoch 251 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 252, iters: 4, time: 0.039, data: 0.001) G_GAN: 4.153 G_L1: 20.055 D_real: 0.044 D_fake: 0.116 \n",
            "(epoch: 252, iters: 104, time: 0.282, data: 0.003) G_GAN: 7.103 G_L1: 23.416 D_real: 0.043 D_fake: 0.004 \n",
            "(epoch: 252, iters: 204, time: 0.024, data: 0.001) G_GAN: 5.191 G_L1: 21.129 D_real: 0.023 D_fake: 0.444 \n",
            "End of epoch 252 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 253, iters: 8, time: 0.024, data: 0.001) G_GAN: 5.214 G_L1: 21.652 D_real: 0.002 D_fake: 0.224 \n",
            "(epoch: 253, iters: 108, time: 0.026, data: 0.000) G_GAN: 6.479 G_L1: 15.845 D_real: 0.009 D_fake: 0.007 \n",
            "(epoch: 253, iters: 208, time: 0.334, data: 0.001) G_GAN: 3.965 G_L1: 14.031 D_real: 0.220 D_fake: 0.152 \n",
            "End of epoch 253 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 254, iters: 12, time: 0.024, data: 0.002) G_GAN: 4.760 G_L1: 16.293 D_real: 0.091 D_fake: 0.025 \n",
            "(epoch: 254, iters: 112, time: 0.024, data: 0.001) G_GAN: 9.270 G_L1: 29.543 D_real: 0.002 D_fake: 0.001 \n",
            "saving the latest model (epoch 254, total_iters 75000)\n",
            "(epoch: 254, iters: 212, time: 0.023, data: 0.001) G_GAN: 3.133 G_L1: 16.719 D_real: 0.338 D_fake: 0.038 \n",
            "End of epoch 254 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 255, iters: 16, time: 0.310, data: 0.002) G_GAN: 5.216 G_L1: 31.942 D_real: 0.621 D_fake: 0.004 \n",
            "(epoch: 255, iters: 116, time: 0.026, data: 0.002) G_GAN: 7.208 G_L1: 32.327 D_real: 0.001 D_fake: 0.003 \n",
            "(epoch: 255, iters: 216, time: 0.030, data: 0.001) G_GAN: 7.002 G_L1: 17.815 D_real: 0.001 D_fake: 0.912 \n",
            "saving the model at the end of epoch 255, iters 75480\n",
            "End of epoch 255 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 256, iters: 20, time: 0.028, data: 0.002) G_GAN: 3.263 G_L1: 17.216 D_real: 0.387 D_fake: 0.033 \n",
            "(epoch: 256, iters: 120, time: 0.262, data: 0.001) G_GAN: 4.887 G_L1: 18.266 D_real: 0.035 D_fake: 0.073 \n",
            "(epoch: 256, iters: 220, time: 0.024, data: 0.002) G_GAN: 4.437 G_L1: 17.477 D_real: 0.910 D_fake: 0.004 \n",
            "End of epoch 256 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 257, iters: 24, time: 0.026, data: 0.001) G_GAN: 4.675 G_L1: 21.945 D_real: 0.022 D_fake: 0.163 \n",
            "(epoch: 257, iters: 124, time: 0.025, data: 0.002) G_GAN: 2.169 G_L1: 17.689 D_real: 0.212 D_fake: 0.130 \n",
            "(epoch: 257, iters: 224, time: 0.341, data: 0.002) G_GAN: 8.264 G_L1: 22.469 D_real: 0.029 D_fake: 0.001 \n",
            "End of epoch 257 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 258, iters: 28, time: 0.029, data: 0.002) G_GAN: 3.839 G_L1: 14.644 D_real: 0.113 D_fake: 0.068 \n",
            "(epoch: 258, iters: 128, time: 0.023, data: 0.002) G_GAN: 4.396 G_L1: 18.999 D_real: 0.001 D_fake: 0.239 \n",
            "(epoch: 258, iters: 228, time: 0.026, data: 0.002) G_GAN: 6.824 G_L1: 16.406 D_real: 0.093 D_fake: 0.002 \n",
            "End of epoch 258 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 259, iters: 32, time: 0.271, data: 0.001) G_GAN: 7.490 G_L1: 17.642 D_real: 0.002 D_fake: 1.035 \n",
            "(epoch: 259, iters: 132, time: 0.023, data: 0.001) G_GAN: 5.723 G_L1: 24.621 D_real: 0.002 D_fake: 0.053 \n",
            "(epoch: 259, iters: 232, time: 0.024, data: 0.001) G_GAN: 6.808 G_L1: 19.403 D_real: 0.072 D_fake: 0.008 \n",
            "End of epoch 259 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 260, iters: 36, time: 0.026, data: 0.002) G_GAN: 5.997 G_L1: 18.387 D_real: 0.096 D_fake: 0.018 \n",
            "(epoch: 260, iters: 136, time: 0.267, data: 0.001) G_GAN: 5.562 G_L1: 20.085 D_real: 0.031 D_fake: 0.031 \n",
            "(epoch: 260, iters: 236, time: 0.025, data: 0.001) G_GAN: 4.374 G_L1: 14.410 D_real: 0.113 D_fake: 0.068 \n",
            "saving the model at the end of epoch 260, iters 76960\n",
            "End of epoch 260 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 261, iters: 40, time: 0.024, data: 0.001) G_GAN: 4.809 G_L1: 19.679 D_real: 0.068 D_fake: 0.038 \n",
            "(epoch: 261, iters: 140, time: 0.024, data: 0.002) G_GAN: 3.703 G_L1: 18.474 D_real: 0.061 D_fake: 0.032 \n",
            "(epoch: 261, iters: 240, time: 0.311, data: 0.001) G_GAN: 4.388 G_L1: 18.888 D_real: 0.058 D_fake: 0.031 \n",
            "End of epoch 261 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 262, iters: 44, time: 0.023, data: 0.001) G_GAN: 4.088 G_L1: 17.271 D_real: 0.003 D_fake: 0.091 \n",
            "(epoch: 262, iters: 144, time: 0.024, data: 0.001) G_GAN: 10.017 G_L1: 23.073 D_real: 0.000 D_fake: 1.389 \n",
            "(epoch: 262, iters: 244, time: 0.023, data: 0.001) G_GAN: 5.068 G_L1: 19.452 D_real: 0.013 D_fake: 0.032 \n",
            "End of epoch 262 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 263, iters: 48, time: 0.283, data: 0.001) G_GAN: 4.473 G_L1: 13.553 D_real: 0.051 D_fake: 0.055 \n",
            "(epoch: 263, iters: 148, time: 0.026, data: 0.001) G_GAN: 6.560 G_L1: 15.497 D_real: 0.110 D_fake: 0.044 \n",
            "(epoch: 263, iters: 248, time: 0.024, data: 0.001) G_GAN: 4.604 G_L1: 18.104 D_real: 0.015 D_fake: 0.040 \n",
            "End of epoch 263 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 264, iters: 52, time: 0.023, data: 0.001) G_GAN: 6.382 G_L1: 20.582 D_real: 0.006 D_fake: 0.004 \n",
            "(epoch: 264, iters: 152, time: 0.325, data: 0.001) G_GAN: 5.441 G_L1: 17.410 D_real: 0.046 D_fake: 0.019 \n",
            "(epoch: 264, iters: 252, time: 0.024, data: 0.002) G_GAN: 5.387 G_L1: 15.923 D_real: 0.036 D_fake: 0.439 \n",
            "End of epoch 264 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 265, iters: 56, time: 0.023, data: 0.001) G_GAN: 5.033 G_L1: 17.994 D_real: 0.093 D_fake: 0.074 \n",
            "(epoch: 265, iters: 156, time: 0.033, data: 0.001) G_GAN: 7.796 G_L1: 17.187 D_real: 0.093 D_fake: 0.001 \n",
            "(epoch: 265, iters: 256, time: 0.264, data: 0.001) G_GAN: 8.059 G_L1: 14.931 D_real: 0.017 D_fake: 0.856 \n",
            "saving the model at the end of epoch 265, iters 78440\n",
            "End of epoch 265 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 266, iters: 60, time: 0.023, data: 0.001) G_GAN: 7.173 G_L1: 21.493 D_real: 0.020 D_fake: 0.004 \n",
            "(epoch: 266, iters: 160, time: 0.023, data: 0.001) G_GAN: 6.624 G_L1: 35.727 D_real: 0.003 D_fake: 0.089 \n",
            "(epoch: 266, iters: 260, time: 0.024, data: 0.001) G_GAN: 4.777 G_L1: 19.443 D_real: 0.157 D_fake: 0.018 \n",
            "End of epoch 266 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 267, iters: 64, time: 0.269, data: 0.002) G_GAN: 6.115 G_L1: 15.099 D_real: 0.107 D_fake: 0.005 \n",
            "(epoch: 267, iters: 164, time: 0.023, data: 0.002) G_GAN: 4.122 G_L1: 16.842 D_real: 1.198 D_fake: 0.009 \n",
            "(epoch: 267, iters: 264, time: 0.029, data: 0.001) G_GAN: 5.888 G_L1: 16.957 D_real: 0.025 D_fake: 0.018 \n",
            "End of epoch 267 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 268, iters: 68, time: 0.024, data: 0.001) G_GAN: 6.641 G_L1: 17.275 D_real: 0.059 D_fake: 0.479 \n",
            "(epoch: 268, iters: 168, time: 0.318, data: 0.001) G_GAN: 5.881 G_L1: 17.653 D_real: 0.061 D_fake: 0.028 \n",
            "(epoch: 268, iters: 268, time: 0.026, data: 0.002) G_GAN: 3.492 G_L1: 16.278 D_real: 0.159 D_fake: 0.141 \n",
            "End of epoch 268 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 269, iters: 72, time: 0.024, data: 0.001) G_GAN: 4.858 G_L1: 19.430 D_real: 0.073 D_fake: 0.219 \n",
            "(epoch: 269, iters: 172, time: 0.023, data: 0.001) G_GAN: 3.455 G_L1: 14.882 D_real: 0.725 D_fake: 0.129 \n",
            "(epoch: 269, iters: 272, time: 0.302, data: 0.001) G_GAN: 5.034 G_L1: 21.861 D_real: 0.003 D_fake: 0.688 \n",
            "End of epoch 269 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 270, iters: 76, time: 0.023, data: 0.002) G_GAN: 4.588 G_L1: 22.684 D_real: 0.246 D_fake: 0.028 \n",
            "(epoch: 270, iters: 176, time: 0.024, data: 0.001) G_GAN: 5.683 G_L1: 16.650 D_real: 0.472 D_fake: 0.001 \n",
            "(epoch: 270, iters: 276, time: 0.023, data: 0.001) G_GAN: 5.602 G_L1: 21.661 D_real: 0.036 D_fake: 0.306 \n",
            "saving the model at the end of epoch 270, iters 79920\n",
            "End of epoch 270 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 271, iters: 80, time: 0.289, data: 0.001) G_GAN: 4.542 G_L1: 18.777 D_real: 0.005 D_fake: 0.085 \n",
            "saving the latest model (epoch 271, total_iters 80000)\n",
            "(epoch: 271, iters: 180, time: 0.024, data: 0.001) G_GAN: 4.982 G_L1: 20.184 D_real: 0.300 D_fake: 0.007 \n",
            "(epoch: 271, iters: 280, time: 0.024, data: 0.001) G_GAN: 5.046 G_L1: 16.909 D_real: 0.115 D_fake: 0.527 \n",
            "End of epoch 271 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 272, iters: 84, time: 0.023, data: 0.002) G_GAN: 5.445 G_L1: 15.202 D_real: 0.034 D_fake: 0.739 \n",
            "(epoch: 272, iters: 184, time: 0.323, data: 0.001) G_GAN: 4.280 G_L1: 18.354 D_real: 0.020 D_fake: 0.094 \n",
            "(epoch: 272, iters: 284, time: 0.024, data: 0.001) G_GAN: 6.237 G_L1: 16.536 D_real: 0.424 D_fake: 0.003 \n",
            "End of epoch 272 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 273, iters: 88, time: 0.023, data: 0.001) G_GAN: 6.051 G_L1: 23.609 D_real: 0.026 D_fake: 0.062 \n",
            "(epoch: 273, iters: 188, time: 0.024, data: 0.001) G_GAN: 5.948 G_L1: 18.930 D_real: 0.020 D_fake: 0.031 \n",
            "(epoch: 273, iters: 288, time: 0.266, data: 0.001) G_GAN: 7.904 G_L1: 16.599 D_real: 0.080 D_fake: 0.001 \n",
            "End of epoch 273 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 274, iters: 92, time: 0.024, data: 0.001) G_GAN: 10.172 G_L1: 18.320 D_real: 0.004 D_fake: 0.970 \n",
            "(epoch: 274, iters: 192, time: 0.030, data: 0.001) G_GAN: 5.530 G_L1: 18.299 D_real: 0.003 D_fake: 0.057 \n",
            "(epoch: 274, iters: 292, time: 0.022, data: 0.001) G_GAN: 5.083 G_L1: 18.836 D_real: 0.003 D_fake: 0.072 \n",
            "End of epoch 274 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 275, iters: 96, time: 0.418, data: 0.001) G_GAN: 6.059 G_L1: 16.555 D_real: 0.094 D_fake: 0.010 \n",
            "(epoch: 275, iters: 196, time: 0.024, data: 0.001) G_GAN: 6.236 G_L1: 22.725 D_real: 0.015 D_fake: 0.006 \n",
            "(epoch: 275, iters: 296, time: 0.023, data: 0.001) G_GAN: 4.789 G_L1: 18.942 D_real: 0.363 D_fake: 0.136 \n",
            "saving the model at the end of epoch 275, iters 81400\n",
            "End of epoch 275 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 276, iters: 100, time: 0.030, data: 0.130) G_GAN: 4.829 G_L1: 16.170 D_real: 0.004 D_fake: 0.060 \n",
            "(epoch: 276, iters: 200, time: 0.703, data: 0.001) G_GAN: 7.506 G_L1: 21.713 D_real: 0.467 D_fake: 0.001 \n",
            "End of epoch 276 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 277, iters: 4, time: 0.024, data: 0.002) G_GAN: 5.191 G_L1: 16.212 D_real: 0.014 D_fake: 0.328 \n",
            "(epoch: 277, iters: 104, time: 0.028, data: 0.000) G_GAN: 5.629 G_L1: 19.176 D_real: 0.018 D_fake: 0.566 \n",
            "(epoch: 277, iters: 204, time: 0.025, data: 0.001) G_GAN: 7.571 G_L1: 18.902 D_real: 0.759 D_fake: 0.003 \n",
            "End of epoch 277 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 278, iters: 8, time: 0.291, data: 0.002) G_GAN: 4.501 G_L1: 15.606 D_real: 0.047 D_fake: 0.042 \n",
            "(epoch: 278, iters: 108, time: 0.029, data: 0.001) G_GAN: 4.493 G_L1: 19.722 D_real: 0.813 D_fake: 0.003 \n",
            "(epoch: 278, iters: 208, time: 0.023, data: 0.001) G_GAN: 5.054 G_L1: 17.303 D_real: 0.003 D_fake: 0.075 \n",
            "End of epoch 278 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 279, iters: 12, time: 0.023, data: 0.001) G_GAN: 5.717 G_L1: 16.858 D_real: 0.009 D_fake: 0.027 \n",
            "(epoch: 279, iters: 112, time: 0.348, data: 0.001) G_GAN: 5.370 G_L1: 17.641 D_real: 0.049 D_fake: 0.011 \n",
            "(epoch: 279, iters: 212, time: 0.024, data: 0.002) G_GAN: 6.046 G_L1: 16.970 D_real: 0.124 D_fake: 0.003 \n",
            "End of epoch 279 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 280, iters: 16, time: 0.029, data: 0.001) G_GAN: 4.380 G_L1: 18.049 D_real: 0.081 D_fake: 0.109 \n",
            "(epoch: 280, iters: 116, time: 0.032, data: 0.001) G_GAN: 6.910 G_L1: 19.746 D_real: 0.000 D_fake: 0.002 \n",
            "(epoch: 280, iters: 216, time: 0.305, data: 0.002) G_GAN: 4.902 G_L1: 16.095 D_real: 0.123 D_fake: 0.038 \n",
            "saving the model at the end of epoch 280, iters 82880\n",
            "End of epoch 280 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 281, iters: 20, time: 0.023, data: 0.002) G_GAN: 5.688 G_L1: 17.966 D_real: 0.001 D_fake: 0.772 \n",
            "(epoch: 281, iters: 120, time: 0.033, data: 0.001) G_GAN: 8.556 G_L1: 17.021 D_real: 0.006 D_fake: 0.002 \n",
            "(epoch: 281, iters: 220, time: 0.023, data: 0.001) G_GAN: 4.025 G_L1: 19.229 D_real: 0.158 D_fake: 0.098 \n",
            "End of epoch 281 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 282, iters: 24, time: 0.312, data: 0.001) G_GAN: 2.451 G_L1: 19.687 D_real: 0.712 D_fake: 0.049 \n",
            "(epoch: 282, iters: 124, time: 0.023, data: 0.001) G_GAN: 5.588 G_L1: 17.574 D_real: 0.009 D_fake: 0.036 \n",
            "(epoch: 282, iters: 224, time: 0.023, data: 0.001) G_GAN: 8.075 G_L1: 15.645 D_real: 0.102 D_fake: 0.597 \n",
            "End of epoch 282 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 283, iters: 28, time: 0.023, data: 0.001) G_GAN: 5.759 G_L1: 20.484 D_real: 0.175 D_fake: 0.014 \n",
            "(epoch: 283, iters: 128, time: 0.375, data: 0.001) G_GAN: 5.894 G_L1: 18.359 D_real: 0.058 D_fake: 0.563 \n",
            "(epoch: 283, iters: 228, time: 0.024, data: 0.001) G_GAN: 5.479 G_L1: 22.018 D_real: 0.089 D_fake: 0.179 \n",
            "End of epoch 283 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 284, iters: 32, time: 0.029, data: 0.001) G_GAN: 9.066 G_L1: 19.266 D_real: 0.005 D_fake: 0.982 \n",
            "(epoch: 284, iters: 132, time: 0.034, data: 0.001) G_GAN: 4.501 G_L1: 21.329 D_real: 0.588 D_fake: 0.016 \n",
            "(epoch: 284, iters: 232, time: 0.311, data: 0.001) G_GAN: 4.342 G_L1: 19.423 D_real: 0.026 D_fake: 0.110 \n",
            "End of epoch 284 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 285, iters: 36, time: 0.023, data: 0.002) G_GAN: 5.556 G_L1: 16.456 D_real: 0.030 D_fake: 0.652 \n",
            "(epoch: 285, iters: 136, time: 0.023, data: 0.001) G_GAN: 9.000 G_L1: 20.496 D_real: 0.001 D_fake: 0.001 \n",
            "(epoch: 285, iters: 236, time: 0.024, data: 0.001) G_GAN: 6.844 G_L1: 20.339 D_real: 0.014 D_fake: 0.008 \n",
            "saving the model at the end of epoch 285, iters 84360\n",
            "End of epoch 285 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 286, iters: 40, time: 0.441, data: 0.001) G_GAN: 4.421 G_L1: 17.290 D_real: 0.002 D_fake: 0.082 \n",
            "(epoch: 286, iters: 140, time: 0.024, data: 0.002) G_GAN: 4.219 G_L1: 14.174 D_real: 0.103 D_fake: 0.066 \n",
            "(epoch: 286, iters: 240, time: 0.025, data: 0.001) G_GAN: 5.575 G_L1: 22.260 D_real: 0.026 D_fake: 0.063 \n",
            "End of epoch 286 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 287, iters: 44, time: 0.024, data: 0.001) G_GAN: 6.079 G_L1: 16.111 D_real: 0.233 D_fake: 0.049 \n",
            "(epoch: 287, iters: 144, time: 0.351, data: 0.002) G_GAN: 6.338 G_L1: 16.634 D_real: 0.001 D_fake: 0.807 \n",
            "(epoch: 287, iters: 244, time: 0.023, data: 0.002) G_GAN: 6.095 G_L1: 20.214 D_real: 0.000 D_fake: 0.005 \n",
            "End of epoch 287 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 288, iters: 48, time: 0.024, data: 0.001) G_GAN: 3.840 G_L1: 13.510 D_real: 0.651 D_fake: 0.026 \n",
            "saving the latest model (epoch 288, total_iters 85000)\n",
            "(epoch: 288, iters: 148, time: 0.024, data: 0.002) G_GAN: 3.589 G_L1: 19.649 D_real: 0.352 D_fake: 0.025 \n",
            "(epoch: 288, iters: 248, time: 0.292, data: 0.001) G_GAN: 4.367 G_L1: 18.416 D_real: 0.157 D_fake: 0.034 \n",
            "End of epoch 288 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 289, iters: 52, time: 0.023, data: 0.002) G_GAN: 5.263 G_L1: 15.029 D_real: 0.038 D_fake: 0.065 \n",
            "(epoch: 289, iters: 152, time: 0.024, data: 0.001) G_GAN: 4.761 G_L1: 21.577 D_real: 0.068 D_fake: 0.285 \n",
            "(epoch: 289, iters: 252, time: 0.024, data: 0.001) G_GAN: 7.214 G_L1: 20.670 D_real: 0.039 D_fake: 0.022 \n",
            "End of epoch 289 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 290, iters: 56, time: 0.345, data: 0.001) G_GAN: 4.054 G_L1: 15.729 D_real: 0.086 D_fake: 0.078 \n",
            "(epoch: 290, iters: 156, time: 0.024, data: 0.001) G_GAN: 2.769 G_L1: 15.831 D_real: 0.339 D_fake: 0.139 \n",
            "(epoch: 290, iters: 256, time: 0.025, data: 0.001) G_GAN: 3.769 G_L1: 25.538 D_real: 0.488 D_fake: 0.050 \n",
            "saving the model at the end of epoch 290, iters 85840\n",
            "End of epoch 290 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 291, iters: 60, time: 0.024, data: 0.001) G_GAN: 5.759 G_L1: 14.755 D_real: 0.014 D_fake: 0.017 \n",
            "(epoch: 291, iters: 160, time: 0.300, data: 0.001) G_GAN: 7.730 G_L1: 20.231 D_real: 0.014 D_fake: 0.004 \n",
            "(epoch: 291, iters: 260, time: 0.023, data: 0.001) G_GAN: 5.644 G_L1: 16.210 D_real: 0.031 D_fake: 0.057 \n",
            "End of epoch 291 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 292, iters: 64, time: 0.030, data: 0.001) G_GAN: 7.465 G_L1: 21.697 D_real: 0.084 D_fake: 0.004 \n",
            "(epoch: 292, iters: 164, time: 0.023, data: 0.001) G_GAN: 7.779 G_L1: 21.576 D_real: 0.159 D_fake: 0.002 \n",
            "(epoch: 292, iters: 264, time: 0.287, data: 0.001) G_GAN: 5.656 G_L1: 16.174 D_real: 0.057 D_fake: 0.689 \n",
            "End of epoch 292 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 293, iters: 68, time: 0.023, data: 0.002) G_GAN: 7.840 G_L1: 18.335 D_real: 0.008 D_fake: 0.002 \n",
            "(epoch: 293, iters: 168, time: 0.031, data: 0.001) G_GAN: 7.435 G_L1: 24.707 D_real: 0.000 D_fake: 0.009 \n",
            "(epoch: 293, iters: 268, time: 0.025, data: 0.001) G_GAN: 8.040 G_L1: 19.504 D_real: 0.026 D_fake: 0.001 \n",
            "End of epoch 293 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 294, iters: 72, time: 0.359, data: 0.001) G_GAN: 5.521 G_L1: 18.211 D_real: 0.016 D_fake: 0.020 \n",
            "(epoch: 294, iters: 172, time: 0.025, data: 0.002) G_GAN: 4.327 G_L1: 15.236 D_real: 0.037 D_fake: 0.041 \n",
            "(epoch: 294, iters: 272, time: 0.025, data: 0.001) G_GAN: 5.246 G_L1: 14.904 D_real: 0.056 D_fake: 0.049 \n",
            "End of epoch 294 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 295, iters: 76, time: 0.024, data: 0.002) G_GAN: 5.390 G_L1: 13.963 D_real: 0.024 D_fake: 0.017 \n",
            "(epoch: 295, iters: 176, time: 0.309, data: 0.001) G_GAN: 4.132 G_L1: 21.711 D_real: 0.021 D_fake: 0.066 \n",
            "(epoch: 295, iters: 276, time: 0.031, data: 0.001) G_GAN: 5.426 G_L1: 21.689 D_real: 0.008 D_fake: 0.032 \n",
            "saving the model at the end of epoch 295, iters 87320\n",
            "End of epoch 295 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 296, iters: 80, time: 0.027, data: 0.001) G_GAN: 3.448 G_L1: 20.259 D_real: 0.459 D_fake: 0.023 \n",
            "(epoch: 296, iters: 180, time: 0.023, data: 0.001) G_GAN: 9.513 G_L1: 26.624 D_real: 0.034 D_fake: 0.001 \n",
            "(epoch: 296, iters: 280, time: 0.440, data: 0.001) G_GAN: 7.040 G_L1: 16.073 D_real: 0.565 D_fake: 0.003 \n",
            "End of epoch 296 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 297, iters: 84, time: 0.030, data: 0.001) G_GAN: 11.260 G_L1: 29.517 D_real: 0.002 D_fake: 0.000 \n",
            "(epoch: 297, iters: 184, time: 0.024, data: 0.001) G_GAN: 6.968 G_L1: 24.902 D_real: 0.242 D_fake: 0.010 \n",
            "(epoch: 297, iters: 284, time: 0.023, data: 0.001) G_GAN: 3.586 G_L1: 18.180 D_real: 0.281 D_fake: 0.036 \n",
            "End of epoch 297 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 298, iters: 88, time: 0.315, data: 0.001) G_GAN: 6.700 G_L1: 15.698 D_real: 0.000 D_fake: 0.956 \n",
            "(epoch: 298, iters: 188, time: 0.025, data: 0.001) G_GAN: 5.039 G_L1: 15.308 D_real: 0.039 D_fake: 0.207 \n",
            "(epoch: 298, iters: 288, time: 0.024, data: 0.001) G_GAN: 5.228 G_L1: 17.362 D_real: 0.048 D_fake: 0.015 \n",
            "End of epoch 298 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 299, iters: 92, time: 0.023, data: 0.001) G_GAN: 4.095 G_L1: 15.944 D_real: 0.049 D_fake: 0.066 \n",
            "(epoch: 299, iters: 192, time: 0.290, data: 0.001) G_GAN: 5.786 G_L1: 18.911 D_real: 0.003 D_fake: 0.040 \n",
            "(epoch: 299, iters: 292, time: 0.023, data: 0.002) G_GAN: 7.004 G_L1: 17.130 D_real: 0.104 D_fake: 0.004 \n",
            "End of epoch 299 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0002000\n",
            "(epoch: 300, iters: 96, time: 0.023, data: 0.001) G_GAN: 7.327 G_L1: 15.970 D_real: 0.026 D_fake: 0.830 \n",
            "(epoch: 300, iters: 196, time: 0.024, data: 0.001) G_GAN: 3.835 G_L1: 13.740 D_real: 0.073 D_fake: 0.052 \n",
            "(epoch: 300, iters: 296, time: 0.354, data: 0.001) G_GAN: 5.316 G_L1: 16.545 D_real: 0.017 D_fake: 0.101 \n",
            "saving the model at the end of epoch 300, iters 88800\n",
            "End of epoch 300 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0001993\n",
            "(epoch: 301, iters: 100, time: 0.027, data: 0.110) G_GAN: 4.609 G_L1: 16.003 D_real: 0.033 D_fake: 0.344 \n",
            "(epoch: 301, iters: 200, time: 0.030, data: 0.001) G_GAN: 5.791 G_L1: 17.498 D_real: 0.019 D_fake: 0.538 \n",
            "End of epoch 301 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001987\n",
            "(epoch: 302, iters: 4, time: 0.031, data: 0.001) G_GAN: 2.006 G_L1: 15.551 D_real: 1.036 D_fake: 0.012 \n",
            "(epoch: 302, iters: 104, time: 0.322, data: 0.000) G_GAN: 7.418 G_L1: 18.191 D_real: 0.019 D_fake: 0.004 \n",
            "(epoch: 302, iters: 204, time: 0.024, data: 0.001) G_GAN: 5.610 G_L1: 17.641 D_real: 0.027 D_fake: 0.055 \n",
            "End of epoch 302 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001980\n",
            "(epoch: 303, iters: 8, time: 0.029, data: 0.001) G_GAN: 7.601 G_L1: 16.920 D_real: 0.487 D_fake: 0.001 \n",
            "(epoch: 303, iters: 108, time: 0.024, data: 0.000) G_GAN: 6.023 G_L1: 15.954 D_real: 0.011 D_fake: 0.326 \n",
            "(epoch: 303, iters: 208, time: 0.383, data: 0.001) G_GAN: 4.916 G_L1: 19.694 D_real: 0.225 D_fake: 0.022 \n",
            "End of epoch 303 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001973\n",
            "(epoch: 304, iters: 12, time: 0.029, data: 0.001) G_GAN: 4.084 G_L1: 15.379 D_real: 1.242 D_fake: 0.006 \n",
            "(epoch: 304, iters: 112, time: 0.024, data: 0.001) G_GAN: 9.722 G_L1: 20.433 D_real: 0.002 D_fake: 0.678 \n",
            "(epoch: 304, iters: 212, time: 0.024, data: 0.001) G_GAN: 5.812 G_L1: 18.665 D_real: 0.016 D_fake: 0.029 \n",
            "End of epoch 304 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001967\n",
            "(epoch: 305, iters: 16, time: 0.309, data: 0.001) G_GAN: 5.361 G_L1: 18.023 D_real: 0.263 D_fake: 0.007 \n",
            "saving the latest model (epoch 305, total_iters 90000)\n",
            "(epoch: 305, iters: 116, time: 0.030, data: 0.001) G_GAN: 8.744 G_L1: 26.795 D_real: 0.001 D_fake: 0.002 \n",
            "(epoch: 305, iters: 216, time: 0.024, data: 0.001) G_GAN: 5.425 G_L1: 14.531 D_real: 0.035 D_fake: 0.016 \n",
            "saving the model at the end of epoch 305, iters 90280\n",
            "End of epoch 305 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0001960\n",
            "(epoch: 306, iters: 20, time: 0.034, data: 0.001) G_GAN: 4.650 G_L1: 17.962 D_real: 0.089 D_fake: 0.082 \n",
            "(epoch: 306, iters: 120, time: 0.292, data: 0.002) G_GAN: 5.109 G_L1: 15.219 D_real: 0.524 D_fake: 0.003 \n",
            "(epoch: 306, iters: 220, time: 0.024, data: 0.001) G_GAN: 6.023 G_L1: 21.578 D_real: 0.021 D_fake: 0.276 \n",
            "End of epoch 306 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0001953\n",
            "(epoch: 307, iters: 24, time: 0.029, data: 0.001) G_GAN: 6.399 G_L1: 23.860 D_real: 0.000 D_fake: 0.024 \n",
            "(epoch: 307, iters: 124, time: 0.023, data: 0.001) G_GAN: 6.977 G_L1: 19.344 D_real: 0.064 D_fake: 0.526 \n",
            "(epoch: 307, iters: 224, time: 0.349, data: 0.001) G_GAN: 5.298 G_L1: 22.792 D_real: 0.012 D_fake: 0.093 \n",
            "End of epoch 307 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001947\n",
            "(epoch: 308, iters: 28, time: 0.031, data: 0.001) G_GAN: 7.698 G_L1: 19.330 D_real: 0.082 D_fake: 0.002 \n",
            "(epoch: 308, iters: 128, time: 0.024, data: 0.001) G_GAN: 4.576 G_L1: 16.279 D_real: 0.005 D_fake: 0.027 \n",
            "(epoch: 308, iters: 228, time: 0.023, data: 0.001) G_GAN: 3.411 G_L1: 16.286 D_real: 3.828 D_fake: 0.000 \n",
            "End of epoch 308 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0001940\n",
            "(epoch: 309, iters: 32, time: 0.439, data: 0.001) G_GAN: 6.699 G_L1: 20.232 D_real: 0.036 D_fake: 0.005 \n",
            "(epoch: 309, iters: 132, time: 0.032, data: 0.002) G_GAN: 5.828 G_L1: 16.637 D_real: 0.130 D_fake: 0.022 \n",
            "(epoch: 309, iters: 232, time: 0.031, data: 0.002) G_GAN: 6.687 G_L1: 14.234 D_real: 0.130 D_fake: 0.005 \n",
            "End of epoch 309 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001934\n",
            "(epoch: 310, iters: 36, time: 0.024, data: 0.001) G_GAN: 3.926 G_L1: 17.656 D_real: 0.015 D_fake: 0.068 \n",
            "(epoch: 310, iters: 136, time: 0.348, data: 0.001) G_GAN: 6.357 G_L1: 20.751 D_real: 0.009 D_fake: 0.010 \n",
            "(epoch: 310, iters: 236, time: 0.033, data: 0.001) G_GAN: 8.000 G_L1: 14.090 D_real: 0.000 D_fake: 0.821 \n",
            "saving the model at the end of epoch 310, iters 91760\n",
            "End of epoch 310 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001927\n",
            "(epoch: 311, iters: 40, time: 0.023, data: 0.001) G_GAN: 4.264 G_L1: 16.389 D_real: 0.008 D_fake: 0.113 \n",
            "(epoch: 311, iters: 140, time: 0.024, data: 0.001) G_GAN: 5.049 G_L1: 17.308 D_real: 0.069 D_fake: 0.295 \n",
            "(epoch: 311, iters: 240, time: 0.313, data: 0.002) G_GAN: 5.073 G_L1: 15.683 D_real: 0.012 D_fake: 0.044 \n",
            "End of epoch 311 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001920\n",
            "(epoch: 312, iters: 44, time: 0.023, data: 0.001) G_GAN: 8.484 G_L1: 16.756 D_real: 0.001 D_fake: 1.030 \n",
            "(epoch: 312, iters: 144, time: 0.025, data: 0.001) G_GAN: 4.385 G_L1: 15.417 D_real: 0.142 D_fake: 0.184 \n",
            "(epoch: 312, iters: 244, time: 0.024, data: 0.002) G_GAN: 3.720 G_L1: 18.431 D_real: 0.025 D_fake: 0.030 \n",
            "End of epoch 312 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0001914\n",
            "(epoch: 313, iters: 48, time: 0.304, data: 0.001) G_GAN: 4.139 G_L1: 16.418 D_real: 0.137 D_fake: 0.022 \n",
            "(epoch: 313, iters: 148, time: 0.023, data: 0.002) G_GAN: 8.867 G_L1: 21.108 D_real: 0.011 D_fake: 0.001 \n",
            "(epoch: 313, iters: 248, time: 0.023, data: 0.001) G_GAN: 4.868 G_L1: 19.586 D_real: 0.312 D_fake: 0.099 \n",
            "End of epoch 313 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001907\n",
            "(epoch: 314, iters: 52, time: 0.024, data: 0.001) G_GAN: 5.088 G_L1: 17.078 D_real: 0.004 D_fake: 0.018 \n",
            "(epoch: 314, iters: 152, time: 0.345, data: 0.001) G_GAN: 4.188 G_L1: 17.400 D_real: 0.067 D_fake: 0.063 \n",
            "(epoch: 314, iters: 252, time: 0.024, data: 0.001) G_GAN: 12.243 G_L1: 20.004 D_real: 1.003 D_fake: 0.000 \n",
            "End of epoch 314 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001900\n",
            "(epoch: 315, iters: 56, time: 0.025, data: 0.001) G_GAN: 3.949 G_L1: 17.090 D_real: 0.016 D_fake: 0.062 \n",
            "(epoch: 315, iters: 156, time: 0.023, data: 0.001) G_GAN: 6.724 G_L1: 15.487 D_real: 0.014 D_fake: 0.005 \n",
            "(epoch: 315, iters: 256, time: 0.292, data: 0.001) G_GAN: 5.118 G_L1: 17.928 D_real: 0.004 D_fake: 0.215 \n",
            "saving the model at the end of epoch 315, iters 93240\n",
            "End of epoch 315 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001894\n",
            "(epoch: 316, iters: 60, time: 0.027, data: 0.001) G_GAN: 5.434 G_L1: 22.883 D_real: 0.001 D_fake: 0.052 \n",
            "(epoch: 316, iters: 160, time: 0.024, data: 0.001) G_GAN: 9.668 G_L1: 15.511 D_real: 0.604 D_fake: 0.000 \n",
            "(epoch: 316, iters: 260, time: 0.041, data: 0.001) G_GAN: 5.431 G_L1: 15.422 D_real: 0.020 D_fake: 0.381 \n",
            "End of epoch 316 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001887\n",
            "(epoch: 317, iters: 64, time: 0.383, data: 0.005) G_GAN: 4.636 G_L1: 14.444 D_real: 0.004 D_fake: 0.301 \n",
            "(epoch: 317, iters: 164, time: 0.026, data: 0.002) G_GAN: 3.937 G_L1: 13.463 D_real: 0.041 D_fake: 0.074 \n",
            "(epoch: 317, iters: 264, time: 0.023, data: 0.002) G_GAN: 8.913 G_L1: 17.051 D_real: 0.120 D_fake: 0.001 \n",
            "End of epoch 317 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001880\n",
            "(epoch: 318, iters: 68, time: 0.025, data: 0.001) G_GAN: 2.666 G_L1: 15.781 D_real: 0.420 D_fake: 0.036 \n",
            "(epoch: 318, iters: 168, time: 0.300, data: 0.001) G_GAN: 6.497 G_L1: 17.118 D_real: 0.043 D_fake: 0.022 \n",
            "(epoch: 318, iters: 268, time: 0.024, data: 0.001) G_GAN: 5.636 G_L1: 15.836 D_real: 0.014 D_fake: 0.018 \n",
            "End of epoch 318 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0001874\n",
            "(epoch: 319, iters: 72, time: 0.023, data: 0.001) G_GAN: 6.095 G_L1: 15.598 D_real: 0.011 D_fake: 0.014 \n",
            "(epoch: 319, iters: 172, time: 0.032, data: 0.001) G_GAN: 5.411 G_L1: 26.411 D_real: 0.002 D_fake: 0.057 \n",
            "(epoch: 319, iters: 272, time: 0.366, data: 0.001) G_GAN: 6.632 G_L1: 22.169 D_real: 0.011 D_fake: 0.096 \n",
            "End of epoch 319 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001867\n",
            "(epoch: 320, iters: 76, time: 0.023, data: 0.001) G_GAN: 6.307 G_L1: 15.590 D_real: 0.076 D_fake: 0.011 \n",
            "(epoch: 320, iters: 176, time: 0.028, data: 0.001) G_GAN: 3.595 G_L1: 18.262 D_real: 0.000 D_fake: 0.229 \n",
            "(epoch: 320, iters: 276, time: 0.026, data: 0.001) G_GAN: 8.707 G_L1: 25.480 D_real: 0.012 D_fake: 0.002 \n",
            "saving the model at the end of epoch 320, iters 94720\n",
            "End of epoch 320 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0001860\n",
            "(epoch: 321, iters: 80, time: 0.338, data: 0.001) G_GAN: 4.638 G_L1: 16.103 D_real: 0.001 D_fake: 0.119 \n",
            "(epoch: 321, iters: 180, time: 0.033, data: 0.001) G_GAN: 10.063 G_L1: 18.916 D_real: 0.483 D_fake: 0.001 \n",
            "(epoch: 321, iters: 280, time: 0.023, data: 0.001) G_GAN: 6.668 G_L1: 18.415 D_real: 0.011 D_fake: 0.327 \n",
            "saving the latest model (epoch 321, total_iters 95000)\n",
            "End of epoch 321 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0001854\n",
            "(epoch: 322, iters: 84, time: 0.023, data: 0.002) G_GAN: 5.274 G_L1: 19.041 D_real: 0.002 D_fake: 0.233 \n",
            "(epoch: 322, iters: 184, time: 0.393, data: 0.001) G_GAN: 6.021 G_L1: 15.861 D_real: 0.008 D_fake: 0.008 \n",
            "(epoch: 322, iters: 284, time: 0.024, data: 0.003) G_GAN: 5.167 G_L1: 21.957 D_real: 0.017 D_fake: 0.012 \n",
            "End of epoch 322 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001847\n",
            "(epoch: 323, iters: 88, time: 0.025, data: 0.001) G_GAN: 7.085 G_L1: 14.226 D_real: 0.070 D_fake: 0.010 \n",
            "(epoch: 323, iters: 188, time: 0.026, data: 0.001) G_GAN: 5.601 G_L1: 16.419 D_real: 0.040 D_fake: 0.364 \n",
            "(epoch: 323, iters: 288, time: 0.364, data: 0.002) G_GAN: 4.250 G_L1: 15.551 D_real: 0.429 D_fake: 0.015 \n",
            "End of epoch 323 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001841\n",
            "(epoch: 324, iters: 92, time: 0.028, data: 0.001) G_GAN: 6.471 G_L1: 15.906 D_real: 0.167 D_fake: 0.008 \n",
            "(epoch: 324, iters: 192, time: 0.023, data: 0.001) G_GAN: 5.283 G_L1: 12.803 D_real: 0.044 D_fake: 0.017 \n",
            "(epoch: 324, iters: 292, time: 0.022, data: 0.001) G_GAN: 7.243 G_L1: 13.303 D_real: 0.056 D_fake: 0.005 \n",
            "End of epoch 324 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0001834\n",
            "(epoch: 325, iters: 96, time: 0.311, data: 0.001) G_GAN: 6.874 G_L1: 17.159 D_real: 0.048 D_fake: 0.003 \n",
            "(epoch: 325, iters: 196, time: 0.026, data: 0.001) G_GAN: 6.811 G_L1: 16.230 D_real: 0.310 D_fake: 0.005 \n",
            "(epoch: 325, iters: 296, time: 0.022, data: 0.001) G_GAN: 3.931 G_L1: 15.104 D_real: 0.032 D_fake: 0.149 \n",
            "saving the model at the end of epoch 325, iters 96200\n",
            "End of epoch 325 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0001827\n",
            "(epoch: 326, iters: 100, time: 0.024, data: 0.126) G_GAN: 4.913 G_L1: 19.300 D_real: 0.067 D_fake: 0.024 \n",
            "(epoch: 326, iters: 200, time: 0.649, data: 0.001) G_GAN: 4.961 G_L1: 15.413 D_real: 0.171 D_fake: 0.015 \n",
            "End of epoch 326 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001821\n",
            "(epoch: 327, iters: 4, time: 0.024, data: 0.005) G_GAN: 4.793 G_L1: 18.908 D_real: 0.643 D_fake: 0.003 \n",
            "(epoch: 327, iters: 104, time: 0.028, data: 0.000) G_GAN: 4.177 G_L1: 16.008 D_real: 0.267 D_fake: 0.008 \n",
            "(epoch: 327, iters: 204, time: 0.031, data: 0.002) G_GAN: 5.251 G_L1: 17.722 D_real: 0.002 D_fake: 0.020 \n",
            "End of epoch 327 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0001814\n",
            "(epoch: 328, iters: 8, time: 0.315, data: 0.002) G_GAN: 5.351 G_L1: 16.008 D_real: 0.003 D_fake: 0.139 \n",
            "(epoch: 328, iters: 108, time: 0.023, data: 0.001) G_GAN: 3.860 G_L1: 21.637 D_real: 0.057 D_fake: 0.107 \n",
            "(epoch: 328, iters: 208, time: 0.023, data: 0.001) G_GAN: 6.764 G_L1: 17.252 D_real: 0.015 D_fake: 0.009 \n",
            "End of epoch 328 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001807\n",
            "(epoch: 329, iters: 12, time: 0.024, data: 0.001) G_GAN: 9.064 G_L1: 21.638 D_real: 0.204 D_fake: 0.001 \n",
            "(epoch: 329, iters: 112, time: 0.502, data: 0.001) G_GAN: 7.964 G_L1: 16.343 D_real: 0.001 D_fake: 0.003 \n",
            "(epoch: 329, iters: 212, time: 0.027, data: 0.001) G_GAN: 7.031 G_L1: 19.818 D_real: 0.048 D_fake: 0.007 \n",
            "End of epoch 329 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001801\n",
            "(epoch: 330, iters: 16, time: 0.024, data: 0.001) G_GAN: 4.166 G_L1: 14.342 D_real: 0.131 D_fake: 0.158 \n",
            "(epoch: 330, iters: 116, time: 0.023, data: 0.001) G_GAN: 7.709 G_L1: 16.895 D_real: 0.057 D_fake: 0.002 \n",
            "(epoch: 330, iters: 216, time: 0.344, data: 0.001) G_GAN: 8.383 G_L1: 18.510 D_real: 0.015 D_fake: 0.796 \n",
            "saving the model at the end of epoch 330, iters 97680\n",
            "End of epoch 330 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001794\n",
            "(epoch: 331, iters: 20, time: 0.028, data: 0.002) G_GAN: 5.766 G_L1: 16.086 D_real: 0.003 D_fake: 0.017 \n",
            "(epoch: 331, iters: 120, time: 0.024, data: 0.001) G_GAN: 3.144 G_L1: 14.750 D_real: 0.767 D_fake: 0.011 \n",
            "(epoch: 331, iters: 220, time: 0.025, data: 0.001) G_GAN: 5.988 G_L1: 25.121 D_real: 0.041 D_fake: 0.026 \n",
            "End of epoch 331 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001787\n",
            "(epoch: 332, iters: 24, time: 0.313, data: 0.001) G_GAN: 4.566 G_L1: 15.608 D_real: 0.078 D_fake: 0.256 \n",
            "(epoch: 332, iters: 124, time: 0.024, data: 0.002) G_GAN: 3.543 G_L1: 19.006 D_real: 0.755 D_fake: 0.007 \n",
            "(epoch: 332, iters: 224, time: 0.029, data: 0.001) G_GAN: 4.956 G_L1: 16.776 D_real: 0.187 D_fake: 0.300 \n",
            "End of epoch 332 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001781\n",
            "(epoch: 333, iters: 28, time: 0.025, data: 0.001) G_GAN: 6.041 G_L1: 17.920 D_real: 0.036 D_fake: 0.014 \n",
            "(epoch: 333, iters: 128, time: 0.379, data: 0.001) G_GAN: 6.594 G_L1: 21.747 D_real: 0.170 D_fake: 0.019 \n",
            "(epoch: 333, iters: 228, time: 0.030, data: 0.001) G_GAN: 5.488 G_L1: 15.498 D_real: 0.004 D_fake: 0.171 \n",
            "End of epoch 333 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001774\n",
            "(epoch: 334, iters: 32, time: 0.023, data: 0.001) G_GAN: 6.514 G_L1: 17.692 D_real: 0.022 D_fake: 0.069 \n",
            "(epoch: 334, iters: 132, time: 0.025, data: 0.001) G_GAN: 4.867 G_L1: 16.764 D_real: 0.018 D_fake: 0.018 \n",
            "(epoch: 334, iters: 232, time: 0.320, data: 0.001) G_GAN: 4.467 G_L1: 11.907 D_real: 0.020 D_fake: 0.094 \n",
            "End of epoch 334 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001767\n",
            "(epoch: 335, iters: 36, time: 0.025, data: 0.001) G_GAN: 5.206 G_L1: 15.391 D_real: 0.102 D_fake: 0.021 \n",
            "(epoch: 335, iters: 136, time: 0.023, data: 0.001) G_GAN: 4.857 G_L1: 13.784 D_real: 0.185 D_fake: 0.014 \n",
            "(epoch: 335, iters: 236, time: 0.029, data: 0.001) G_GAN: 5.479 G_L1: 16.684 D_real: 0.001 D_fake: 0.252 \n",
            "saving the model at the end of epoch 335, iters 99160\n",
            "End of epoch 335 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001761\n",
            "(epoch: 336, iters: 40, time: 0.368, data: 0.001) G_GAN: 4.864 G_L1: 16.827 D_real: 0.043 D_fake: 0.050 \n",
            "(epoch: 336, iters: 140, time: 0.029, data: 0.001) G_GAN: 8.597 G_L1: 15.361 D_real: 0.005 D_fake: 0.001 \n",
            "(epoch: 336, iters: 240, time: 0.023, data: 0.001) G_GAN: 7.495 G_L1: 19.594 D_real: 0.014 D_fake: 0.543 \n",
            "End of epoch 336 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001754\n",
            "(epoch: 337, iters: 44, time: 0.024, data: 0.001) G_GAN: 5.581 G_L1: 19.646 D_real: 0.023 D_fake: 0.069 \n",
            "(epoch: 337, iters: 144, time: 0.446, data: 0.001) G_GAN: 5.073 G_L1: 15.820 D_real: 0.001 D_fake: 0.457 \n",
            "(epoch: 337, iters: 244, time: 0.025, data: 0.001) G_GAN: 5.685 G_L1: 15.405 D_real: 0.019 D_fake: 0.005 \n",
            "End of epoch 337 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001748\n",
            "(epoch: 338, iters: 48, time: 0.023, data: 0.001) G_GAN: 6.048 G_L1: 17.558 D_real: 0.125 D_fake: 0.046 \n",
            "(epoch: 338, iters: 148, time: 0.029, data: 0.001) G_GAN: 5.237 G_L1: 19.125 D_real: 0.060 D_fake: 0.141 \n",
            "(epoch: 338, iters: 248, time: 0.369, data: 0.001) G_GAN: 5.701 G_L1: 25.405 D_real: 0.004 D_fake: 0.024 \n",
            "saving the latest model (epoch 338, total_iters 100000)\n",
            "End of epoch 338 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001741\n",
            "(epoch: 339, iters: 52, time: 0.030, data: 0.001) G_GAN: 4.964 G_L1: 15.088 D_real: 0.016 D_fake: 0.021 \n",
            "(epoch: 339, iters: 152, time: 0.023, data: 0.001) G_GAN: 7.163 G_L1: 15.044 D_real: 0.486 D_fake: 0.004 \n",
            "(epoch: 339, iters: 252, time: 0.023, data: 0.001) G_GAN: 6.048 G_L1: 16.536 D_real: 0.021 D_fake: 0.267 \n",
            "End of epoch 339 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001734\n",
            "(epoch: 340, iters: 56, time: 0.389, data: 0.001) G_GAN: 6.088 G_L1: 22.636 D_real: 0.005 D_fake: 0.010 \n",
            "(epoch: 340, iters: 156, time: 0.025, data: 0.002) G_GAN: 4.811 G_L1: 17.642 D_real: 0.016 D_fake: 0.060 \n",
            "(epoch: 340, iters: 256, time: 0.040, data: 0.001) G_GAN: 4.749 G_L1: 16.357 D_real: 0.007 D_fake: 0.208 \n",
            "saving the model at the end of epoch 340, iters 100640\n",
            "End of epoch 340 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001728\n",
            "(epoch: 341, iters: 60, time: 0.023, data: 0.001) G_GAN: 8.432 G_L1: 18.075 D_real: 0.103 D_fake: 0.001 \n",
            "(epoch: 341, iters: 160, time: 0.392, data: 0.001) G_GAN: 8.861 G_L1: 14.419 D_real: 0.005 D_fake: 0.002 \n",
            "(epoch: 341, iters: 260, time: 0.025, data: 0.001) G_GAN: 4.515 G_L1: 16.620 D_real: 0.609 D_fake: 0.028 \n",
            "End of epoch 341 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001721\n",
            "(epoch: 342, iters: 64, time: 0.024, data: 0.001) G_GAN: 5.851 G_L1: 19.708 D_real: 0.000 D_fake: 0.482 \n",
            "(epoch: 342, iters: 164, time: 0.027, data: 0.004) G_GAN: 5.330 G_L1: 19.751 D_real: 0.582 D_fake: 0.002 \n",
            "(epoch: 342, iters: 264, time: 0.469, data: 0.001) G_GAN: 5.945 G_L1: 19.447 D_real: 0.015 D_fake: 0.013 \n",
            "End of epoch 342 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001714\n",
            "(epoch: 343, iters: 68, time: 0.023, data: 0.002) G_GAN: 8.643 G_L1: 17.613 D_real: 0.001 D_fake: 0.003 \n",
            "(epoch: 343, iters: 168, time: 0.029, data: 0.001) G_GAN: 7.748 G_L1: 17.147 D_real: 0.072 D_fake: 0.002 \n",
            "(epoch: 343, iters: 268, time: 0.024, data: 0.001) G_GAN: 5.806 G_L1: 16.674 D_real: 0.052 D_fake: 0.034 \n",
            "End of epoch 343 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0001708\n",
            "(epoch: 344, iters: 72, time: 0.390, data: 0.001) G_GAN: 8.094 G_L1: 18.726 D_real: 0.009 D_fake: 0.007 \n",
            "(epoch: 344, iters: 172, time: 0.029, data: 0.002) G_GAN: 6.912 G_L1: 21.434 D_real: 0.021 D_fake: 0.013 \n",
            "(epoch: 344, iters: 272, time: 0.030, data: 0.001) G_GAN: 5.791 G_L1: 16.123 D_real: 0.050 D_fake: 0.008 \n",
            "End of epoch 344 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001701\n",
            "(epoch: 345, iters: 76, time: 0.023, data: 0.001) G_GAN: 0.601 G_L1: 13.185 D_real: 1.830 D_fake: 0.023 \n",
            "(epoch: 345, iters: 176, time: 0.317, data: 0.002) G_GAN: 4.908 G_L1: 13.852 D_real: 0.070 D_fake: 0.113 \n",
            "(epoch: 345, iters: 276, time: 0.024, data: 0.001) G_GAN: 6.844 G_L1: 16.706 D_real: 0.014 D_fake: 0.056 \n",
            "saving the model at the end of epoch 345, iters 102120\n",
            "End of epoch 345 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0001694\n",
            "(epoch: 346, iters: 80, time: 0.023, data: 0.001) G_GAN: 5.230 G_L1: 16.635 D_real: 0.416 D_fake: 0.010 \n",
            "(epoch: 346, iters: 180, time: 0.023, data: 0.001) G_GAN: 5.819 G_L1: 17.025 D_real: 0.021 D_fake: 0.048 \n",
            "(epoch: 346, iters: 280, time: 0.325, data: 0.001) G_GAN: 6.652 G_L1: 19.858 D_real: 0.018 D_fake: 0.012 \n",
            "End of epoch 346 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001688\n",
            "(epoch: 347, iters: 84, time: 0.029, data: 0.001) G_GAN: 4.642 G_L1: 15.734 D_real: 0.003 D_fake: 0.027 \n",
            "(epoch: 347, iters: 184, time: 0.024, data: 0.001) G_GAN: 6.369 G_L1: 16.315 D_real: 0.004 D_fake: 0.808 \n",
            "(epoch: 347, iters: 284, time: 0.024, data: 0.001) G_GAN: 4.132 G_L1: 19.967 D_real: 0.366 D_fake: 0.122 \n",
            "End of epoch 347 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0001681\n",
            "(epoch: 348, iters: 88, time: 0.390, data: 0.001) G_GAN: 4.399 G_L1: 20.889 D_real: 0.006 D_fake: 0.014 \n",
            "(epoch: 348, iters: 188, time: 0.025, data: 0.001) G_GAN: 8.101 G_L1: 25.045 D_real: 0.014 D_fake: 0.051 \n",
            "(epoch: 348, iters: 288, time: 0.023, data: 0.001) G_GAN: 7.143 G_L1: 19.239 D_real: 0.021 D_fake: 0.002 \n",
            "End of epoch 348 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001674\n",
            "(epoch: 349, iters: 92, time: 0.023, data: 0.001) G_GAN: 2.573 G_L1: 14.875 D_real: 0.761 D_fake: 0.114 \n",
            "(epoch: 349, iters: 192, time: 0.326, data: 0.001) G_GAN: 5.496 G_L1: 16.538 D_real: 0.326 D_fake: 0.008 \n",
            "(epoch: 349, iters: 292, time: 0.022, data: 0.001) G_GAN: 5.737 G_L1: 14.927 D_real: 0.033 D_fake: 0.039 \n",
            "End of epoch 349 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001668\n",
            "(epoch: 350, iters: 96, time: 0.030, data: 0.001) G_GAN: 5.673 G_L1: 19.952 D_real: 0.003 D_fake: 0.034 \n",
            "(epoch: 350, iters: 196, time: 0.023, data: 0.001) G_GAN: 4.612 G_L1: 16.657 D_real: 0.002 D_fake: 0.047 \n",
            "(epoch: 350, iters: 296, time: 0.396, data: 0.001) G_GAN: 7.650 G_L1: 17.765 D_real: 0.004 D_fake: 0.547 \n",
            "saving the model at the end of epoch 350, iters 103600\n",
            "End of epoch 350 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001661\n",
            "(epoch: 351, iters: 100, time: 0.025, data: 0.114) G_GAN: 7.328 G_L1: 18.794 D_real: 0.009 D_fake: 0.005 \n",
            "(epoch: 351, iters: 200, time: 0.113, data: 0.001) G_GAN: 6.494 G_L1: 16.812 D_real: 0.003 D_fake: 0.013 \n",
            "End of epoch 351 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001654\n",
            "(epoch: 352, iters: 4, time: 0.024, data: 0.002) G_GAN: 4.179 G_L1: 15.654 D_real: 0.135 D_fake: 0.135 \n",
            "(epoch: 352, iters: 104, time: 0.322, data: 0.000) G_GAN: 6.699 G_L1: 13.096 D_real: 0.076 D_fake: 0.579 \n",
            "(epoch: 352, iters: 204, time: 0.023, data: 0.002) G_GAN: 4.299 G_L1: 12.953 D_real: 0.036 D_fake: 0.153 \n",
            "End of epoch 352 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001648\n",
            "(epoch: 353, iters: 8, time: 0.023, data: 0.001) G_GAN: 6.356 G_L1: 13.736 D_real: 0.001 D_fake: 0.036 \n",
            "(epoch: 353, iters: 108, time: 0.023, data: 0.001) G_GAN: 9.326 G_L1: 14.057 D_real: 0.078 D_fake: 0.000 \n",
            "(epoch: 353, iters: 208, time: 0.373, data: 0.001) G_GAN: 3.778 G_L1: 16.245 D_real: 0.267 D_fake: 0.021 \n",
            "End of epoch 353 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001641\n",
            "(epoch: 354, iters: 12, time: 0.023, data: 0.001) G_GAN: 3.786 G_L1: 16.148 D_real: 0.213 D_fake: 0.232 \n",
            "(epoch: 354, iters: 112, time: 0.023, data: 0.001) G_GAN: 6.015 G_L1: 17.926 D_real: 0.002 D_fake: 0.614 \n",
            "(epoch: 354, iters: 212, time: 0.023, data: 0.001) G_GAN: 5.606 G_L1: 16.794 D_real: 0.009 D_fake: 0.305 \n",
            "End of epoch 354 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0001635\n",
            "(epoch: 355, iters: 16, time: 0.483, data: 0.001) G_GAN: 5.545 G_L1: 14.179 D_real: 0.015 D_fake: 0.417 \n",
            "(epoch: 355, iters: 116, time: 0.024, data: 0.002) G_GAN: 6.002 G_L1: 13.848 D_real: 0.003 D_fake: 0.388 \n",
            "(epoch: 355, iters: 216, time: 0.032, data: 0.001) G_GAN: 2.554 G_L1: 12.207 D_real: 0.790 D_fake: 0.037 \n",
            "saving the latest model (epoch 355, total_iters 105000)\n",
            "saving the model at the end of epoch 355, iters 105080\n",
            "End of epoch 355 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001628\n",
            "(epoch: 356, iters: 20, time: 0.025, data: 0.001) G_GAN: 2.532 G_L1: 13.132 D_real: 1.246 D_fake: 0.013 \n",
            "(epoch: 356, iters: 120, time: 0.405, data: 0.001) G_GAN: 4.468 G_L1: 20.304 D_real: 0.062 D_fake: 0.155 \n",
            "(epoch: 356, iters: 220, time: 0.024, data: 0.002) G_GAN: 5.582 G_L1: 19.373 D_real: 0.002 D_fake: 0.054 \n",
            "End of epoch 356 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0001621\n",
            "(epoch: 357, iters: 24, time: 0.029, data: 0.001) G_GAN: 8.318 G_L1: 13.153 D_real: 0.003 D_fake: 0.973 \n",
            "(epoch: 357, iters: 124, time: 0.023, data: 0.001) G_GAN: 5.489 G_L1: 16.051 D_real: 0.004 D_fake: 0.020 \n",
            "(epoch: 357, iters: 224, time: 0.359, data: 0.001) G_GAN: 6.429 G_L1: 19.691 D_real: 0.008 D_fake: 0.405 \n",
            "End of epoch 357 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001615\n",
            "(epoch: 358, iters: 28, time: 0.028, data: 0.002) G_GAN: 4.608 G_L1: 16.342 D_real: 0.047 D_fake: 0.032 \n",
            "(epoch: 358, iters: 128, time: 0.023, data: 0.001) G_GAN: 7.852 G_L1: 21.355 D_real: 0.004 D_fake: 0.014 \n",
            "(epoch: 358, iters: 228, time: 0.029, data: 0.002) G_GAN: 3.046 G_L1: 15.738 D_real: 0.365 D_fake: 0.026 \n",
            "End of epoch 358 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0001608\n",
            "(epoch: 359, iters: 32, time: 0.409, data: 0.001) G_GAN: 3.175 G_L1: 16.730 D_real: 0.098 D_fake: 0.051 \n",
            "(epoch: 359, iters: 132, time: 0.024, data: 0.002) G_GAN: 4.836 G_L1: 14.594 D_real: 0.178 D_fake: 0.008 \n",
            "(epoch: 359, iters: 232, time: 0.024, data: 0.001) G_GAN: 6.107 G_L1: 17.934 D_real: 0.001 D_fake: 0.631 \n",
            "End of epoch 359 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001601\n",
            "(epoch: 360, iters: 36, time: 0.028, data: 0.001) G_GAN: 7.912 G_L1: 18.043 D_real: 0.066 D_fake: 0.019 \n",
            "(epoch: 360, iters: 136, time: 0.368, data: 0.001) G_GAN: 7.068 G_L1: 17.184 D_real: 0.051 D_fake: 0.003 \n",
            "(epoch: 360, iters: 236, time: 0.023, data: 0.001) G_GAN: 6.833 G_L1: 13.205 D_real: 0.049 D_fake: 0.010 \n",
            "saving the model at the end of epoch 360, iters 106560\n",
            "End of epoch 360 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001595\n",
            "(epoch: 361, iters: 40, time: 0.024, data: 0.001) G_GAN: 3.921 G_L1: 14.867 D_real: 0.005 D_fake: 0.220 \n",
            "(epoch: 361, iters: 140, time: 0.023, data: 0.001) G_GAN: 6.059 G_L1: 17.363 D_real: 0.171 D_fake: 0.536 \n",
            "(epoch: 361, iters: 240, time: 0.407, data: 0.001) G_GAN: 4.515 G_L1: 17.190 D_real: 0.577 D_fake: 0.008 \n",
            "End of epoch 361 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0001588\n",
            "(epoch: 362, iters: 44, time: 0.023, data: 0.002) G_GAN: 4.568 G_L1: 16.550 D_real: 0.001 D_fake: 0.095 \n",
            "(epoch: 362, iters: 144, time: 0.029, data: 0.001) G_GAN: 4.087 G_L1: 15.218 D_real: 0.166 D_fake: 0.066 \n",
            "(epoch: 362, iters: 244, time: 0.024, data: 0.001) G_GAN: 6.958 G_L1: 22.528 D_real: 0.025 D_fake: 0.002 \n",
            "End of epoch 362 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001581\n",
            "(epoch: 363, iters: 48, time: 0.372, data: 0.001) G_GAN: 5.265 G_L1: 16.064 D_real: 0.128 D_fake: 0.023 \n",
            "(epoch: 363, iters: 148, time: 0.029, data: 0.002) G_GAN: 5.656 G_L1: 16.146 D_real: 0.039 D_fake: 0.069 \n",
            "(epoch: 363, iters: 248, time: 0.023, data: 0.001) G_GAN: 5.602 G_L1: 17.217 D_real: 0.002 D_fake: 0.051 \n",
            "End of epoch 363 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001575\n",
            "(epoch: 364, iters: 52, time: 0.031, data: 0.002) G_GAN: 4.855 G_L1: 17.641 D_real: 0.059 D_fake: 0.198 \n",
            "(epoch: 364, iters: 152, time: 0.396, data: 0.001) G_GAN: 4.489 G_L1: 14.543 D_real: 0.013 D_fake: 0.159 \n",
            "(epoch: 364, iters: 252, time: 0.029, data: 0.001) G_GAN: 5.989 G_L1: 13.018 D_real: 0.572 D_fake: 0.001 \n",
            "End of epoch 364 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001568\n",
            "(epoch: 365, iters: 56, time: 0.023, data: 0.002) G_GAN: 3.331 G_L1: 14.117 D_real: 0.784 D_fake: 0.004 \n",
            "(epoch: 365, iters: 156, time: 0.023, data: 0.001) G_GAN: 8.501 G_L1: 16.985 D_real: 0.041 D_fake: 0.001 \n",
            "(epoch: 365, iters: 256, time: 0.338, data: 0.001) G_GAN: 6.282 G_L1: 17.002 D_real: 2.315 D_fake: 0.001 \n",
            "saving the model at the end of epoch 365, iters 108040\n",
            "End of epoch 365 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0001561\n",
            "(epoch: 366, iters: 60, time: 0.028, data: 0.001) G_GAN: 4.780 G_L1: 16.451 D_real: 0.010 D_fake: 0.062 \n",
            "(epoch: 366, iters: 160, time: 0.026, data: 0.003) G_GAN: 7.338 G_L1: 17.016 D_real: 0.001 D_fake: 0.005 \n",
            "(epoch: 366, iters: 260, time: 0.058, data: 0.001) G_GAN: 7.987 G_L1: 13.670 D_real: 0.197 D_fake: 0.003 \n",
            "End of epoch 366 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001555\n",
            "(epoch: 367, iters: 64, time: 0.425, data: 0.002) G_GAN: 7.737 G_L1: 21.608 D_real: 0.176 D_fake: 0.002 \n",
            "(epoch: 367, iters: 164, time: 0.025, data: 0.002) G_GAN: 6.838 G_L1: 18.816 D_real: 0.687 D_fake: 0.001 \n",
            "(epoch: 367, iters: 264, time: 0.024, data: 0.002) G_GAN: 8.220 G_L1: 15.100 D_real: 0.015 D_fake: 0.700 \n",
            "End of epoch 367 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001548\n",
            "(epoch: 368, iters: 68, time: 0.026, data: 0.001) G_GAN: 5.460 G_L1: 14.293 D_real: 0.128 D_fake: 0.025 \n",
            "(epoch: 368, iters: 168, time: 0.380, data: 0.001) G_GAN: 7.881 G_L1: 19.690 D_real: 0.047 D_fake: 0.002 \n",
            "(epoch: 368, iters: 268, time: 0.023, data: 0.001) G_GAN: 4.319 G_L1: 17.365 D_real: 0.028 D_fake: 0.149 \n",
            "End of epoch 368 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001542\n",
            "(epoch: 369, iters: 72, time: 0.024, data: 0.001) G_GAN: 5.426 G_L1: 16.943 D_real: 0.007 D_fake: 0.020 \n",
            "(epoch: 369, iters: 172, time: 0.030, data: 0.002) G_GAN: 6.418 G_L1: 14.680 D_real: 0.018 D_fake: 0.026 \n",
            "(epoch: 369, iters: 272, time: 0.402, data: 0.001) G_GAN: 4.268 G_L1: 16.150 D_real: 0.128 D_fake: 0.024 \n",
            "End of epoch 369 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001535\n",
            "(epoch: 370, iters: 76, time: 0.030, data: 0.001) G_GAN: 10.034 G_L1: 18.131 D_real: 0.007 D_fake: 0.001 \n",
            "(epoch: 370, iters: 176, time: 0.026, data: 0.001) G_GAN: 6.824 G_L1: 17.801 D_real: 0.575 D_fake: 0.000 \n",
            "(epoch: 370, iters: 276, time: 0.025, data: 0.001) G_GAN: 7.028 G_L1: 19.994 D_real: 0.041 D_fake: 0.007 \n",
            "saving the model at the end of epoch 370, iters 109520\n",
            "End of epoch 370 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001528\n",
            "(epoch: 371, iters: 80, time: 0.373, data: 0.001) G_GAN: 5.442 G_L1: 12.632 D_real: 0.000 D_fake: 0.464 \n",
            "(epoch: 371, iters: 180, time: 0.023, data: 0.001) G_GAN: 5.450 G_L1: 18.539 D_real: 0.036 D_fake: 0.067 \n",
            "(epoch: 371, iters: 280, time: 0.029, data: 0.001) G_GAN: 4.671 G_L1: 15.678 D_real: 0.004 D_fake: 0.060 \n",
            "End of epoch 371 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001522\n",
            "(epoch: 372, iters: 84, time: 0.025, data: 0.002) G_GAN: 5.675 G_L1: 17.534 D_real: 0.013 D_fake: 0.322 \n",
            "(epoch: 372, iters: 184, time: 0.418, data: 0.001) G_GAN: 5.392 G_L1: 13.550 D_real: 0.001 D_fake: 0.023 \n",
            "saving the latest model (epoch 372, total_iters 110000)\n",
            "(epoch: 372, iters: 284, time: 0.024, data: 0.001) G_GAN: 5.259 G_L1: 16.412 D_real: 0.033 D_fake: 0.047 \n",
            "End of epoch 372 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0001515\n",
            "(epoch: 373, iters: 88, time: 0.023, data: 0.001) G_GAN: 3.840 G_L1: 14.600 D_real: 0.028 D_fake: 0.107 \n",
            "(epoch: 373, iters: 188, time: 0.025, data: 0.001) G_GAN: 5.139 G_L1: 18.746 D_real: 0.005 D_fake: 0.032 \n",
            "(epoch: 373, iters: 288, time: 0.344, data: 0.001) G_GAN: 8.765 G_L1: 14.115 D_real: 0.000 D_fake: 2.711 \n",
            "End of epoch 373 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001508\n",
            "(epoch: 374, iters: 92, time: 0.023, data: 0.001) G_GAN: 7.097 G_L1: 19.909 D_real: 0.100 D_fake: 0.006 \n",
            "(epoch: 374, iters: 192, time: 0.024, data: 0.001) G_GAN: 6.918 G_L1: 13.982 D_real: 0.221 D_fake: 0.004 \n",
            "(epoch: 374, iters: 292, time: 0.022, data: 0.001) G_GAN: 6.315 G_L1: 12.865 D_real: 0.044 D_fake: 0.007 \n",
            "End of epoch 374 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0001502\n",
            "(epoch: 375, iters: 96, time: 0.411, data: 0.001) G_GAN: 6.242 G_L1: 13.081 D_real: 0.028 D_fake: 0.006 \n",
            "(epoch: 375, iters: 196, time: 0.028, data: 0.002) G_GAN: 7.515 G_L1: 16.681 D_real: 0.007 D_fake: 0.804 \n",
            "(epoch: 375, iters: 296, time: 0.031, data: 0.001) G_GAN: 5.357 G_L1: 17.994 D_real: 0.181 D_fake: 0.092 \n",
            "saving the model at the end of epoch 375, iters 111000\n",
            "End of epoch 375 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001495\n",
            "(epoch: 376, iters: 100, time: 0.037, data: 0.111) G_GAN: 4.528 G_L1: 18.912 D_real: 0.069 D_fake: 0.076 \n",
            "(epoch: 376, iters: 200, time: 0.606, data: 0.001) G_GAN: 6.970 G_L1: 12.996 D_real: 0.001 D_fake: 0.009 \n",
            "End of epoch 376 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001488\n",
            "(epoch: 377, iters: 4, time: 0.024, data: 0.003) G_GAN: 4.057 G_L1: 17.570 D_real: 0.017 D_fake: 0.067 \n",
            "(epoch: 377, iters: 104, time: 0.024, data: 0.000) G_GAN: 4.543 G_L1: 13.749 D_real: 0.003 D_fake: 0.056 \n",
            "(epoch: 377, iters: 204, time: 0.024, data: 0.001) G_GAN: 5.591 G_L1: 16.792 D_real: 0.003 D_fake: 0.193 \n",
            "End of epoch 377 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0001482\n",
            "(epoch: 378, iters: 8, time: 0.432, data: 0.001) G_GAN: 6.906 G_L1: 16.139 D_real: 0.030 D_fake: 0.033 \n",
            "(epoch: 378, iters: 108, time: 0.029, data: 0.002) G_GAN: 5.001 G_L1: 14.495 D_real: 0.045 D_fake: 0.047 \n",
            "(epoch: 378, iters: 208, time: 0.024, data: 0.002) G_GAN: 4.952 G_L1: 17.120 D_real: 0.116 D_fake: 0.025 \n",
            "End of epoch 378 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001475\n",
            "(epoch: 379, iters: 12, time: 0.030, data: 0.001) G_GAN: 9.241 G_L1: 15.937 D_real: 0.211 D_fake: 0.000 \n",
            "(epoch: 379, iters: 112, time: 0.389, data: 0.001) G_GAN: 3.847 G_L1: 15.210 D_real: 0.003 D_fake: 0.018 \n",
            "(epoch: 379, iters: 212, time: 0.031, data: 0.002) G_GAN: 7.396 G_L1: 17.257 D_real: 0.125 D_fake: 0.606 \n",
            "End of epoch 379 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001468\n",
            "(epoch: 380, iters: 16, time: 0.023, data: 0.002) G_GAN: 5.848 G_L1: 14.879 D_real: 0.003 D_fake: 0.377 \n",
            "(epoch: 380, iters: 116, time: 0.024, data: 0.001) G_GAN: 6.812 G_L1: 19.474 D_real: 0.002 D_fake: 0.008 \n",
            "(epoch: 380, iters: 216, time: 0.425, data: 0.001) G_GAN: 4.326 G_L1: 15.098 D_real: 0.014 D_fake: 0.048 \n",
            "saving the model at the end of epoch 380, iters 112480\n",
            "End of epoch 380 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001462\n",
            "(epoch: 381, iters: 20, time: 0.024, data: 0.002) G_GAN: 5.299 G_L1: 14.756 D_real: 0.194 D_fake: 0.008 \n",
            "(epoch: 381, iters: 120, time: 0.024, data: 0.001) G_GAN: 8.139 G_L1: 15.289 D_real: 0.001 D_fake: 0.003 \n",
            "(epoch: 381, iters: 220, time: 0.025, data: 0.001) G_GAN: 3.559 G_L1: 16.480 D_real: 0.433 D_fake: 0.058 \n",
            "End of epoch 381 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001455\n",
            "(epoch: 382, iters: 24, time: 0.368, data: 0.001) G_GAN: 5.668 G_L1: 14.582 D_real: 0.266 D_fake: 0.028 \n",
            "(epoch: 382, iters: 124, time: 0.023, data: 0.002) G_GAN: 7.265 G_L1: 17.801 D_real: 0.143 D_fake: 0.002 \n",
            "(epoch: 382, iters: 224, time: 0.023, data: 0.001) G_GAN: 4.854 G_L1: 16.979 D_real: 0.001 D_fake: 0.105 \n",
            "End of epoch 382 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001449\n",
            "(epoch: 383, iters: 28, time: 0.024, data: 0.001) G_GAN: 5.170 G_L1: 14.228 D_real: 0.075 D_fake: 0.076 \n",
            "(epoch: 383, iters: 128, time: 0.451, data: 0.001) G_GAN: 6.905 G_L1: 14.888 D_real: 0.128 D_fake: 0.004 \n",
            "(epoch: 383, iters: 228, time: 0.029, data: 0.002) G_GAN: 3.751 G_L1: 13.987 D_real: 0.008 D_fake: 0.084 \n",
            "End of epoch 383 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001442\n",
            "(epoch: 384, iters: 32, time: 0.024, data: 0.001) G_GAN: 4.957 G_L1: 18.412 D_real: 0.001 D_fake: 0.050 \n",
            "(epoch: 384, iters: 132, time: 0.026, data: 0.001) G_GAN: 8.373 G_L1: 14.434 D_real: 0.022 D_fake: 0.352 \n",
            "(epoch: 384, iters: 232, time: 0.354, data: 0.001) G_GAN: 6.013 G_L1: 20.615 D_real: 0.002 D_fake: 0.009 \n",
            "End of epoch 384 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001435\n",
            "(epoch: 385, iters: 36, time: 0.024, data: 0.001) G_GAN: 5.470 G_L1: 17.039 D_real: 0.084 D_fake: 0.234 \n",
            "(epoch: 385, iters: 136, time: 0.024, data: 0.001) G_GAN: 9.459 G_L1: 17.610 D_real: 0.186 D_fake: 0.001 \n",
            "(epoch: 385, iters: 236, time: 0.023, data: 0.001) G_GAN: 4.661 G_L1: 16.841 D_real: 0.012 D_fake: 0.063 \n",
            "saving the model at the end of epoch 385, iters 113960\n",
            "End of epoch 385 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001429\n",
            "(epoch: 386, iters: 40, time: 0.596, data: 0.002) G_GAN: 11.673 G_L1: 18.235 D_real: 0.259 D_fake: 0.000 \n",
            "(epoch: 386, iters: 140, time: 0.024, data: 0.002) G_GAN: 9.854 G_L1: 17.117 D_real: 0.029 D_fake: 0.000 \n",
            "(epoch: 386, iters: 240, time: 0.024, data: 0.001) G_GAN: 4.341 G_L1: 21.554 D_real: 0.001 D_fake: 0.044 \n",
            "End of epoch 386 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0001422\n",
            "(epoch: 387, iters: 44, time: 0.023, data: 0.001) G_GAN: 7.063 G_L1: 13.534 D_real: 0.016 D_fake: 0.003 \n",
            "(epoch: 387, iters: 144, time: 0.363, data: 0.001) G_GAN: 4.482 G_L1: 15.025 D_real: 0.223 D_fake: 0.047 \n",
            "(epoch: 387, iters: 244, time: 0.023, data: 0.002) G_GAN: 5.120 G_L1: 17.332 D_real: 0.005 D_fake: 0.048 \n",
            "End of epoch 387 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001415\n",
            "(epoch: 388, iters: 48, time: 0.023, data: 0.001) G_GAN: 7.206 G_L1: 17.779 D_real: 0.029 D_fake: 0.002 \n",
            "(epoch: 388, iters: 148, time: 0.025, data: 0.001) G_GAN: 4.534 G_L1: 13.847 D_real: 0.077 D_fake: 0.123 \n",
            "(epoch: 388, iters: 248, time: 0.434, data: 0.001) G_GAN: 5.950 G_L1: 17.522 D_real: 0.027 D_fake: 0.009 \n",
            "End of epoch 388 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001409\n",
            "(epoch: 389, iters: 52, time: 0.024, data: 0.001) G_GAN: 4.273 G_L1: 15.668 D_real: 0.299 D_fake: 0.028 \n",
            "(epoch: 389, iters: 152, time: 0.032, data: 0.001) G_GAN: 7.412 G_L1: 17.705 D_real: 0.015 D_fake: 0.006 \n",
            "saving the latest model (epoch 389, total_iters 115000)\n",
            "(epoch: 389, iters: 252, time: 0.023, data: 0.001) G_GAN: 7.251 G_L1: 15.949 D_real: 0.007 D_fake: 0.006 \n",
            "End of epoch 389 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001402\n",
            "(epoch: 390, iters: 56, time: 0.360, data: 0.001) G_GAN: 7.070 G_L1: 17.049 D_real: 0.109 D_fake: 0.005 \n",
            "(epoch: 390, iters: 156, time: 0.024, data: 0.001) G_GAN: 5.339 G_L1: 22.084 D_real: 0.001 D_fake: 0.015 \n",
            "(epoch: 390, iters: 256, time: 0.023, data: 0.001) G_GAN: 8.430 G_L1: 19.261 D_real: 0.000 D_fake: 0.005 \n",
            "saving the model at the end of epoch 390, iters 115440\n",
            "End of epoch 390 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001395\n",
            "(epoch: 391, iters: 60, time: 0.031, data: 0.001) G_GAN: 6.562 G_L1: 16.193 D_real: 0.001 D_fake: 0.495 \n",
            "(epoch: 391, iters: 160, time: 0.515, data: 0.002) G_GAN: 4.608 G_L1: 12.798 D_real: 0.003 D_fake: 0.455 \n",
            "(epoch: 391, iters: 260, time: 0.025, data: 0.001) G_GAN: 5.572 G_L1: 14.924 D_real: 0.303 D_fake: 0.011 \n",
            "End of epoch 391 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001389\n",
            "(epoch: 392, iters: 64, time: 0.024, data: 0.002) G_GAN: 5.795 G_L1: 17.836 D_real: 0.001 D_fake: 0.415 \n",
            "(epoch: 392, iters: 164, time: 0.029, data: 0.001) G_GAN: 6.313 G_L1: 15.051 D_real: 0.027 D_fake: 0.125 \n",
            "(epoch: 392, iters: 264, time: 0.368, data: 0.001) G_GAN: 9.134 G_L1: 26.730 D_real: 0.010 D_fake: 0.005 \n",
            "End of epoch 392 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001382\n",
            "(epoch: 393, iters: 68, time: 0.024, data: 0.002) G_GAN: 6.897 G_L1: 20.276 D_real: 0.001 D_fake: 0.004 \n",
            "(epoch: 393, iters: 168, time: 0.024, data: 0.001) G_GAN: 5.395 G_L1: 18.759 D_real: 0.005 D_fake: 0.023 \n",
            "(epoch: 393, iters: 268, time: 0.025, data: 0.001) G_GAN: 5.735 G_L1: 21.209 D_real: 0.000 D_fake: 0.381 \n",
            "End of epoch 393 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0001375\n",
            "(epoch: 394, iters: 72, time: 0.477, data: 0.001) G_GAN: 5.551 G_L1: 13.851 D_real: 0.002 D_fake: 0.027 \n",
            "(epoch: 394, iters: 172, time: 0.029, data: 0.002) G_GAN: 6.038 G_L1: 15.340 D_real: 0.001 D_fake: 0.297 \n",
            "(epoch: 394, iters: 272, time: 0.030, data: 0.001) G_GAN: 9.268 G_L1: 22.636 D_real: 0.004 D_fake: 0.000 \n",
            "End of epoch 394 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001369\n",
            "(epoch: 395, iters: 76, time: 0.024, data: 0.001) G_GAN: 4.846 G_L1: 16.983 D_real: 0.185 D_fake: 0.015 \n",
            "(epoch: 395, iters: 176, time: 0.367, data: 0.002) G_GAN: 6.575 G_L1: 17.843 D_real: 0.003 D_fake: 0.009 \n",
            "(epoch: 395, iters: 276, time: 0.024, data: 0.001) G_GAN: 7.505 G_L1: 19.905 D_real: 0.015 D_fake: 0.005 \n",
            "saving the model at the end of epoch 395, iters 116920\n",
            "End of epoch 395 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001362\n",
            "(epoch: 396, iters: 80, time: 0.028, data: 0.001) G_GAN: 3.867 G_L1: 15.104 D_real: 0.001 D_fake: 0.153 \n",
            "(epoch: 396, iters: 180, time: 0.024, data: 0.002) G_GAN: 7.763 G_L1: 24.452 D_real: 0.001 D_fake: 0.002 \n",
            "(epoch: 396, iters: 280, time: 0.471, data: 0.001) G_GAN: 5.265 G_L1: 16.451 D_real: 0.010 D_fake: 0.093 \n",
            "End of epoch 396 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001355\n",
            "(epoch: 397, iters: 84, time: 0.023, data: 0.001) G_GAN: 5.533 G_L1: 14.320 D_real: 0.087 D_fake: 0.068 \n",
            "(epoch: 397, iters: 184, time: 0.023, data: 0.001) G_GAN: 5.187 G_L1: 15.557 D_real: 0.080 D_fake: 0.022 \n",
            "(epoch: 397, iters: 284, time: 0.023, data: 0.001) G_GAN: 5.578 G_L1: 12.775 D_real: 0.191 D_fake: 0.044 \n",
            "End of epoch 397 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0001349\n",
            "(epoch: 398, iters: 88, time: 0.381, data: 0.002) G_GAN: 4.438 G_L1: 15.672 D_real: 1.802 D_fake: 0.001 \n",
            "(epoch: 398, iters: 188, time: 0.029, data: 0.001) G_GAN: 4.894 G_L1: 15.246 D_real: 0.003 D_fake: 0.132 \n",
            "(epoch: 398, iters: 288, time: 0.023, data: 0.001) G_GAN: 4.986 G_L1: 17.448 D_real: 0.027 D_fake: 0.250 \n",
            "End of epoch 398 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001342\n",
            "(epoch: 399, iters: 92, time: 0.029, data: 0.001) G_GAN: 6.926 G_L1: 17.859 D_real: 0.114 D_fake: 0.005 \n",
            "(epoch: 399, iters: 192, time: 0.423, data: 0.002) G_GAN: 6.641 G_L1: 16.241 D_real: 0.154 D_fake: 0.002 \n",
            "(epoch: 399, iters: 292, time: 0.022, data: 0.001) G_GAN: 6.226 G_L1: 19.625 D_real: 0.002 D_fake: 0.005 \n",
            "End of epoch 399 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001336\n",
            "(epoch: 400, iters: 96, time: 0.029, data: 0.002) G_GAN: 6.928 G_L1: 15.352 D_real: 0.007 D_fake: 0.003 \n",
            "(epoch: 400, iters: 196, time: 0.023, data: 0.001) G_GAN: 4.399 G_L1: 15.515 D_real: 0.046 D_fake: 0.060 \n",
            "(epoch: 400, iters: 296, time: 0.378, data: 0.001) G_GAN: 5.323 G_L1: 16.228 D_real: 0.055 D_fake: 0.163 \n",
            "saving the model at the end of epoch 400, iters 118400\n",
            "End of epoch 400 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001329\n",
            "(epoch: 401, iters: 100, time: 0.029, data: 0.107) G_GAN: 5.494 G_L1: 14.927 D_real: 0.709 D_fake: 0.002 \n",
            "(epoch: 401, iters: 200, time: 0.030, data: 0.001) G_GAN: 5.326 G_L1: 17.901 D_real: 0.001 D_fake: 0.031 \n",
            "End of epoch 401 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001322\n",
            "(epoch: 402, iters: 4, time: 0.024, data: 0.001) G_GAN: 5.052 G_L1: 14.442 D_real: 0.140 D_fake: 0.019 \n",
            "(epoch: 402, iters: 104, time: 0.549, data: 0.000) G_GAN: 4.415 G_L1: 16.307 D_real: 0.569 D_fake: 0.030 \n",
            "(epoch: 402, iters: 204, time: 0.024, data: 0.001) G_GAN: 2.137 G_L1: 12.838 D_real: 2.326 D_fake: 0.003 \n",
            "End of epoch 402 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0001316\n",
            "(epoch: 403, iters: 8, time: 0.030, data: 0.001) G_GAN: 4.732 G_L1: 16.854 D_real: 0.002 D_fake: 0.301 \n",
            "(epoch: 403, iters: 108, time: 0.023, data: 0.000) G_GAN: 6.061 G_L1: 19.431 D_real: 0.002 D_fake: 0.044 \n",
            "(epoch: 403, iters: 208, time: 0.371, data: 0.001) G_GAN: 5.117 G_L1: 15.064 D_real: 0.071 D_fake: 0.117 \n",
            "End of epoch 403 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001309\n",
            "(epoch: 404, iters: 12, time: 0.023, data: 0.003) G_GAN: 6.025 G_L1: 15.495 D_real: 0.005 D_fake: 0.359 \n",
            "(epoch: 404, iters: 112, time: 0.023, data: 0.002) G_GAN: 9.290 G_L1: 15.364 D_real: 0.003 D_fake: 1.264 \n",
            "(epoch: 404, iters: 212, time: 0.037, data: 0.001) G_GAN: 6.003 G_L1: 25.600 D_real: 0.010 D_fake: 0.015 \n",
            "End of epoch 404 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001302\n",
            "(epoch: 405, iters: 16, time: 0.434, data: 0.002) G_GAN: 5.054 G_L1: 15.254 D_real: 0.005 D_fake: 0.048 \n",
            "(epoch: 405, iters: 116, time: 0.023, data: 0.001) G_GAN: 5.709 G_L1: 15.871 D_real: 0.027 D_fake: 0.017 \n",
            "(epoch: 405, iters: 216, time: 0.024, data: 0.001) G_GAN: 4.642 G_L1: 15.685 D_real: 0.298 D_fake: 0.017 \n",
            "saving the model at the end of epoch 405, iters 119880\n",
            "End of epoch 405 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0001296\n",
            "(epoch: 406, iters: 20, time: 0.023, data: 0.001) G_GAN: 5.980 G_L1: 14.308 D_real: 0.004 D_fake: 0.366 \n",
            "(epoch: 406, iters: 120, time: 0.422, data: 0.001) G_GAN: 5.937 G_L1: 15.715 D_real: 0.003 D_fake: 0.017 \n",
            "saving the latest model (epoch 406, total_iters 120000)\n",
            "(epoch: 406, iters: 220, time: 0.024, data: 0.002) G_GAN: 4.404 G_L1: 15.067 D_real: 0.021 D_fake: 0.025 \n",
            "End of epoch 406 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0001289\n",
            "(epoch: 407, iters: 24, time: 0.024, data: 0.001) G_GAN: 5.371 G_L1: 13.229 D_real: 0.660 D_fake: 0.003 \n",
            "(epoch: 407, iters: 124, time: 0.025, data: 0.002) G_GAN: 7.572 G_L1: 17.594 D_real: 0.078 D_fake: 0.006 \n",
            "(epoch: 407, iters: 224, time: 0.370, data: 0.001) G_GAN: 4.471 G_L1: 13.206 D_real: 0.139 D_fake: 0.043 \n",
            "End of epoch 407 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001282\n",
            "(epoch: 408, iters: 28, time: 0.029, data: 0.001) G_GAN: 6.048 G_L1: 17.636 D_real: 0.003 D_fake: 0.027 \n",
            "(epoch: 408, iters: 128, time: 0.023, data: 0.001) G_GAN: 4.911 G_L1: 16.523 D_real: 0.049 D_fake: 0.330 \n",
            "(epoch: 408, iters: 228, time: 0.023, data: 0.001) G_GAN: 4.838 G_L1: 18.009 D_real: 0.365 D_fake: 0.015 \n",
            "End of epoch 408 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001276\n",
            "(epoch: 409, iters: 32, time: 0.456, data: 0.001) G_GAN: 3.824 G_L1: 18.906 D_real: 0.056 D_fake: 0.182 \n",
            "(epoch: 409, iters: 132, time: 0.024, data: 0.001) G_GAN: 6.177 G_L1: 15.902 D_real: 0.022 D_fake: 0.012 \n",
            "(epoch: 409, iters: 232, time: 0.033, data: 0.001) G_GAN: 4.142 G_L1: 15.783 D_real: 0.190 D_fake: 0.013 \n",
            "End of epoch 409 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001269\n",
            "(epoch: 410, iters: 36, time: 0.024, data: 0.001) G_GAN: 13.874 G_L1: 20.435 D_real: 0.004 D_fake: 0.000 \n",
            "(epoch: 410, iters: 136, time: 0.366, data: 0.001) G_GAN: 7.326 G_L1: 31.349 D_real: 0.002 D_fake: 0.010 \n",
            "(epoch: 410, iters: 236, time: 0.029, data: 0.001) G_GAN: 8.483 G_L1: 19.113 D_real: 0.001 D_fake: 0.019 \n",
            "saving the model at the end of epoch 410, iters 121360\n",
            "End of epoch 410 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001262\n",
            "(epoch: 411, iters: 40, time: 0.023, data: 0.001) G_GAN: 5.014 G_L1: 13.814 D_real: 0.002 D_fake: 0.119 \n",
            "(epoch: 411, iters: 140, time: 0.023, data: 0.001) G_GAN: 5.516 G_L1: 14.574 D_real: 0.013 D_fake: 0.063 \n",
            "(epoch: 411, iters: 240, time: 0.444, data: 0.001) G_GAN: 8.301 G_L1: 16.327 D_real: 0.044 D_fake: 0.007 \n",
            "End of epoch 411 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0001256\n",
            "(epoch: 412, iters: 44, time: 0.023, data: 0.001) G_GAN: 5.199 G_L1: 13.316 D_real: 0.014 D_fake: 0.048 \n",
            "(epoch: 412, iters: 144, time: 0.025, data: 0.001) G_GAN: 4.528 G_L1: 15.229 D_real: 0.169 D_fake: 0.032 \n",
            "(epoch: 412, iters: 244, time: 0.025, data: 0.001) G_GAN: 5.045 G_L1: 14.977 D_real: 0.052 D_fake: 0.024 \n",
            "End of epoch 412 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0001249\n",
            "(epoch: 413, iters: 48, time: 0.395, data: 0.001) G_GAN: 4.570 G_L1: 16.379 D_real: 0.002 D_fake: 0.047 \n",
            "(epoch: 413, iters: 148, time: 0.025, data: 0.001) G_GAN: 2.324 G_L1: 14.102 D_real: 0.772 D_fake: 0.029 \n",
            "(epoch: 413, iters: 248, time: 0.024, data: 0.001) G_GAN: 7.329 G_L1: 16.442 D_real: 0.005 D_fake: 0.014 \n",
            "End of epoch 413 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001243\n",
            "(epoch: 414, iters: 52, time: 0.024, data: 0.001) G_GAN: 7.135 G_L1: 17.041 D_real: 0.001 D_fake: 0.003 \n",
            "(epoch: 414, iters: 152, time: 0.485, data: 0.001) G_GAN: 6.934 G_L1: 19.385 D_real: 0.007 D_fake: 0.007 \n",
            "(epoch: 414, iters: 252, time: 0.023, data: 0.002) G_GAN: 7.308 G_L1: 15.155 D_real: 0.321 D_fake: 0.001 \n",
            "End of epoch 414 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001236\n",
            "(epoch: 415, iters: 56, time: 0.024, data: 0.001) G_GAN: 8.060 G_L1: 18.018 D_real: 0.002 D_fake: 0.661 \n",
            "(epoch: 415, iters: 156, time: 0.024, data: 0.001) G_GAN: 5.874 G_L1: 14.017 D_real: 0.002 D_fake: 0.004 \n",
            "(epoch: 415, iters: 256, time: 0.377, data: 0.002) G_GAN: 5.928 G_L1: 18.102 D_real: 0.103 D_fake: 0.037 \n",
            "saving the model at the end of epoch 415, iters 122840\n",
            "End of epoch 415 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001229\n",
            "(epoch: 416, iters: 60, time: 0.024, data: 0.001) G_GAN: 5.753 G_L1: 16.263 D_real: 0.004 D_fake: 0.026 \n",
            "(epoch: 416, iters: 160, time: 0.030, data: 0.001) G_GAN: 2.956 G_L1: 16.182 D_real: 0.026 D_fake: 0.098 \n",
            "End of epoch 416 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001223\n",
            "(epoch: 417, iters: 64, time: 0.451, data: 0.001) G_GAN: 3.748 G_L1: 13.740 D_real: 0.262 D_fake: 0.142 \n",
            "(epoch: 417, iters: 164, time: 0.023, data: 0.002) G_GAN: 5.907 G_L1: 16.807 D_real: 0.131 D_fake: 0.009 \n",
            "(epoch: 417, iters: 264, time: 0.031, data: 0.001) G_GAN: 7.759 G_L1: 17.588 D_real: 0.047 D_fake: 0.002 \n",
            "End of epoch 417 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001216\n",
            "(epoch: 418, iters: 68, time: 0.024, data: 0.001) G_GAN: 5.020 G_L1: 14.669 D_real: 0.015 D_fake: 0.062 \n",
            "(epoch: 418, iters: 168, time: 0.383, data: 0.001) G_GAN: 4.949 G_L1: 18.696 D_real: 0.001 D_fake: 0.124 \n",
            "(epoch: 418, iters: 268, time: 0.023, data: 0.001) G_GAN: 4.243 G_L1: 12.770 D_real: 0.011 D_fake: 0.083 \n",
            "End of epoch 418 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001209\n",
            "(epoch: 419, iters: 72, time: 0.026, data: 0.001) G_GAN: 9.393 G_L1: 15.255 D_real: 0.081 D_fake: 0.001 \n",
            "(epoch: 419, iters: 172, time: 0.024, data: 0.001) G_GAN: 8.931 G_L1: 19.490 D_real: 0.040 D_fake: 0.000 \n",
            "(epoch: 419, iters: 272, time: 0.433, data: 0.001) G_GAN: 5.949 G_L1: 14.068 D_real: 0.004 D_fake: 0.185 \n",
            "End of epoch 419 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001203\n",
            "(epoch: 420, iters: 76, time: 0.024, data: 0.001) G_GAN: 9.967 G_L1: 12.965 D_real: 0.000 D_fake: 1.340 \n",
            "(epoch: 420, iters: 176, time: 0.023, data: 0.001) G_GAN: 5.018 G_L1: 11.995 D_real: 0.022 D_fake: 0.048 \n",
            "(epoch: 420, iters: 276, time: 0.030, data: 0.001) G_GAN: 6.011 G_L1: 19.835 D_real: 0.001 D_fake: 0.020 \n",
            "saving the model at the end of epoch 420, iters 124320\n",
            "End of epoch 420 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001196\n",
            "(epoch: 421, iters: 80, time: 0.443, data: 0.001) G_GAN: 9.010 G_L1: 15.466 D_real: 0.082 D_fake: 0.000 \n",
            "(epoch: 421, iters: 180, time: 0.024, data: 0.001) G_GAN: 7.876 G_L1: 16.500 D_real: 0.006 D_fake: 0.005 \n",
            "(epoch: 421, iters: 280, time: 0.026, data: 0.001) G_GAN: 5.368 G_L1: 14.952 D_real: 0.182 D_fake: 0.011 \n",
            "End of epoch 421 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001189\n",
            "(epoch: 422, iters: 84, time: 0.023, data: 0.001) G_GAN: 6.446 G_L1: 16.310 D_real: 0.001 D_fake: 0.007 \n",
            "(epoch: 422, iters: 184, time: 0.400, data: 0.001) G_GAN: 7.493 G_L1: 17.074 D_real: 0.005 D_fake: 0.001 \n",
            "(epoch: 422, iters: 284, time: 0.029, data: 0.002) G_GAN: 5.732 G_L1: 14.279 D_real: 0.012 D_fake: 0.019 \n",
            "End of epoch 422 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0001183\n",
            "(epoch: 423, iters: 88, time: 0.023, data: 0.001) G_GAN: 8.070 G_L1: 17.078 D_real: 0.089 D_fake: 0.009 \n",
            "saving the latest model (epoch 423, total_iters 125000)\n",
            "(epoch: 423, iters: 188, time: 0.024, data: 0.001) G_GAN: 4.548 G_L1: 12.787 D_real: 0.002 D_fake: 0.193 \n",
            "(epoch: 423, iters: 288, time: 0.434, data: 0.001) G_GAN: 5.546 G_L1: 15.313 D_real: 0.019 D_fake: 0.351 \n",
            "End of epoch 423 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001176\n",
            "(epoch: 424, iters: 92, time: 0.023, data: 0.001) G_GAN: 6.792 G_L1: 15.337 D_real: 0.003 D_fake: 0.005 \n",
            "(epoch: 424, iters: 192, time: 0.024, data: 0.001) G_GAN: 5.834 G_L1: 18.015 D_real: 0.040 D_fake: 0.019 \n",
            "(epoch: 424, iters: 292, time: 0.028, data: 0.001) G_GAN: 6.352 G_L1: 15.322 D_real: 0.004 D_fake: 0.010 \n",
            "End of epoch 424 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001169\n",
            "(epoch: 425, iters: 96, time: 0.401, data: 0.001) G_GAN: 5.433 G_L1: 15.586 D_real: 0.000 D_fake: 0.204 \n",
            "(epoch: 425, iters: 196, time: 0.024, data: 0.001) G_GAN: 5.229 G_L1: 16.297 D_real: 0.007 D_fake: 0.035 \n",
            "(epoch: 425, iters: 296, time: 0.022, data: 0.001) G_GAN: 6.489 G_L1: 15.597 D_real: 0.296 D_fake: 0.003 \n",
            "saving the model at the end of epoch 425, iters 125800\n",
            "End of epoch 425 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0001163\n",
            "(epoch: 426, iters: 100, time: 0.023, data: 0.125) G_GAN: 6.956 G_L1: 18.517 D_real: 0.003 D_fake: 0.826 \n",
            "(epoch: 426, iters: 200, time: 0.490, data: 0.001) G_GAN: 4.569 G_L1: 14.913 D_real: 0.289 D_fake: 0.198 \n",
            "End of epoch 426 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0001156\n",
            "(epoch: 427, iters: 4, time: 0.025, data: 0.002) G_GAN: 6.204 G_L1: 16.263 D_real: 0.276 D_fake: 0.004 \n",
            "(epoch: 427, iters: 104, time: 0.023, data: 0.000) G_GAN: 5.111 G_L1: 13.542 D_real: 0.019 D_fake: 0.029 \n",
            "(epoch: 427, iters: 204, time: 0.029, data: 0.001) G_GAN: 4.484 G_L1: 17.511 D_real: 0.002 D_fake: 0.060 \n",
            "End of epoch 427 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001150\n",
            "(epoch: 428, iters: 8, time: 0.401, data: 0.001) G_GAN: 6.265 G_L1: 11.302 D_real: 0.450 D_fake: 0.002 \n",
            "(epoch: 428, iters: 108, time: 0.023, data: 0.000) G_GAN: 4.461 G_L1: 16.038 D_real: 0.002 D_fake: 0.066 \n",
            "(epoch: 428, iters: 208, time: 0.025, data: 0.001) G_GAN: 4.934 G_L1: 12.161 D_real: 0.051 D_fake: 0.040 \n",
            "End of epoch 428 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001143\n",
            "(epoch: 429, iters: 12, time: 0.032, data: 0.001) G_GAN: 6.162 G_L1: 13.896 D_real: 0.027 D_fake: 0.005 \n",
            "(epoch: 429, iters: 112, time: 0.462, data: 0.001) G_GAN: 10.876 G_L1: 27.693 D_real: 0.005 D_fake: 0.000 \n",
            "(epoch: 429, iters: 212, time: 0.023, data: 0.002) G_GAN: 7.269 G_L1: 17.010 D_real: 0.001 D_fake: 0.002 \n",
            "End of epoch 429 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001136\n",
            "(epoch: 430, iters: 16, time: 0.026, data: 0.001) G_GAN: 6.098 G_L1: 19.157 D_real: 0.214 D_fake: 0.027 \n",
            "(epoch: 430, iters: 116, time: 0.025, data: 0.001) G_GAN: 5.576 G_L1: 15.399 D_real: 0.011 D_fake: 0.015 \n",
            "(epoch: 430, iters: 216, time: 0.457, data: 0.002) G_GAN: 9.318 G_L1: 17.089 D_real: 0.000 D_fake: 0.003 \n",
            "saving the model at the end of epoch 430, iters 127280\n",
            "End of epoch 430 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001130\n",
            "(epoch: 431, iters: 20, time: 0.023, data: 0.002) G_GAN: 9.177 G_L1: 21.842 D_real: 0.015 D_fake: 0.001 \n",
            "(epoch: 431, iters: 120, time: 0.024, data: 0.001) G_GAN: 8.024 G_L1: 17.458 D_real: 0.003 D_fake: 0.001 \n",
            "(epoch: 431, iters: 220, time: 0.042, data: 0.001) G_GAN: 5.555 G_L1: 18.332 D_real: 0.000 D_fake: 0.255 \n",
            "End of epoch 431 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001123\n",
            "(epoch: 432, iters: 24, time: 0.402, data: 0.002) G_GAN: 6.397 G_L1: 18.588 D_real: 0.001 D_fake: 0.013 \n",
            "(epoch: 432, iters: 124, time: 0.024, data: 0.001) G_GAN: 4.927 G_L1: 14.987 D_real: 0.057 D_fake: 0.169 \n",
            "(epoch: 432, iters: 224, time: 0.033, data: 0.001) G_GAN: 5.263 G_L1: 15.329 D_real: 0.047 D_fake: 0.021 \n",
            "End of epoch 432 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001116\n",
            "(epoch: 433, iters: 28, time: 0.024, data: 0.001) G_GAN: 5.320 G_L1: 16.169 D_real: 0.007 D_fake: 0.061 \n",
            "(epoch: 433, iters: 128, time: 0.436, data: 0.001) G_GAN: 8.337 G_L1: 18.387 D_real: 0.001 D_fake: 0.001 \n",
            "(epoch: 433, iters: 228, time: 0.023, data: 0.001) G_GAN: 4.958 G_L1: 13.749 D_real: 0.228 D_fake: 0.224 \n",
            "End of epoch 433 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001110\n",
            "(epoch: 434, iters: 32, time: 0.023, data: 0.001) G_GAN: 5.342 G_L1: 14.264 D_real: 0.018 D_fake: 0.135 \n",
            "(epoch: 434, iters: 132, time: 0.024, data: 0.002) G_GAN: 3.064 G_L1: 14.903 D_real: 0.250 D_fake: 0.100 \n",
            "(epoch: 434, iters: 232, time: 0.420, data: 0.001) G_GAN: 10.418 G_L1: 19.074 D_real: 0.001 D_fake: 0.000 \n",
            "End of epoch 434 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001103\n",
            "(epoch: 435, iters: 36, time: 0.024, data: 0.001) G_GAN: 7.694 G_L1: 13.585 D_real: 0.033 D_fake: 0.001 \n",
            "(epoch: 435, iters: 136, time: 0.030, data: 0.001) G_GAN: 5.445 G_L1: 13.841 D_real: 0.071 D_fake: 0.020 \n",
            "(epoch: 435, iters: 236, time: 0.025, data: 0.001) G_GAN: 7.572 G_L1: 12.568 D_real: 0.003 D_fake: 0.003 \n",
            "saving the model at the end of epoch 435, iters 128760\n",
            "End of epoch 435 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001096\n",
            "(epoch: 436, iters: 40, time: 0.451, data: 0.002) G_GAN: 5.361 G_L1: 16.812 D_real: 0.004 D_fake: 0.082 \n",
            "(epoch: 436, iters: 140, time: 0.024, data: 0.001) G_GAN: 5.019 G_L1: 14.070 D_real: 0.003 D_fake: 0.021 \n",
            "(epoch: 436, iters: 240, time: 0.028, data: 0.004) G_GAN: 4.311 G_L1: 15.674 D_real: 0.016 D_fake: 0.100 \n",
            "End of epoch 436 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0001090\n",
            "(epoch: 437, iters: 44, time: 0.029, data: 0.002) G_GAN: 7.754 G_L1: 15.277 D_real: 0.122 D_fake: 0.002 \n",
            "(epoch: 437, iters: 144, time: 0.457, data: 0.001) G_GAN: 4.676 G_L1: 16.908 D_real: 0.019 D_fake: 0.084 \n",
            "(epoch: 437, iters: 244, time: 0.023, data: 0.002) G_GAN: 7.072 G_L1: 16.347 D_real: 0.033 D_fake: 0.009 \n",
            "End of epoch 437 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001083\n",
            "(epoch: 438, iters: 48, time: 0.023, data: 0.001) G_GAN: 4.551 G_L1: 16.857 D_real: 0.076 D_fake: 0.071 \n",
            "(epoch: 438, iters: 148, time: 0.025, data: 0.002) G_GAN: 5.230 G_L1: 14.726 D_real: 0.001 D_fake: 0.151 \n",
            "(epoch: 438, iters: 248, time: 0.495, data: 0.001) G_GAN: 5.921 G_L1: 14.302 D_real: 0.007 D_fake: 0.018 \n",
            "End of epoch 438 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001076\n",
            "(epoch: 439, iters: 52, time: 0.024, data: 0.002) G_GAN: 5.177 G_L1: 13.375 D_real: 0.026 D_fake: 0.018 \n",
            "(epoch: 439, iters: 152, time: 0.025, data: 0.001) G_GAN: 5.947 G_L1: 19.213 D_real: 0.276 D_fake: 0.020 \n",
            "(epoch: 439, iters: 252, time: 0.025, data: 0.002) G_GAN: 7.768 G_L1: 13.432 D_real: 0.960 D_fake: 0.000 \n",
            "End of epoch 439 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001070\n",
            "(epoch: 440, iters: 56, time: 0.452, data: 0.002) G_GAN: 7.777 G_L1: 15.741 D_real: 0.001 D_fake: 0.757 \n",
            "saving the latest model (epoch 440, total_iters 130000)\n",
            "(epoch: 440, iters: 156, time: 0.028, data: 0.002) G_GAN: 4.153 G_L1: 13.012 D_real: 0.899 D_fake: 0.002 \n",
            "(epoch: 440, iters: 256, time: 0.025, data: 0.004) G_GAN: 5.280 G_L1: 15.737 D_real: 0.001 D_fake: 0.054 \n",
            "saving the model at the end of epoch 440, iters 130240\n",
            "End of epoch 440 / 600 \t Time Taken: 10 sec\n",
            "learning rate = 0.0001063\n",
            "(epoch: 441, iters: 60, time: 0.029, data: 0.001) G_GAN: 4.757 G_L1: 16.035 D_real: 0.053 D_fake: 0.017 \n",
            "(epoch: 441, iters: 160, time: 0.424, data: 0.001) G_GAN: 4.669 G_L1: 15.111 D_real: 0.061 D_fake: 0.046 \n",
            "(epoch: 441, iters: 260, time: 0.024, data: 0.002) G_GAN: 5.368 G_L1: 15.466 D_real: 0.004 D_fake: 0.160 \n",
            "End of epoch 441 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0001056\n",
            "(epoch: 442, iters: 64, time: 0.023, data: 0.001) G_GAN: 5.444 G_L1: 17.871 D_real: 0.002 D_fake: 0.027 \n",
            "(epoch: 442, iters: 164, time: 0.024, data: 0.001) G_GAN: 4.031 G_L1: 15.734 D_real: 0.183 D_fake: 0.121 \n",
            "(epoch: 442, iters: 264, time: 0.463, data: 0.001) G_GAN: 7.012 G_L1: 17.562 D_real: 0.030 D_fake: 0.101 \n",
            "End of epoch 442 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001050\n",
            "(epoch: 443, iters: 68, time: 0.024, data: 0.002) G_GAN: 6.562 G_L1: 16.066 D_real: 0.047 D_fake: 0.002 \n",
            "(epoch: 443, iters: 168, time: 0.029, data: 0.002) G_GAN: 7.292 G_L1: 18.433 D_real: 0.160 D_fake: 0.002 \n",
            "(epoch: 443, iters: 268, time: 0.024, data: 0.001) G_GAN: 5.932 G_L1: 17.803 D_real: 0.005 D_fake: 0.014 \n",
            "End of epoch 443 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001043\n",
            "(epoch: 444, iters: 72, time: 0.428, data: 0.001) G_GAN: 9.456 G_L1: 13.739 D_real: 0.013 D_fake: 0.000 \n",
            "(epoch: 444, iters: 172, time: 0.024, data: 0.002) G_GAN: 4.355 G_L1: 19.348 D_real: 0.111 D_fake: 0.044 \n",
            "(epoch: 444, iters: 272, time: 0.030, data: 0.001) G_GAN: 5.657 G_L1: 16.040 D_real: 0.019 D_fake: 0.027 \n",
            "End of epoch 444 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001037\n",
            "(epoch: 445, iters: 76, time: 0.024, data: 0.001) G_GAN: 9.533 G_L1: 25.912 D_real: 0.001 D_fake: 0.000 \n",
            "(epoch: 445, iters: 176, time: 0.466, data: 0.001) G_GAN: 6.626 G_L1: 15.762 D_real: 0.007 D_fake: 0.006 \n",
            "(epoch: 445, iters: 276, time: 0.024, data: 0.001) G_GAN: 5.651 G_L1: 15.776 D_real: 0.002 D_fake: 0.031 \n",
            "saving the model at the end of epoch 445, iters 131720\n",
            "End of epoch 445 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0001030\n",
            "(epoch: 446, iters: 80, time: 0.024, data: 0.001) G_GAN: 8.221 G_L1: 15.394 D_real: 0.039 D_fake: 0.001 \n",
            "(epoch: 446, iters: 180, time: 0.024, data: 0.001) G_GAN: 5.250 G_L1: 16.223 D_real: 0.127 D_fake: 0.015 \n",
            "(epoch: 446, iters: 280, time: 0.455, data: 0.001) G_GAN: 5.246 G_L1: 17.107 D_real: 0.000 D_fake: 0.018 \n",
            "End of epoch 446 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0001023\n",
            "(epoch: 447, iters: 84, time: 0.029, data: 0.001) G_GAN: 5.541 G_L1: 17.051 D_real: 0.008 D_fake: 0.021 \n",
            "(epoch: 447, iters: 184, time: 0.024, data: 0.001) G_GAN: 6.316 G_L1: 17.152 D_real: 0.003 D_fake: 0.006 \n",
            "(epoch: 447, iters: 284, time: 0.023, data: 0.002) G_GAN: 4.318 G_L1: 14.004 D_real: 0.290 D_fake: 0.044 \n",
            "End of epoch 447 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001017\n",
            "(epoch: 448, iters: 88, time: 0.423, data: 0.001) G_GAN: 5.901 G_L1: 12.850 D_real: 0.000 D_fake: 0.083 \n",
            "(epoch: 448, iters: 188, time: 0.023, data: 0.001) G_GAN: 7.094 G_L1: 15.629 D_real: 0.011 D_fake: 0.012 \n",
            "(epoch: 448, iters: 288, time: 0.024, data: 0.001) G_GAN: 6.755 G_L1: 17.333 D_real: 0.005 D_fake: 0.022 \n",
            "End of epoch 448 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001010\n",
            "(epoch: 449, iters: 92, time: 0.023, data: 0.002) G_GAN: 5.584 G_L1: 16.356 D_real: 0.003 D_fake: 0.015 \n",
            "(epoch: 449, iters: 192, time: 0.490, data: 0.002) G_GAN: 4.846 G_L1: 12.594 D_real: 0.036 D_fake: 0.016 \n",
            "(epoch: 449, iters: 292, time: 0.023, data: 0.002) G_GAN: 6.566 G_L1: 15.522 D_real: 0.030 D_fake: 0.006 \n",
            "End of epoch 449 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0001003\n",
            "(epoch: 450, iters: 96, time: 0.024, data: 0.001) G_GAN: 7.312 G_L1: 14.108 D_real: 0.014 D_fake: 0.002 \n",
            "(epoch: 450, iters: 196, time: 0.024, data: 0.001) G_GAN: 1.475 G_L1: 13.087 D_real: 0.431 D_fake: 0.093 \n",
            "(epoch: 450, iters: 296, time: 0.410, data: 0.001) G_GAN: 4.885 G_L1: 18.491 D_real: 0.044 D_fake: 0.033 \n",
            "saving the model at the end of epoch 450, iters 133200\n",
            "End of epoch 450 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000997\n",
            "(epoch: 451, iters: 100, time: 0.023, data: 0.112) G_GAN: 5.818 G_L1: 19.928 D_real: 0.068 D_fake: 0.011 \n",
            "(epoch: 451, iters: 200, time: 0.024, data: 0.001) G_GAN: 5.216 G_L1: 15.392 D_real: 0.009 D_fake: 0.217 \n",
            "End of epoch 451 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000990\n",
            "(epoch: 452, iters: 4, time: 0.039, data: 0.002) G_GAN: 5.683 G_L1: 16.558 D_real: 0.002 D_fake: 0.046 \n",
            "(epoch: 452, iters: 104, time: 0.448, data: 0.003) G_GAN: 7.223 G_L1: 14.555 D_real: 0.003 D_fake: 0.003 \n",
            "(epoch: 452, iters: 204, time: 0.024, data: 0.002) G_GAN: 5.422 G_L1: 17.529 D_real: 0.017 D_fake: 0.069 \n",
            "End of epoch 452 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0000983\n",
            "(epoch: 453, iters: 8, time: 0.023, data: 0.001) G_GAN: 5.162 G_L1: 15.980 D_real: 0.075 D_fake: 0.016 \n",
            "(epoch: 453, iters: 108, time: 0.023, data: 0.001) G_GAN: 5.850 G_L1: 16.271 D_real: 0.085 D_fake: 0.007 \n",
            "(epoch: 453, iters: 208, time: 0.472, data: 0.001) G_GAN: 5.005 G_L1: 16.205 D_real: 0.010 D_fake: 0.028 \n",
            "End of epoch 453 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000977\n",
            "(epoch: 454, iters: 12, time: 0.030, data: 0.001) G_GAN: 5.009 G_L1: 17.069 D_real: 0.011 D_fake: 0.038 \n",
            "(epoch: 454, iters: 112, time: 0.024, data: 0.001) G_GAN: 7.128 G_L1: 14.956 D_real: 0.023 D_fake: 0.022 \n",
            "(epoch: 454, iters: 212, time: 0.023, data: 0.001) G_GAN: 7.295 G_L1: 16.097 D_real: 0.001 D_fake: 0.002 \n",
            "End of epoch 454 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0000970\n",
            "(epoch: 455, iters: 16, time: 0.427, data: 0.001) G_GAN: 6.426 G_L1: 13.497 D_real: 0.010 D_fake: 0.010 \n",
            "(epoch: 455, iters: 116, time: 0.023, data: 0.001) G_GAN: 7.654 G_L1: 15.716 D_real: 0.001 D_fake: 0.002 \n",
            "(epoch: 455, iters: 216, time: 0.023, data: 0.001) G_GAN: 11.075 G_L1: 21.749 D_real: 0.002 D_fake: 0.000 \n",
            "saving the model at the end of epoch 455, iters 134680\n",
            "End of epoch 455 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000963\n",
            "(epoch: 456, iters: 20, time: 0.023, data: 0.001) G_GAN: 8.115 G_L1: 13.282 D_real: 0.004 D_fake: 0.008 \n",
            "(epoch: 456, iters: 120, time: 0.497, data: 0.001) G_GAN: 5.789 G_L1: 16.803 D_real: 0.018 D_fake: 0.024 \n",
            "(epoch: 456, iters: 220, time: 0.024, data: 0.002) G_GAN: 8.411 G_L1: 18.197 D_real: 0.035 D_fake: 0.001 \n",
            "End of epoch 456 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0000957\n",
            "(epoch: 457, iters: 24, time: 0.025, data: 0.001) G_GAN: 7.376 G_L1: 14.773 D_real: 0.069 D_fake: 0.004 \n",
            "saving the latest model (epoch 457, total_iters 135000)\n",
            "(epoch: 457, iters: 124, time: 0.023, data: 0.001) G_GAN: 7.770 G_L1: 18.468 D_real: 0.051 D_fake: 0.003 \n",
            "(epoch: 457, iters: 224, time: 0.558, data: 0.001) G_GAN: 6.306 G_L1: 18.370 D_real: 0.013 D_fake: 0.595 \n",
            "End of epoch 457 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000950\n",
            "(epoch: 458, iters: 28, time: 0.023, data: 0.002) G_GAN: 7.523 G_L1: 17.649 D_real: 0.005 D_fake: 0.005 \n",
            "(epoch: 458, iters: 128, time: 0.023, data: 0.001) G_GAN: 5.874 G_L1: 15.202 D_real: 0.004 D_fake: 0.096 \n",
            "(epoch: 458, iters: 228, time: 0.024, data: 0.002) G_GAN: 7.186 G_L1: 19.375 D_real: 0.002 D_fake: 0.006 \n",
            "End of epoch 458 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0000944\n",
            "(epoch: 459, iters: 32, time: 0.455, data: 0.001) G_GAN: 6.947 G_L1: 14.795 D_real: 0.042 D_fake: 0.005 \n",
            "(epoch: 459, iters: 132, time: 0.023, data: 0.001) G_GAN: 7.573 G_L1: 17.289 D_real: 0.002 D_fake: 0.006 \n",
            "(epoch: 459, iters: 232, time: 0.024, data: 0.001) G_GAN: 6.713 G_L1: 15.711 D_real: 0.078 D_fake: 0.009 \n",
            "End of epoch 459 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000937\n",
            "(epoch: 460, iters: 36, time: 0.025, data: 0.001) G_GAN: 5.593 G_L1: 16.159 D_real: 0.152 D_fake: 0.016 \n",
            "(epoch: 460, iters: 136, time: 0.467, data: 0.001) G_GAN: 5.769 G_L1: 14.052 D_real: 0.002 D_fake: 0.019 \n",
            "(epoch: 460, iters: 236, time: 0.023, data: 0.002) G_GAN: 7.853 G_L1: 14.287 D_real: 0.003 D_fake: 0.002 \n",
            "saving the model at the end of epoch 460, iters 136160\n",
            "End of epoch 460 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000930\n",
            "(epoch: 461, iters: 40, time: 0.023, data: 0.002) G_GAN: 5.829 G_L1: 13.788 D_real: 0.017 D_fake: 0.014 \n",
            "(epoch: 461, iters: 140, time: 0.025, data: 0.002) G_GAN: 6.983 G_L1: 15.180 D_real: 0.001 D_fake: 0.011 \n",
            "(epoch: 461, iters: 240, time: 0.605, data: 0.001) G_GAN: 6.919 G_L1: 15.784 D_real: 0.010 D_fake: 0.006 \n",
            "End of epoch 461 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000924\n",
            "(epoch: 462, iters: 44, time: 0.028, data: 0.006) G_GAN: 5.559 G_L1: 13.379 D_real: 0.002 D_fake: 0.021 \n",
            "(epoch: 462, iters: 144, time: 0.025, data: 0.001) G_GAN: 10.401 G_L1: 21.585 D_real: 0.014 D_fake: 0.001 \n",
            "(epoch: 462, iters: 244, time: 0.023, data: 0.001) G_GAN: 4.977 G_L1: 15.051 D_real: 0.020 D_fake: 0.128 \n",
            "End of epoch 462 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000917\n",
            "(epoch: 463, iters: 48, time: 0.478, data: 0.001) G_GAN: 5.983 G_L1: 15.093 D_real: 0.069 D_fake: 0.026 \n",
            "(epoch: 463, iters: 148, time: 0.029, data: 0.002) G_GAN: 4.964 G_L1: 19.124 D_real: 0.004 D_fake: 0.095 \n",
            "(epoch: 463, iters: 248, time: 0.025, data: 0.001) G_GAN: 8.679 G_L1: 14.266 D_real: 0.002 D_fake: 0.002 \n",
            "End of epoch 463 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000910\n",
            "(epoch: 464, iters: 52, time: 0.024, data: 0.001) G_GAN: 5.203 G_L1: 14.918 D_real: 0.015 D_fake: 0.088 \n",
            "(epoch: 464, iters: 152, time: 0.435, data: 0.001) G_GAN: 4.470 G_L1: 16.821 D_real: 0.153 D_fake: 0.029 \n",
            "(epoch: 464, iters: 252, time: 0.024, data: 0.002) G_GAN: 7.106 G_L1: 14.124 D_real: 0.039 D_fake: 0.005 \n",
            "End of epoch 464 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000904\n",
            "(epoch: 465, iters: 56, time: 0.028, data: 0.002) G_GAN: 7.518 G_L1: 17.433 D_real: 0.000 D_fake: 0.003 \n",
            "(epoch: 465, iters: 156, time: 0.023, data: 0.001) G_GAN: 4.218 G_L1: 14.967 D_real: 0.004 D_fake: 0.077 \n",
            "(epoch: 465, iters: 256, time: 0.482, data: 0.001) G_GAN: 7.928 G_L1: 22.861 D_real: 0.006 D_fake: 0.004 \n",
            "saving the model at the end of epoch 465, iters 137640\n",
            "End of epoch 465 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0000897\n",
            "(epoch: 466, iters: 60, time: 0.023, data: 0.001) G_GAN: 12.252 G_L1: 13.307 D_real: 0.005 D_fake: 2.717 \n",
            "(epoch: 466, iters: 160, time: 0.023, data: 0.001) G_GAN: 6.463 G_L1: 19.548 D_real: 0.012 D_fake: 0.008 \n",
            "(epoch: 466, iters: 260, time: 0.041, data: 0.001) G_GAN: 4.973 G_L1: 15.510 D_real: 0.208 D_fake: 0.308 \n",
            "End of epoch 466 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000890\n",
            "(epoch: 467, iters: 64, time: 0.461, data: 0.003) G_GAN: 6.005 G_L1: 12.699 D_real: 0.001 D_fake: 0.007 \n",
            "(epoch: 467, iters: 164, time: 0.023, data: 0.001) G_GAN: 5.399 G_L1: 13.844 D_real: 0.026 D_fake: 0.042 \n",
            "(epoch: 467, iters: 264, time: 0.025, data: 0.001) G_GAN: 4.708 G_L1: 13.808 D_real: 0.370 D_fake: 0.008 \n",
            "End of epoch 467 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000884\n",
            "(epoch: 468, iters: 68, time: 0.023, data: 0.001) G_GAN: 8.388 G_L1: 17.956 D_real: 0.000 D_fake: 0.001 \n",
            "(epoch: 468, iters: 168, time: 0.421, data: 0.001) G_GAN: 5.255 G_L1: 17.680 D_real: 0.001 D_fake: 0.028 \n",
            "(epoch: 468, iters: 268, time: 0.024, data: 0.001) G_GAN: 7.761 G_L1: 16.335 D_real: 0.000 D_fake: 0.911 \n",
            "End of epoch 468 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000877\n",
            "(epoch: 469, iters: 72, time: 0.027, data: 0.001) G_GAN: 9.126 G_L1: 17.798 D_real: 0.005 D_fake: 0.000 \n",
            "(epoch: 469, iters: 172, time: 0.023, data: 0.001) G_GAN: 4.821 G_L1: 14.067 D_real: 0.465 D_fake: 0.010 \n",
            "(epoch: 469, iters: 272, time: 0.611, data: 0.001) G_GAN: 6.227 G_L1: 16.501 D_real: 0.020 D_fake: 0.006 \n",
            "End of epoch 469 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000870\n",
            "(epoch: 470, iters: 76, time: 0.024, data: 0.001) G_GAN: 10.627 G_L1: 13.506 D_real: 0.154 D_fake: 0.000 \n",
            "(epoch: 470, iters: 176, time: 0.023, data: 0.001) G_GAN: 8.870 G_L1: 13.983 D_real: 0.060 D_fake: 0.000 \n",
            "(epoch: 470, iters: 276, time: 0.023, data: 0.001) G_GAN: 6.523 G_L1: 15.637 D_real: 0.001 D_fake: 0.012 \n",
            "saving the model at the end of epoch 470, iters 139120\n",
            "End of epoch 470 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000864\n",
            "(epoch: 471, iters: 80, time: 0.473, data: 0.001) G_GAN: 6.197 G_L1: 14.879 D_real: 0.075 D_fake: 0.006 \n",
            "(epoch: 471, iters: 180, time: 0.024, data: 0.001) G_GAN: 6.116 G_L1: 15.799 D_real: 0.020 D_fake: 0.007 \n",
            "(epoch: 471, iters: 280, time: 0.024, data: 0.001) G_GAN: 6.997 G_L1: 17.203 D_real: 0.004 D_fake: 0.053 \n",
            "End of epoch 471 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000857\n",
            "(epoch: 472, iters: 84, time: 0.023, data: 0.001) G_GAN: 6.106 G_L1: 15.569 D_real: 0.028 D_fake: 0.008 \n",
            "(epoch: 472, iters: 184, time: 0.441, data: 0.002) G_GAN: 10.491 G_L1: 18.983 D_real: 0.133 D_fake: 0.000 \n",
            "(epoch: 472, iters: 284, time: 0.024, data: 0.001) G_GAN: 3.233 G_L1: 15.965 D_real: 0.363 D_fake: 0.099 \n",
            "End of epoch 472 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000850\n",
            "(epoch: 473, iters: 88, time: 0.024, data: 0.001) G_GAN: 10.949 G_L1: 19.735 D_real: 0.033 D_fake: 0.000 \n",
            "(epoch: 473, iters: 188, time: 0.024, data: 0.001) G_GAN: 5.098 G_L1: 16.464 D_real: 0.008 D_fake: 0.037 \n",
            "(epoch: 473, iters: 288, time: 0.452, data: 0.001) G_GAN: 4.680 G_L1: 15.931 D_real: 0.035 D_fake: 0.074 \n",
            "saving the latest model (epoch 473, total_iters 140000)\n",
            "End of epoch 473 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000844\n",
            "(epoch: 474, iters: 92, time: 0.023, data: 0.001) G_GAN: 5.974 G_L1: 16.545 D_real: 0.001 D_fake: 0.091 \n",
            "(epoch: 474, iters: 192, time: 0.023, data: 0.001) G_GAN: 6.741 G_L1: 17.905 D_real: 0.001 D_fake: 0.011 \n",
            "(epoch: 474, iters: 292, time: 0.027, data: 0.001) G_GAN: 6.821 G_L1: 11.887 D_real: 0.040 D_fake: 0.003 \n",
            "End of epoch 474 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000837\n",
            "(epoch: 475, iters: 96, time: 0.460, data: 0.001) G_GAN: 7.770 G_L1: 17.089 D_real: 0.103 D_fake: 0.001 \n",
            "(epoch: 475, iters: 196, time: 0.028, data: 0.001) G_GAN: 4.573 G_L1: 16.728 D_real: 0.236 D_fake: 0.024 \n",
            "(epoch: 475, iters: 296, time: 0.025, data: 0.002) G_GAN: 8.807 G_L1: 19.327 D_real: 0.054 D_fake: 0.001 \n",
            "saving the model at the end of epoch 475, iters 140600\n",
            "End of epoch 475 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0000831\n",
            "(epoch: 476, iters: 100, time: 0.024, data: 0.129) G_GAN: 9.060 G_L1: 23.520 D_real: 0.000 D_fake: 0.001 \n",
            "(epoch: 476, iters: 200, time: 0.583, data: 0.001) G_GAN: 7.176 G_L1: 14.485 D_real: 0.431 D_fake: 0.002 \n",
            "End of epoch 476 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000824\n",
            "(epoch: 477, iters: 4, time: 0.038, data: 0.001) G_GAN: 11.415 G_L1: 16.252 D_real: 0.035 D_fake: 0.000 \n",
            "(epoch: 477, iters: 104, time: 0.024, data: 0.000) G_GAN: 6.875 G_L1: 16.179 D_real: 0.000 D_fake: 0.006 \n",
            "(epoch: 477, iters: 204, time: 0.024, data: 0.001) G_GAN: 7.422 G_L1: 14.743 D_real: 0.112 D_fake: 0.006 \n",
            "End of epoch 477 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000817\n",
            "(epoch: 478, iters: 8, time: 0.482, data: 0.001) G_GAN: 5.798 G_L1: 17.869 D_real: 0.009 D_fake: 0.008 \n",
            "(epoch: 478, iters: 108, time: 0.024, data: 0.001) G_GAN: 7.162 G_L1: 16.395 D_real: 0.005 D_fake: 0.009 \n",
            "(epoch: 478, iters: 208, time: 0.029, data: 0.001) G_GAN: 6.543 G_L1: 16.737 D_real: 0.019 D_fake: 0.009 \n",
            "End of epoch 478 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000811\n",
            "(epoch: 479, iters: 12, time: 0.023, data: 0.001) G_GAN: 9.308 G_L1: 12.785 D_real: 0.005 D_fake: 0.003 \n",
            "(epoch: 479, iters: 112, time: 0.432, data: 0.001) G_GAN: 5.219 G_L1: 17.051 D_real: 0.012 D_fake: 0.028 \n",
            "(epoch: 479, iters: 212, time: 0.023, data: 0.002) G_GAN: 4.585 G_L1: 14.049 D_real: 0.004 D_fake: 0.098 \n",
            "End of epoch 479 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000804\n",
            "(epoch: 480, iters: 16, time: 0.023, data: 0.001) G_GAN: 6.191 G_L1: 13.074 D_real: 0.017 D_fake: 0.018 \n",
            "(epoch: 480, iters: 116, time: 0.028, data: 0.001) G_GAN: 6.462 G_L1: 14.653 D_real: 0.073 D_fake: 0.013 \n",
            "(epoch: 480, iters: 216, time: 0.479, data: 0.002) G_GAN: 7.661 G_L1: 15.687 D_real: 0.040 D_fake: 0.002 \n",
            "saving the model at the end of epoch 480, iters 142080\n",
            "End of epoch 480 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000797\n",
            "(epoch: 481, iters: 20, time: 0.023, data: 0.002) G_GAN: 4.451 G_L1: 15.618 D_real: 0.021 D_fake: 0.078 \n",
            "(epoch: 481, iters: 120, time: 0.027, data: 0.001) G_GAN: 8.252 G_L1: 15.965 D_real: 0.089 D_fake: 0.001 \n",
            "(epoch: 481, iters: 220, time: 0.024, data: 0.001) G_GAN: 6.840 G_L1: 14.322 D_real: 0.026 D_fake: 0.004 \n",
            "End of epoch 481 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000791\n",
            "(epoch: 482, iters: 24, time: 0.507, data: 0.001) G_GAN: 9.379 G_L1: 15.893 D_real: 0.009 D_fake: 0.002 \n",
            "(epoch: 482, iters: 124, time: 0.024, data: 0.001) G_GAN: 8.477 G_L1: 16.979 D_real: 0.058 D_fake: 0.002 \n",
            "(epoch: 482, iters: 224, time: 0.023, data: 0.001) G_GAN: 4.709 G_L1: 13.385 D_real: 0.035 D_fake: 0.143 \n",
            "End of epoch 482 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000784\n",
            "(epoch: 483, iters: 28, time: 0.024, data: 0.001) G_GAN: 4.382 G_L1: 12.624 D_real: 0.003 D_fake: 0.100 \n",
            "(epoch: 483, iters: 128, time: 0.420, data: 0.001) G_GAN: 4.530 G_L1: 17.651 D_real: 0.032 D_fake: 0.046 \n",
            "(epoch: 483, iters: 228, time: 0.023, data: 0.001) G_GAN: 8.390 G_L1: 13.077 D_real: 0.044 D_fake: 0.001 \n",
            "End of epoch 483 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000777\n",
            "(epoch: 484, iters: 32, time: 0.030, data: 0.001) G_GAN: 7.740 G_L1: 15.241 D_real: 0.008 D_fake: 0.010 \n",
            "(epoch: 484, iters: 132, time: 0.025, data: 0.001) G_GAN: 6.650 G_L1: 14.012 D_real: 0.107 D_fake: 0.002 \n",
            "(epoch: 484, iters: 232, time: 0.503, data: 0.001) G_GAN: 10.877 G_L1: 13.345 D_real: 0.139 D_fake: 0.000 \n",
            "End of epoch 484 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000771\n",
            "(epoch: 485, iters: 36, time: 0.024, data: 0.002) G_GAN: 5.401 G_L1: 15.291 D_real: 0.013 D_fake: 0.010 \n",
            "(epoch: 485, iters: 136, time: 0.042, data: 0.001) G_GAN: 6.452 G_L1: 14.274 D_real: 0.009 D_fake: 0.014 \n",
            "(epoch: 485, iters: 236, time: 0.030, data: 0.001) G_GAN: 8.113 G_L1: 16.759 D_real: 0.017 D_fake: 0.003 \n",
            "saving the model at the end of epoch 485, iters 143560\n",
            "End of epoch 485 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000764\n",
            "(epoch: 486, iters: 40, time: 0.534, data: 0.002) G_GAN: 5.840 G_L1: 14.652 D_real: 0.010 D_fake: 0.011 \n",
            "(epoch: 486, iters: 140, time: 0.029, data: 0.001) G_GAN: 5.402 G_L1: 14.721 D_real: 0.023 D_fake: 0.303 \n",
            "(epoch: 486, iters: 240, time: 0.023, data: 0.001) G_GAN: 5.357 G_L1: 16.058 D_real: 0.022 D_fake: 0.062 \n",
            "End of epoch 486 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0000757\n",
            "(epoch: 487, iters: 44, time: 0.023, data: 0.001) G_GAN: 7.448 G_L1: 14.279 D_real: 0.050 D_fake: 0.006 \n",
            "(epoch: 487, iters: 144, time: 0.429, data: 0.001) G_GAN: 9.002 G_L1: 15.296 D_real: 0.004 D_fake: 0.001 \n",
            "(epoch: 487, iters: 244, time: 0.023, data: 0.001) G_GAN: 5.884 G_L1: 12.495 D_real: 0.229 D_fake: 0.004 \n",
            "End of epoch 487 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000751\n",
            "(epoch: 488, iters: 48, time: 0.024, data: 0.001) G_GAN: 5.519 G_L1: 13.326 D_real: 0.009 D_fake: 0.018 \n",
            "(epoch: 488, iters: 148, time: 0.024, data: 0.001) G_GAN: 6.062 G_L1: 24.296 D_real: 0.000 D_fake: 0.014 \n",
            "(epoch: 488, iters: 248, time: 0.473, data: 0.001) G_GAN: 9.993 G_L1: 15.349 D_real: 0.136 D_fake: 0.001 \n",
            "End of epoch 488 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000744\n",
            "(epoch: 489, iters: 52, time: 0.023, data: 0.001) G_GAN: 9.725 G_L1: 14.062 D_real: 0.001 D_fake: 0.000 \n",
            "(epoch: 489, iters: 152, time: 0.030, data: 0.001) G_GAN: 7.554 G_L1: 13.751 D_real: 1.030 D_fake: 0.000 \n",
            "(epoch: 489, iters: 252, time: 0.023, data: 0.001) G_GAN: 7.659 G_L1: 16.808 D_real: 0.010 D_fake: 0.628 \n",
            "End of epoch 489 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0000738\n",
            "(epoch: 490, iters: 56, time: 0.483, data: 0.001) G_GAN: 9.937 G_L1: 16.043 D_real: 0.198 D_fake: 0.000 \n",
            "(epoch: 490, iters: 156, time: 0.023, data: 0.001) G_GAN: 7.851 G_L1: 15.988 D_real: 0.022 D_fake: 0.001 \n",
            "(epoch: 490, iters: 256, time: 0.023, data: 0.001) G_GAN: 6.359 G_L1: 14.609 D_real: 0.029 D_fake: 0.017 \n",
            "saving the latest model (epoch 490, total_iters 145000)\n",
            "saving the model at the end of epoch 490, iters 145040\n",
            "End of epoch 490 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000731\n",
            "(epoch: 491, iters: 60, time: 0.023, data: 0.001) G_GAN: 11.000 G_L1: 27.130 D_real: 0.001 D_fake: 0.000 \n",
            "(epoch: 491, iters: 160, time: 0.573, data: 0.001) G_GAN: 6.443 G_L1: 15.644 D_real: 0.008 D_fake: 0.007 \n",
            "(epoch: 491, iters: 260, time: 0.024, data: 0.001) G_GAN: 7.542 G_L1: 15.328 D_real: 0.022 D_fake: 0.011 \n",
            "End of epoch 491 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000724\n",
            "(epoch: 492, iters: 64, time: 0.029, data: 0.001) G_GAN: 5.270 G_L1: 15.267 D_real: 0.032 D_fake: 0.018 \n",
            "(epoch: 492, iters: 164, time: 0.024, data: 0.001) G_GAN: 7.827 G_L1: 12.627 D_real: 0.028 D_fake: 0.003 \n",
            "(epoch: 492, iters: 264, time: 0.486, data: 0.001) G_GAN: 7.328 G_L1: 15.497 D_real: 0.006 D_fake: 0.009 \n",
            "End of epoch 492 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000718\n",
            "(epoch: 493, iters: 68, time: 0.023, data: 0.001) G_GAN: 6.679 G_L1: 15.067 D_real: 0.030 D_fake: 0.005 \n",
            "(epoch: 493, iters: 168, time: 0.023, data: 0.001) G_GAN: 5.541 G_L1: 13.316 D_real: 0.023 D_fake: 0.031 \n",
            "(epoch: 493, iters: 268, time: 0.030, data: 0.001) G_GAN: 10.547 G_L1: 19.550 D_real: 0.016 D_fake: 0.000 \n",
            "End of epoch 493 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000711\n",
            "(epoch: 494, iters: 72, time: 0.444, data: 0.001) G_GAN: 8.550 G_L1: 14.737 D_real: 0.006 D_fake: 0.001 \n",
            "(epoch: 494, iters: 172, time: 0.024, data: 0.002) G_GAN: 11.479 G_L1: 18.589 D_real: 0.046 D_fake: 0.000 \n",
            "(epoch: 494, iters: 272, time: 0.022, data: 0.001) G_GAN: 5.201 G_L1: 16.566 D_real: 0.003 D_fake: 0.036 \n",
            "End of epoch 494 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000704\n",
            "(epoch: 495, iters: 76, time: 0.023, data: 0.001) G_GAN: 8.421 G_L1: 15.834 D_real: 0.000 D_fake: 0.002 \n",
            "(epoch: 495, iters: 176, time: 0.475, data: 0.001) G_GAN: 5.301 G_L1: 15.901 D_real: 0.000 D_fake: 0.030 \n",
            "(epoch: 495, iters: 276, time: 0.023, data: 0.001) G_GAN: 5.866 G_L1: 13.567 D_real: 0.037 D_fake: 0.008 \n",
            "saving the model at the end of epoch 495, iters 146520\n",
            "End of epoch 495 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000698\n",
            "(epoch: 496, iters: 80, time: 0.026, data: 0.001) G_GAN: 4.337 G_L1: 19.507 D_real: 0.124 D_fake: 0.022 \n",
            "(epoch: 496, iters: 180, time: 0.023, data: 0.002) G_GAN: 6.550 G_L1: 17.581 D_real: 0.017 D_fake: 0.062 \n",
            "(epoch: 496, iters: 280, time: 0.621, data: 0.001) G_GAN: 3.799 G_L1: 16.064 D_real: 0.213 D_fake: 0.046 \n",
            "End of epoch 496 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0000691\n",
            "(epoch: 497, iters: 84, time: 0.023, data: 0.001) G_GAN: 7.545 G_L1: 13.641 D_real: 0.016 D_fake: 0.004 \n",
            "(epoch: 497, iters: 184, time: 0.028, data: 0.002) G_GAN: 7.203 G_L1: 13.793 D_real: 0.093 D_fake: 0.018 \n",
            "(epoch: 497, iters: 284, time: 0.032, data: 0.001) G_GAN: 7.099 G_L1: 15.635 D_real: 0.000 D_fake: 0.003 \n",
            "End of epoch 497 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0000684\n",
            "(epoch: 498, iters: 88, time: 0.494, data: 0.001) G_GAN: 6.489 G_L1: 16.635 D_real: 0.036 D_fake: 0.010 \n",
            "(epoch: 498, iters: 188, time: 0.024, data: 0.002) G_GAN: 5.327 G_L1: 13.333 D_real: 0.001 D_fake: 0.020 \n",
            "(epoch: 498, iters: 288, time: 0.023, data: 0.001) G_GAN: 5.563 G_L1: 15.031 D_real: 0.046 D_fake: 0.021 \n",
            "End of epoch 498 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000678\n",
            "(epoch: 499, iters: 92, time: 0.031, data: 0.001) G_GAN: 8.529 G_L1: 18.738 D_real: 0.001 D_fake: 0.002 \n",
            "(epoch: 499, iters: 192, time: 0.482, data: 0.001) G_GAN: 8.484 G_L1: 16.534 D_real: 0.021 D_fake: 0.002 \n",
            "(epoch: 499, iters: 292, time: 0.023, data: 0.001) G_GAN: 5.424 G_L1: 15.017 D_real: 0.000 D_fake: 0.199 \n",
            "End of epoch 499 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000671\n",
            "(epoch: 500, iters: 96, time: 0.025, data: 0.001) G_GAN: 5.763 G_L1: 21.421 D_real: 0.003 D_fake: 0.056 \n",
            "(epoch: 500, iters: 196, time: 0.026, data: 0.001) G_GAN: 8.558 G_L1: 18.997 D_real: 0.002 D_fake: 0.006 \n",
            "(epoch: 500, iters: 296, time: 0.517, data: 0.001) G_GAN: 5.458 G_L1: 14.250 D_real: 0.002 D_fake: 0.033 \n",
            "saving the model at the end of epoch 500, iters 148000\n",
            "End of epoch 500 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000664\n",
            "(epoch: 501, iters: 100, time: 0.025, data: 0.104) G_GAN: 8.105 G_L1: 14.317 D_real: 0.156 D_fake: 0.001 \n",
            "(epoch: 501, iters: 200, time: 0.024, data: 0.001) G_GAN: 6.455 G_L1: 12.797 D_real: 0.059 D_fake: 0.009 \n",
            "End of epoch 501 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000658\n",
            "(epoch: 502, iters: 4, time: 0.034, data: 0.001) G_GAN: 7.996 G_L1: 16.936 D_real: 0.006 D_fake: 0.010 \n",
            "(epoch: 502, iters: 104, time: 0.459, data: 0.000) G_GAN: 8.369 G_L1: 14.828 D_real: 0.028 D_fake: 0.002 \n",
            "(epoch: 502, iters: 204, time: 0.024, data: 0.001) G_GAN: 5.292 G_L1: 15.322 D_real: 0.000 D_fake: 0.206 \n",
            "End of epoch 502 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0000651\n",
            "(epoch: 503, iters: 8, time: 0.024, data: 0.001) G_GAN: 5.143 G_L1: 12.945 D_real: 0.018 D_fake: 0.019 \n",
            "(epoch: 503, iters: 108, time: 0.023, data: 0.001) G_GAN: 5.326 G_L1: 13.214 D_real: 0.001 D_fake: 0.025 \n",
            "(epoch: 503, iters: 208, time: 0.539, data: 0.001) G_GAN: 4.568 G_L1: 13.799 D_real: 0.002 D_fake: 0.098 \n",
            "End of epoch 503 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000645\n",
            "(epoch: 504, iters: 12, time: 0.023, data: 0.002) G_GAN: 9.881 G_L1: 20.069 D_real: 0.020 D_fake: 0.000 \n",
            "(epoch: 504, iters: 112, time: 0.023, data: 0.001) G_GAN: 5.800 G_L1: 13.921 D_real: 0.330 D_fake: 0.006 \n",
            "(epoch: 504, iters: 212, time: 0.030, data: 0.001) G_GAN: 5.318 G_L1: 16.981 D_real: 0.003 D_fake: 0.031 \n",
            "End of epoch 504 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0000638\n",
            "(epoch: 505, iters: 16, time: 0.508, data: 0.001) G_GAN: 4.300 G_L1: 11.533 D_real: 0.003 D_fake: 0.047 \n",
            "(epoch: 505, iters: 116, time: 0.029, data: 0.001) G_GAN: 5.910 G_L1: 14.022 D_real: 0.005 D_fake: 0.010 \n",
            "(epoch: 505, iters: 216, time: 0.024, data: 0.002) G_GAN: 6.340 G_L1: 13.734 D_real: 0.045 D_fake: 0.015 \n",
            "saving the model at the end of epoch 505, iters 149480\n",
            "End of epoch 505 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0000631\n",
            "(epoch: 506, iters: 20, time: 0.025, data: 0.001) G_GAN: 8.085 G_L1: 17.649 D_real: 0.019 D_fake: 0.012 \n",
            "(epoch: 506, iters: 120, time: 0.491, data: 0.001) G_GAN: 8.004 G_L1: 19.384 D_real: 0.019 D_fake: 0.002 \n",
            "(epoch: 506, iters: 220, time: 0.023, data: 0.002) G_GAN: 6.228 G_L1: 16.309 D_real: 0.007 D_fake: 0.009 \n",
            "End of epoch 506 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0000625\n",
            "(epoch: 507, iters: 24, time: 0.034, data: 0.001) G_GAN: 7.446 G_L1: 12.931 D_real: 0.001 D_fake: 0.002 \n",
            "(epoch: 507, iters: 124, time: 0.024, data: 0.001) G_GAN: 7.359 G_L1: 12.693 D_real: 0.028 D_fake: 1.460 \n",
            "(epoch: 507, iters: 224, time: 0.481, data: 0.002) G_GAN: 7.769 G_L1: 14.350 D_real: 0.035 D_fake: 0.001 \n",
            "saving the latest model (epoch 507, total_iters 150000)\n",
            "End of epoch 507 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000618\n",
            "(epoch: 508, iters: 28, time: 0.029, data: 0.002) G_GAN: 6.578 G_L1: 13.790 D_real: 0.011 D_fake: 0.009 \n",
            "(epoch: 508, iters: 128, time: 0.024, data: 0.002) G_GAN: 5.970 G_L1: 17.286 D_real: 0.002 D_fake: 0.028 \n",
            "(epoch: 508, iters: 228, time: 0.025, data: 0.001) G_GAN: 6.109 G_L1: 14.643 D_real: 0.001 D_fake: 0.010 \n",
            "End of epoch 508 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000611\n",
            "(epoch: 509, iters: 32, time: 0.507, data: 0.002) G_GAN: 7.781 G_L1: 20.947 D_real: 0.077 D_fake: 0.008 \n",
            "(epoch: 509, iters: 132, time: 0.024, data: 0.001) G_GAN: 4.668 G_L1: 13.858 D_real: 0.033 D_fake: 0.048 \n",
            "(epoch: 509, iters: 232, time: 0.024, data: 0.001) G_GAN: 6.510 G_L1: 17.143 D_real: 0.032 D_fake: 0.007 \n",
            "End of epoch 509 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000605\n",
            "(epoch: 510, iters: 36, time: 0.024, data: 0.001) G_GAN: 9.409 G_L1: 15.127 D_real: 0.014 D_fake: 0.002 \n",
            "(epoch: 510, iters: 136, time: 0.457, data: 0.001) G_GAN: 4.116 G_L1: 13.369 D_real: 0.005 D_fake: 0.068 \n",
            "(epoch: 510, iters: 236, time: 0.025, data: 0.002) G_GAN: 8.218 G_L1: 15.583 D_real: 0.007 D_fake: 0.001 \n",
            "saving the model at the end of epoch 510, iters 150960\n",
            "End of epoch 510 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000598\n",
            "(epoch: 511, iters: 40, time: 0.024, data: 0.001) G_GAN: 5.762 G_L1: 15.032 D_real: 0.000 D_fake: 0.032 \n",
            "(epoch: 511, iters: 140, time: 0.024, data: 0.001) G_GAN: 5.581 G_L1: 12.958 D_real: 0.040 D_fake: 0.016 \n",
            "(epoch: 511, iters: 240, time: 0.706, data: 0.001) G_GAN: 5.538 G_L1: 14.885 D_real: 0.010 D_fake: 0.020 \n",
            "End of epoch 511 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0000591\n",
            "(epoch: 512, iters: 44, time: 0.024, data: 0.001) G_GAN: 6.689 G_L1: 14.406 D_real: 0.000 D_fake: 0.006 \n",
            "(epoch: 512, iters: 144, time: 0.027, data: 0.001) G_GAN: 6.638 G_L1: 14.900 D_real: 0.007 D_fake: 0.003 \n",
            "(epoch: 512, iters: 244, time: 0.025, data: 0.001) G_GAN: 6.728 G_L1: 13.688 D_real: 0.000 D_fake: 0.014 \n",
            "End of epoch 512 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000585\n",
            "(epoch: 513, iters: 48, time: 0.500, data: 0.002) G_GAN: 7.132 G_L1: 15.321 D_real: 0.003 D_fake: 0.006 \n",
            "(epoch: 513, iters: 148, time: 0.025, data: 0.001) G_GAN: 7.612 G_L1: 14.178 D_real: 0.010 D_fake: 0.004 \n",
            "(epoch: 513, iters: 248, time: 0.024, data: 0.001) G_GAN: 6.829 G_L1: 14.536 D_real: 0.019 D_fake: 0.034 \n",
            "End of epoch 513 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000578\n",
            "(epoch: 514, iters: 52, time: 0.023, data: 0.001) G_GAN: 6.140 G_L1: 18.659 D_real: 0.023 D_fake: 0.018 \n",
            "(epoch: 514, iters: 152, time: 0.504, data: 0.001) G_GAN: 9.167 G_L1: 13.604 D_real: 0.006 D_fake: 0.001 \n",
            "(epoch: 514, iters: 252, time: 0.029, data: 0.001) G_GAN: 4.271 G_L1: 14.894 D_real: 0.034 D_fake: 0.111 \n",
            "End of epoch 514 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000571\n",
            "(epoch: 515, iters: 56, time: 0.023, data: 0.001) G_GAN: 4.515 G_L1: 13.992 D_real: 0.011 D_fake: 0.137 \n",
            "(epoch: 515, iters: 156, time: 0.035, data: 0.001) G_GAN: 5.666 G_L1: 13.363 D_real: 0.007 D_fake: 0.011 \n",
            "(epoch: 515, iters: 256, time: 0.463, data: 0.002) G_GAN: 8.609 G_L1: 15.156 D_real: 0.001 D_fake: 0.003 \n",
            "saving the model at the end of epoch 515, iters 152440\n",
            "End of epoch 515 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000565\n",
            "(epoch: 516, iters: 60, time: 0.023, data: 0.001) G_GAN: 5.361 G_L1: 18.521 D_real: 0.356 D_fake: 0.026 \n",
            "(epoch: 516, iters: 160, time: 0.025, data: 0.001) G_GAN: 8.687 G_L1: 15.805 D_real: 0.001 D_fake: 0.002 \n",
            "(epoch: 516, iters: 260, time: 0.023, data: 0.001) G_GAN: 6.786 G_L1: 14.584 D_real: 0.008 D_fake: 0.008 \n",
            "End of epoch 516 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0000558\n",
            "(epoch: 517, iters: 64, time: 0.529, data: 0.001) G_GAN: 9.129 G_L1: 12.898 D_real: 0.005 D_fake: 0.001 \n",
            "(epoch: 517, iters: 164, time: 0.024, data: 0.002) G_GAN: 10.025 G_L1: 16.232 D_real: 0.307 D_fake: 0.000 \n",
            "(epoch: 517, iters: 264, time: 0.028, data: 0.001) G_GAN: 6.892 G_L1: 17.853 D_real: 0.000 D_fake: 0.007 \n",
            "End of epoch 517 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0000551\n",
            "(epoch: 518, iters: 68, time: 0.029, data: 0.001) G_GAN: 5.428 G_L1: 14.960 D_real: 0.175 D_fake: 0.008 \n",
            "(epoch: 518, iters: 168, time: 0.494, data: 0.001) G_GAN: 7.057 G_L1: 14.738 D_real: 0.009 D_fake: 0.581 \n",
            "(epoch: 518, iters: 268, time: 0.028, data: 0.001) G_GAN: 7.444 G_L1: 13.405 D_real: 0.319 D_fake: 0.002 \n",
            "End of epoch 518 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000545\n",
            "(epoch: 519, iters: 72, time: 0.023, data: 0.001) G_GAN: 7.209 G_L1: 17.889 D_real: 0.002 D_fake: 0.003 \n",
            "(epoch: 519, iters: 172, time: 0.024, data: 0.001) G_GAN: 5.008 G_L1: 12.887 D_real: 0.002 D_fake: 0.027 \n",
            "(epoch: 519, iters: 272, time: 0.483, data: 0.001) G_GAN: 5.977 G_L1: 17.369 D_real: 0.023 D_fake: 0.435 \n",
            "End of epoch 519 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000538\n",
            "(epoch: 520, iters: 76, time: 0.024, data: 0.002) G_GAN: 5.377 G_L1: 12.822 D_real: 0.001 D_fake: 0.021 \n",
            "(epoch: 520, iters: 176, time: 0.029, data: 0.001) G_GAN: 7.317 G_L1: 14.987 D_real: 0.013 D_fake: 0.006 \n",
            "(epoch: 520, iters: 276, time: 0.024, data: 0.001) G_GAN: 5.646 G_L1: 14.587 D_real: 0.006 D_fake: 0.031 \n",
            "saving the model at the end of epoch 520, iters 153920\n",
            "End of epoch 520 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0000532\n",
            "(epoch: 521, iters: 80, time: 0.522, data: 0.001) G_GAN: 9.681 G_L1: 14.444 D_real: 0.072 D_fake: 0.000 \n",
            "(epoch: 521, iters: 180, time: 0.024, data: 0.001) G_GAN: 7.072 G_L1: 17.445 D_real: 0.108 D_fake: 0.019 \n",
            "(epoch: 521, iters: 280, time: 0.025, data: 0.001) G_GAN: 4.473 G_L1: 15.126 D_real: 0.013 D_fake: 0.034 \n",
            "End of epoch 521 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000525\n",
            "(epoch: 522, iters: 84, time: 0.023, data: 0.001) G_GAN: 6.943 G_L1: 14.238 D_real: 0.203 D_fake: 0.002 \n",
            "(epoch: 522, iters: 184, time: 0.497, data: 0.001) G_GAN: 9.180 G_L1: 12.842 D_real: 0.074 D_fake: 0.001 \n",
            "(epoch: 522, iters: 284, time: 0.024, data: 0.002) G_GAN: 12.463 G_L1: 18.541 D_real: 0.003 D_fake: 0.000 \n",
            "End of epoch 522 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000518\n",
            "(epoch: 523, iters: 88, time: 0.023, data: 0.001) G_GAN: 7.393 G_L1: 15.412 D_real: 0.008 D_fake: 0.011 \n",
            "(epoch: 523, iters: 188, time: 0.024, data: 0.001) G_GAN: 5.716 G_L1: 16.013 D_real: 0.001 D_fake: 0.033 \n",
            "(epoch: 523, iters: 288, time: 0.479, data: 0.001) G_GAN: 6.163 G_L1: 14.518 D_real: 0.009 D_fake: 0.011 \n",
            "End of epoch 523 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000512\n",
            "(epoch: 524, iters: 92, time: 0.024, data: 0.001) G_GAN: 6.301 G_L1: 15.881 D_real: 0.001 D_fake: 0.474 \n",
            "(epoch: 524, iters: 192, time: 0.024, data: 0.001) G_GAN: 7.988 G_L1: 14.118 D_real: 0.009 D_fake: 0.607 \n",
            "saving the latest model (epoch 524, total_iters 155000)\n",
            "(epoch: 524, iters: 292, time: 0.022, data: 0.002) G_GAN: 6.079 G_L1: 15.555 D_real: 0.004 D_fake: 0.013 \n",
            "End of epoch 524 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000505\n",
            "(epoch: 525, iters: 96, time: 0.515, data: 0.001) G_GAN: 6.581 G_L1: 15.053 D_real: 0.036 D_fake: 0.006 \n",
            "(epoch: 525, iters: 196, time: 0.023, data: 0.001) G_GAN: 10.055 G_L1: 13.126 D_real: 0.107 D_fake: 0.000 \n",
            "(epoch: 525, iters: 296, time: 0.027, data: 0.001) G_GAN: 5.007 G_L1: 13.717 D_real: 0.005 D_fake: 0.026 \n",
            "saving the model at the end of epoch 525, iters 155400\n",
            "End of epoch 525 / 600 \t Time Taken: 10 sec\n",
            "learning rate = 0.0000498\n",
            "(epoch: 526, iters: 100, time: 0.031, data: 0.117) G_GAN: 7.199 G_L1: 14.735 D_real: 0.020 D_fake: 0.005 \n",
            "(epoch: 526, iters: 200, time: 1.128, data: 0.001) G_GAN: 8.031 G_L1: 15.397 D_real: 0.029 D_fake: 0.002 \n",
            "End of epoch 526 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0000492\n",
            "(epoch: 527, iters: 4, time: 0.034, data: 0.001) G_GAN: 8.679 G_L1: 17.289 D_real: 0.018 D_fake: 0.001 \n",
            "(epoch: 527, iters: 104, time: 0.029, data: 0.000) G_GAN: 8.664 G_L1: 15.520 D_real: 0.007 D_fake: 0.001 \n",
            "(epoch: 527, iters: 204, time: 0.031, data: 0.001) G_GAN: 5.165 G_L1: 17.462 D_real: 0.000 D_fake: 0.222 \n",
            "End of epoch 527 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000485\n",
            "(epoch: 528, iters: 8, time: 0.489, data: 0.001) G_GAN: 5.272 G_L1: 14.032 D_real: 0.003 D_fake: 0.138 \n",
            "(epoch: 528, iters: 108, time: 0.023, data: 0.000) G_GAN: 5.723 G_L1: 14.772 D_real: 0.006 D_fake: 0.026 \n",
            "(epoch: 528, iters: 208, time: 0.023, data: 0.001) G_GAN: 5.310 G_L1: 14.208 D_real: 0.016 D_fake: 0.231 \n",
            "End of epoch 528 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000478\n",
            "(epoch: 529, iters: 12, time: 0.024, data: 0.001) G_GAN: 6.844 G_L1: 16.039 D_real: 0.107 D_fake: 0.016 \n",
            "(epoch: 529, iters: 112, time: 0.530, data: 0.001) G_GAN: 7.399 G_L1: 15.822 D_real: 0.001 D_fake: 0.006 \n",
            "(epoch: 529, iters: 212, time: 0.023, data: 0.001) G_GAN: 8.199 G_L1: 18.000 D_real: 0.033 D_fake: 0.011 \n",
            "End of epoch 529 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000472\n",
            "(epoch: 530, iters: 16, time: 0.023, data: 0.001) G_GAN: 6.983 G_L1: 15.740 D_real: 0.020 D_fake: 0.010 \n",
            "(epoch: 530, iters: 116, time: 0.023, data: 0.001) G_GAN: 7.014 G_L1: 11.876 D_real: 0.088 D_fake: 0.003 \n",
            "(epoch: 530, iters: 216, time: 0.514, data: 0.001) G_GAN: 9.956 G_L1: 15.088 D_real: 0.008 D_fake: 0.001 \n",
            "saving the model at the end of epoch 530, iters 156880\n",
            "End of epoch 530 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000465\n",
            "(epoch: 531, iters: 20, time: 0.025, data: 0.001) G_GAN: 7.736 G_L1: 13.597 D_real: 0.007 D_fake: 0.002 \n",
            "(epoch: 531, iters: 120, time: 0.024, data: 0.001) G_GAN: 7.076 G_L1: 13.935 D_real: 0.024 D_fake: 0.003 \n",
            "(epoch: 531, iters: 220, time: 0.023, data: 0.001) G_GAN: 4.762 G_L1: 13.291 D_real: 0.006 D_fake: 0.111 \n",
            "End of epoch 531 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000458\n",
            "(epoch: 532, iters: 24, time: 0.547, data: 0.001) G_GAN: 8.551 G_L1: 14.932 D_real: 0.011 D_fake: 0.001 \n",
            "(epoch: 532, iters: 124, time: 0.023, data: 0.001) G_GAN: 7.589 G_L1: 14.007 D_real: 0.005 D_fake: 0.004 \n",
            "(epoch: 532, iters: 224, time: 0.024, data: 0.001) G_GAN: 6.923 G_L1: 14.740 D_real: 0.009 D_fake: 0.010 \n",
            "End of epoch 532 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000452\n",
            "(epoch: 533, iters: 28, time: 0.022, data: 0.001) G_GAN: 5.095 G_L1: 14.414 D_real: 0.001 D_fake: 0.035 \n",
            "(epoch: 533, iters: 128, time: 0.470, data: 0.001) G_GAN: 5.038 G_L1: 19.881 D_real: 0.006 D_fake: 0.036 \n",
            "(epoch: 533, iters: 228, time: 0.023, data: 0.002) G_GAN: 5.107 G_L1: 15.395 D_real: 0.010 D_fake: 0.074 \n",
            "End of epoch 533 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000445\n",
            "(epoch: 534, iters: 32, time: 0.026, data: 0.001) G_GAN: 7.013 G_L1: 15.850 D_real: 0.002 D_fake: 0.031 \n",
            "(epoch: 534, iters: 132, time: 0.024, data: 0.001) G_GAN: 9.715 G_L1: 15.075 D_real: 0.028 D_fake: 0.000 \n",
            "(epoch: 534, iters: 232, time: 0.529, data: 0.001) G_GAN: 5.951 G_L1: 16.150 D_real: 0.000 D_fake: 0.026 \n",
            "End of epoch 534 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000439\n",
            "(epoch: 535, iters: 36, time: 0.024, data: 0.001) G_GAN: 5.436 G_L1: 15.318 D_real: 0.002 D_fake: 0.272 \n",
            "(epoch: 535, iters: 136, time: 0.023, data: 0.001) G_GAN: 9.550 G_L1: 20.449 D_real: 0.047 D_fake: 0.000 \n",
            "(epoch: 535, iters: 236, time: 0.024, data: 0.001) G_GAN: 5.573 G_L1: 12.091 D_real: 0.011 D_fake: 0.321 \n",
            "saving the model at the end of epoch 535, iters 158360\n",
            "End of epoch 535 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000432\n",
            "(epoch: 536, iters: 40, time: 0.526, data: 0.001) G_GAN: 8.374 G_L1: 13.329 D_real: 0.004 D_fake: 0.001 \n",
            "(epoch: 536, iters: 140, time: 0.027, data: 0.001) G_GAN: 4.379 G_L1: 15.927 D_real: 0.003 D_fake: 0.126 \n",
            "(epoch: 536, iters: 240, time: 0.023, data: 0.001) G_GAN: 5.663 G_L1: 15.774 D_real: 0.003 D_fake: 0.266 \n",
            "End of epoch 536 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0000425\n",
            "(epoch: 537, iters: 44, time: 0.023, data: 0.001) G_GAN: 5.516 G_L1: 14.409 D_real: 0.136 D_fake: 0.016 \n",
            "(epoch: 537, iters: 144, time: 0.501, data: 0.001) G_GAN: 5.099 G_L1: 16.942 D_real: 0.024 D_fake: 0.171 \n",
            "(epoch: 537, iters: 244, time: 0.024, data: 0.002) G_GAN: 8.080 G_L1: 13.669 D_real: 0.004 D_fake: 0.001 \n",
            "End of epoch 537 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000419\n",
            "(epoch: 538, iters: 48, time: 0.023, data: 0.001) G_GAN: 5.755 G_L1: 14.003 D_real: 0.006 D_fake: 0.022 \n",
            "(epoch: 538, iters: 148, time: 0.024, data: 0.001) G_GAN: 6.516 G_L1: 13.070 D_real: 0.002 D_fake: 0.760 \n",
            "(epoch: 538, iters: 248, time: 0.524, data: 0.001) G_GAN: 6.230 G_L1: 13.103 D_real: 0.102 D_fake: 0.007 \n",
            "End of epoch 538 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000412\n",
            "(epoch: 539, iters: 52, time: 0.024, data: 0.002) G_GAN: 6.213 G_L1: 13.314 D_real: 0.036 D_fake: 0.037 \n",
            "(epoch: 539, iters: 152, time: 0.024, data: 0.001) G_GAN: 10.009 G_L1: 18.557 D_real: 0.001 D_fake: 0.000 \n",
            "(epoch: 539, iters: 252, time: 0.023, data: 0.001) G_GAN: 7.488 G_L1: 15.182 D_real: 0.057 D_fake: 0.008 \n",
            "End of epoch 539 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0000405\n",
            "(epoch: 540, iters: 56, time: 0.520, data: 0.001) G_GAN: 5.156 G_L1: 14.476 D_real: 0.007 D_fake: 0.050 \n",
            "(epoch: 540, iters: 156, time: 0.032, data: 0.001) G_GAN: 6.898 G_L1: 17.610 D_real: 0.001 D_fake: 0.013 \n",
            "(epoch: 540, iters: 256, time: 0.023, data: 0.001) G_GAN: 5.239 G_L1: 10.890 D_real: 0.009 D_fake: 0.365 \n",
            "saving the model at the end of epoch 540, iters 159840\n",
            "End of epoch 540 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0000399\n",
            "(epoch: 541, iters: 60, time: 0.024, data: 0.001) G_GAN: 4.745 G_L1: 16.386 D_real: 0.077 D_fake: 0.025 \n",
            "(epoch: 541, iters: 160, time: 0.531, data: 0.001) G_GAN: 9.973 G_L1: 15.769 D_real: 0.003 D_fake: 0.001 \n",
            "saving the latest model (epoch 541, total_iters 160000)\n",
            "(epoch: 541, iters: 260, time: 0.023, data: 0.002) G_GAN: 9.219 G_L1: 14.906 D_real: 0.018 D_fake: 0.001 \n",
            "End of epoch 541 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0000392\n",
            "(epoch: 542, iters: 64, time: 0.032, data: 0.001) G_GAN: 7.694 G_L1: 14.643 D_real: 0.001 D_fake: 0.002 \n",
            "(epoch: 542, iters: 164, time: 0.025, data: 0.001) G_GAN: 7.297 G_L1: 16.812 D_real: 0.011 D_fake: 0.004 \n",
            "(epoch: 542, iters: 264, time: 0.475, data: 0.001) G_GAN: 4.523 G_L1: 14.974 D_real: 0.003 D_fake: 0.047 \n",
            "End of epoch 542 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000385\n",
            "(epoch: 543, iters: 68, time: 0.023, data: 0.001) G_GAN: 7.913 G_L1: 12.873 D_real: 0.012 D_fake: 0.002 \n",
            "(epoch: 543, iters: 168, time: 0.024, data: 0.001) G_GAN: 6.440 G_L1: 17.894 D_real: 0.013 D_fake: 0.009 \n",
            "(epoch: 543, iters: 268, time: 0.024, data: 0.001) G_GAN: 6.084 G_L1: 14.714 D_real: 0.010 D_fake: 0.006 \n",
            "End of epoch 543 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0000379\n",
            "(epoch: 544, iters: 72, time: 0.518, data: 0.001) G_GAN: 7.118 G_L1: 14.717 D_real: 0.008 D_fake: 0.008 \n",
            "(epoch: 544, iters: 172, time: 0.024, data: 0.002) G_GAN: 7.980 G_L1: 15.805 D_real: 0.001 D_fake: 0.007 \n",
            "(epoch: 544, iters: 272, time: 0.024, data: 0.001) G_GAN: 8.887 G_L1: 18.769 D_real: 0.001 D_fake: 0.001 \n",
            "End of epoch 544 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000372\n",
            "(epoch: 545, iters: 76, time: 0.023, data: 0.001) G_GAN: 8.596 G_L1: 13.989 D_real: 0.010 D_fake: 0.002 \n",
            "(epoch: 545, iters: 176, time: 0.535, data: 0.001) G_GAN: 8.360 G_L1: 19.862 D_real: 0.000 D_fake: 0.002 \n",
            "(epoch: 545, iters: 276, time: 0.023, data: 0.002) G_GAN: 8.515 G_L1: 13.534 D_real: 0.013 D_fake: 0.001 \n",
            "saving the model at the end of epoch 545, iters 161320\n",
            "End of epoch 545 / 600 \t Time Taken: 10 sec\n",
            "learning rate = 0.0000365\n",
            "(epoch: 546, iters: 80, time: 0.023, data: 0.001) G_GAN: 6.913 G_L1: 11.054 D_real: 0.044 D_fake: 0.004 \n",
            "(epoch: 546, iters: 180, time: 0.030, data: 0.001) G_GAN: 6.331 G_L1: 13.685 D_real: 0.000 D_fake: 0.005 \n",
            "(epoch: 546, iters: 280, time: 0.478, data: 0.001) G_GAN: 5.237 G_L1: 13.981 D_real: 0.003 D_fake: 0.023 \n",
            "End of epoch 546 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0000359\n",
            "(epoch: 547, iters: 84, time: 0.023, data: 0.001) G_GAN: 5.981 G_L1: 12.694 D_real: 0.017 D_fake: 0.015 \n",
            "(epoch: 547, iters: 184, time: 0.031, data: 0.001) G_GAN: 5.351 G_L1: 12.437 D_real: 0.015 D_fake: 0.020 \n",
            "(epoch: 547, iters: 284, time: 0.032, data: 0.001) G_GAN: 7.650 G_L1: 15.110 D_real: 0.000 D_fake: 0.006 \n",
            "End of epoch 547 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0000352\n",
            "(epoch: 548, iters: 88, time: 0.569, data: 0.002) G_GAN: 8.268 G_L1: 15.495 D_real: 0.002 D_fake: 0.002 \n",
            "(epoch: 548, iters: 188, time: 0.031, data: 0.002) G_GAN: 7.621 G_L1: 15.764 D_real: 0.012 D_fake: 0.002 \n",
            "(epoch: 548, iters: 288, time: 0.025, data: 0.002) G_GAN: 8.210 G_L1: 14.232 D_real: 0.016 D_fake: 0.002 \n",
            "End of epoch 548 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000346\n",
            "(epoch: 549, iters: 92, time: 0.023, data: 0.001) G_GAN: 10.110 G_L1: 15.749 D_real: 0.038 D_fake: 0.000 \n",
            "(epoch: 549, iters: 192, time: 0.717, data: 0.001) G_GAN: 7.564 G_L1: 14.272 D_real: 0.006 D_fake: 0.003 \n",
            "(epoch: 549, iters: 292, time: 0.022, data: 0.002) G_GAN: 6.489 G_L1: 16.964 D_real: 0.002 D_fake: 0.008 \n",
            "End of epoch 549 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000339\n",
            "(epoch: 550, iters: 96, time: 0.023, data: 0.001) G_GAN: 6.016 G_L1: 16.268 D_real: 0.153 D_fake: 0.005 \n",
            "(epoch: 550, iters: 196, time: 0.027, data: 0.001) G_GAN: 7.584 G_L1: 17.105 D_real: 0.139 D_fake: 0.001 \n",
            "(epoch: 550, iters: 296, time: 0.545, data: 0.001) G_GAN: 10.348 G_L1: 18.275 D_real: 0.017 D_fake: 0.001 \n",
            "saving the model at the end of epoch 550, iters 162800\n",
            "End of epoch 550 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0000332\n",
            "(epoch: 551, iters: 100, time: 0.024, data: 0.130) G_GAN: 5.666 G_L1: 14.986 D_real: 0.001 D_fake: 0.014 \n",
            "(epoch: 551, iters: 200, time: 0.025, data: 0.001) G_GAN: 9.383 G_L1: 12.525 D_real: 0.016 D_fake: 0.000 \n",
            "End of epoch 551 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000326\n",
            "(epoch: 552, iters: 4, time: 0.024, data: 0.001) G_GAN: 8.968 G_L1: 12.349 D_real: 0.001 D_fake: 0.001 \n",
            "(epoch: 552, iters: 104, time: 0.497, data: 0.000) G_GAN: 5.310 G_L1: 14.127 D_real: 0.003 D_fake: 0.035 \n",
            "(epoch: 552, iters: 204, time: 0.023, data: 0.001) G_GAN: 7.839 G_L1: 18.682 D_real: 0.012 D_fake: 0.003 \n",
            "End of epoch 552 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000319\n",
            "(epoch: 553, iters: 8, time: 0.024, data: 0.001) G_GAN: 7.538 G_L1: 13.010 D_real: 0.011 D_fake: 0.004 \n",
            "(epoch: 553, iters: 108, time: 0.023, data: 0.002) G_GAN: 10.002 G_L1: 16.016 D_real: 0.087 D_fake: 0.000 \n",
            "(epoch: 553, iters: 208, time: 0.524, data: 0.001) G_GAN: 4.758 G_L1: 16.090 D_real: 0.022 D_fake: 0.123 \n",
            "End of epoch 553 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000312\n",
            "(epoch: 554, iters: 12, time: 0.023, data: 0.001) G_GAN: 6.641 G_L1: 16.730 D_real: 0.002 D_fake: 0.007 \n",
            "(epoch: 554, iters: 112, time: 0.024, data: 0.001) G_GAN: 6.757 G_L1: 13.488 D_real: 0.003 D_fake: 0.003 \n",
            "(epoch: 554, iters: 212, time: 0.025, data: 0.001) G_GAN: 9.676 G_L1: 17.970 D_real: 0.002 D_fake: 0.000 \n",
            "End of epoch 554 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0000306\n",
            "(epoch: 555, iters: 16, time: 0.689, data: 0.001) G_GAN: 5.822 G_L1: 12.661 D_real: 0.007 D_fake: 0.015 \n",
            "(epoch: 555, iters: 116, time: 0.026, data: 0.001) G_GAN: 7.008 G_L1: 13.923 D_real: 0.035 D_fake: 0.004 \n",
            "(epoch: 555, iters: 216, time: 0.024, data: 0.002) G_GAN: 4.918 G_L1: 13.343 D_real: 0.032 D_fake: 0.065 \n",
            "saving the model at the end of epoch 555, iters 164280\n",
            "End of epoch 555 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0000299\n",
            "(epoch: 556, iters: 20, time: 0.023, data: 0.002) G_GAN: 7.853 G_L1: 14.137 D_real: 0.024 D_fake: 0.002 \n",
            "(epoch: 556, iters: 120, time: 0.567, data: 0.001) G_GAN: 7.968 G_L1: 14.392 D_real: 0.063 D_fake: 0.003 \n",
            "(epoch: 556, iters: 220, time: 0.028, data: 0.001) G_GAN: 9.049 G_L1: 17.803 D_real: 0.010 D_fake: 0.001 \n",
            "End of epoch 556 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0000292\n",
            "(epoch: 557, iters: 24, time: 0.032, data: 0.002) G_GAN: 4.861 G_L1: 14.171 D_real: 0.001 D_fake: 0.330 \n",
            "(epoch: 557, iters: 124, time: 0.024, data: 0.001) G_GAN: 7.237 G_L1: 16.735 D_real: 0.000 D_fake: 0.010 \n",
            "(epoch: 557, iters: 224, time: 0.525, data: 0.001) G_GAN: 6.576 G_L1: 13.534 D_real: 0.007 D_fake: 0.005 \n",
            "End of epoch 557 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000286\n",
            "(epoch: 558, iters: 28, time: 0.024, data: 0.001) G_GAN: 5.483 G_L1: 14.964 D_real: 0.022 D_fake: 0.028 \n",
            "(epoch: 558, iters: 128, time: 0.024, data: 0.001) G_GAN: 7.051 G_L1: 13.573 D_real: 0.006 D_fake: 0.005 \n",
            "saving the latest model (epoch 558, total_iters 165000)\n",
            "(epoch: 558, iters: 228, time: 0.023, data: 0.002) G_GAN: 9.930 G_L1: 17.398 D_real: 0.108 D_fake: 0.000 \n",
            "End of epoch 558 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000279\n",
            "(epoch: 559, iters: 32, time: 0.618, data: 0.001) G_GAN: 11.124 G_L1: 13.575 D_real: 0.002 D_fake: 0.000 \n",
            "(epoch: 559, iters: 132, time: 0.030, data: 0.004) G_GAN: 8.090 G_L1: 15.226 D_real: 0.006 D_fake: 0.004 \n",
            "(epoch: 559, iters: 232, time: 0.030, data: 0.001) G_GAN: 8.196 G_L1: 17.394 D_real: 0.018 D_fake: 0.001 \n",
            "End of epoch 559 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0000272\n",
            "(epoch: 560, iters: 36, time: 0.026, data: 0.001) G_GAN: 12.046 G_L1: 16.919 D_real: 0.047 D_fake: 0.000 \n",
            "(epoch: 560, iters: 136, time: 0.540, data: 0.001) G_GAN: 6.579 G_L1: 15.120 D_real: 0.005 D_fake: 0.009 \n",
            "(epoch: 560, iters: 236, time: 0.023, data: 0.001) G_GAN: 5.189 G_L1: 14.271 D_real: 0.004 D_fake: 0.032 \n",
            "saving the model at the end of epoch 560, iters 165760\n",
            "End of epoch 560 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0000266\n",
            "(epoch: 561, iters: 40, time: 0.024, data: 0.001) G_GAN: 9.200 G_L1: 17.200 D_real: 0.011 D_fake: 0.000 \n",
            "(epoch: 561, iters: 140, time: 0.023, data: 0.001) G_GAN: 7.326 G_L1: 14.578 D_real: 0.007 D_fake: 0.002 \n",
            "(epoch: 561, iters: 240, time: 0.824, data: 0.001) G_GAN: 6.293 G_L1: 12.568 D_real: 0.020 D_fake: 0.008 \n",
            "End of epoch 561 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0000259\n",
            "(epoch: 562, iters: 44, time: 0.024, data: 0.003) G_GAN: 5.794 G_L1: 15.294 D_real: 0.008 D_fake: 0.014 \n",
            "(epoch: 562, iters: 144, time: 0.024, data: 0.001) G_GAN: 4.507 G_L1: 10.123 D_real: 0.001 D_fake: 0.265 \n",
            "(epoch: 562, iters: 244, time: 0.025, data: 0.001) G_GAN: 8.418 G_L1: 14.503 D_real: 0.007 D_fake: 0.001 \n",
            "End of epoch 562 / 600 \t Time Taken: 7 sec\n",
            "learning rate = 0.0000252\n",
            "(epoch: 563, iters: 48, time: 0.524, data: 0.001) G_GAN: 6.844 G_L1: 16.291 D_real: 0.004 D_fake: 0.009 \n",
            "(epoch: 563, iters: 148, time: 0.024, data: 0.001) G_GAN: 8.697 G_L1: 16.363 D_real: 0.004 D_fake: 0.002 \n",
            "(epoch: 563, iters: 248, time: 0.029, data: 0.001) G_GAN: 5.102 G_L1: 15.321 D_real: 0.058 D_fake: 0.043 \n",
            "End of epoch 563 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000246\n",
            "(epoch: 564, iters: 52, time: 0.024, data: 0.001) G_GAN: 9.162 G_L1: 15.689 D_real: 0.003 D_fake: 0.001 \n",
            "(epoch: 564, iters: 152, time: 0.560, data: 0.001) G_GAN: 7.755 G_L1: 13.480 D_real: 0.004 D_fake: 0.006 \n",
            "(epoch: 564, iters: 252, time: 0.023, data: 0.002) G_GAN: 7.277 G_L1: 18.527 D_real: 0.001 D_fake: 0.006 \n",
            "End of epoch 564 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000239\n",
            "(epoch: 565, iters: 56, time: 0.026, data: 0.001) G_GAN: 6.444 G_L1: 13.432 D_real: 0.029 D_fake: 0.021 \n",
            "(epoch: 565, iters: 156, time: 0.025, data: 0.001) G_GAN: 6.783 G_L1: 11.935 D_real: 0.036 D_fake: 0.010 \n",
            "(epoch: 565, iters: 256, time: 0.585, data: 0.001) G_GAN: 9.060 G_L1: 13.999 D_real: 0.000 D_fake: 0.001 \n",
            "saving the model at the end of epoch 565, iters 167240\n",
            "End of epoch 565 / 600 \t Time Taken: 10 sec\n",
            "learning rate = 0.0000233\n",
            "(epoch: 566, iters: 60, time: 0.026, data: 0.002) G_GAN: 7.957 G_L1: 13.821 D_real: 0.001 D_fake: 0.003 \n",
            "(epoch: 566, iters: 160, time: 0.032, data: 0.001) G_GAN: 7.253 G_L1: 14.165 D_real: 0.003 D_fake: 0.004 \n",
            "(epoch: 566, iters: 260, time: 0.023, data: 0.002) G_GAN: 7.608 G_L1: 12.023 D_real: 0.010 D_fake: 0.003 \n",
            "End of epoch 566 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000226\n",
            "(epoch: 567, iters: 64, time: 0.593, data: 0.001) G_GAN: 7.658 G_L1: 14.990 D_real: 0.013 D_fake: 0.004 \n",
            "(epoch: 567, iters: 164, time: 0.025, data: 0.002) G_GAN: 4.749 G_L1: 13.581 D_real: 0.031 D_fake: 0.031 \n",
            "(epoch: 567, iters: 264, time: 0.025, data: 0.001) G_GAN: 7.637 G_L1: 17.691 D_real: 0.001 D_fake: 0.003 \n",
            "End of epoch 567 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000219\n",
            "(epoch: 568, iters: 68, time: 0.024, data: 0.001) G_GAN: 8.170 G_L1: 15.967 D_real: 0.007 D_fake: 0.004 \n",
            "(epoch: 568, iters: 168, time: 0.492, data: 0.001) G_GAN: 7.306 G_L1: 15.287 D_real: 0.010 D_fake: 0.002 \n",
            "(epoch: 568, iters: 268, time: 0.024, data: 0.003) G_GAN: 4.684 G_L1: 16.136 D_real: 0.027 D_fake: 0.366 \n",
            "End of epoch 568 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000213\n",
            "(epoch: 569, iters: 72, time: 0.023, data: 0.001) G_GAN: 6.584 G_L1: 16.517 D_real: 0.009 D_fake: 0.006 \n",
            "(epoch: 569, iters: 172, time: 0.030, data: 0.001) G_GAN: 4.780 G_L1: 11.434 D_real: 0.105 D_fake: 0.025 \n",
            "(epoch: 569, iters: 272, time: 0.569, data: 0.001) G_GAN: 8.335 G_L1: 11.940 D_real: 0.026 D_fake: 0.001 \n",
            "End of epoch 569 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000206\n",
            "(epoch: 570, iters: 76, time: 0.033, data: 0.001) G_GAN: 4.910 G_L1: 13.668 D_real: 0.007 D_fake: 0.079 \n",
            "(epoch: 570, iters: 176, time: 0.026, data: 0.001) G_GAN: 7.329 G_L1: 15.704 D_real: 0.030 D_fake: 0.002 \n",
            "(epoch: 570, iters: 276, time: 0.031, data: 0.002) G_GAN: 11.868 G_L1: 15.849 D_real: 0.000 D_fake: 0.000 \n",
            "saving the model at the end of epoch 570, iters 168720\n",
            "End of epoch 570 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000199\n",
            "(epoch: 571, iters: 80, time: 0.561, data: 0.001) G_GAN: 5.289 G_L1: 11.877 D_real: 0.002 D_fake: 0.017 \n",
            "(epoch: 571, iters: 180, time: 0.023, data: 0.001) G_GAN: 6.264 G_L1: 12.611 D_real: 0.003 D_fake: 0.006 \n",
            "(epoch: 571, iters: 280, time: 0.024, data: 0.001) G_GAN: 7.590 G_L1: 15.327 D_real: 0.021 D_fake: 0.006 \n",
            "End of epoch 571 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0000193\n",
            "(epoch: 572, iters: 84, time: 0.027, data: 0.001) G_GAN: 10.727 G_L1: 13.656 D_real: 0.026 D_fake: 0.000 \n",
            "(epoch: 572, iters: 184, time: 0.562, data: 0.001) G_GAN: 4.906 G_L1: 15.726 D_real: 0.011 D_fake: 0.219 \n",
            "(epoch: 572, iters: 284, time: 0.023, data: 0.001) G_GAN: 5.401 G_L1: 11.606 D_real: 0.008 D_fake: 0.043 \n",
            "End of epoch 572 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000186\n",
            "(epoch: 573, iters: 88, time: 0.024, data: 0.001) G_GAN: 5.666 G_L1: 18.993 D_real: 0.046 D_fake: 0.007 \n",
            "(epoch: 573, iters: 188, time: 0.024, data: 0.002) G_GAN: 5.858 G_L1: 13.158 D_real: 0.006 D_fake: 0.017 \n",
            "(epoch: 573, iters: 288, time: 0.556, data: 0.001) G_GAN: 6.457 G_L1: 15.470 D_real: 0.020 D_fake: 0.047 \n",
            "End of epoch 573 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000179\n",
            "(epoch: 574, iters: 92, time: 0.024, data: 0.002) G_GAN: 6.626 G_L1: 14.214 D_real: 0.008 D_fake: 0.022 \n",
            "(epoch: 574, iters: 192, time: 0.024, data: 0.001) G_GAN: 6.202 G_L1: 17.052 D_real: 0.000 D_fake: 0.009 \n",
            "(epoch: 574, iters: 292, time: 0.025, data: 0.001) G_GAN: 9.134 G_L1: 14.740 D_real: 0.002 D_fake: 0.001 \n",
            "End of epoch 574 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000173\n",
            "(epoch: 575, iters: 96, time: 0.727, data: 0.001) G_GAN: 6.338 G_L1: 15.198 D_real: 0.011 D_fake: 0.013 \n",
            "saving the latest model (epoch 575, total_iters 170000)\n",
            "(epoch: 575, iters: 196, time: 0.025, data: 0.002) G_GAN: 7.440 G_L1: 15.017 D_real: 0.073 D_fake: 0.001 \n",
            "(epoch: 575, iters: 296, time: 0.022, data: 0.001) G_GAN: 5.845 G_L1: 14.629 D_real: 0.007 D_fake: 0.018 \n",
            "saving the model at the end of epoch 575, iters 170200\n",
            "End of epoch 575 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0000166\n",
            "(epoch: 576, iters: 100, time: 0.023, data: 0.131) G_GAN: 8.010 G_L1: 13.944 D_real: 0.002 D_fake: 0.003 \n",
            "(epoch: 576, iters: 200, time: 0.809, data: 0.001) G_GAN: 6.886 G_L1: 13.861 D_real: 0.012 D_fake: 0.003 \n",
            "End of epoch 576 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0000159\n",
            "(epoch: 577, iters: 4, time: 0.034, data: 0.001) G_GAN: 6.165 G_L1: 15.199 D_real: 0.014 D_fake: 0.010 \n",
            "(epoch: 577, iters: 104, time: 0.023, data: 0.000) G_GAN: 8.139 G_L1: 14.294 D_real: 0.001 D_fake: 0.002 \n",
            "(epoch: 577, iters: 204, time: 0.024, data: 0.001) G_GAN: 7.704 G_L1: 14.502 D_real: 0.003 D_fake: 0.001 \n",
            "End of epoch 577 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000153\n",
            "(epoch: 578, iters: 8, time: 0.583, data: 0.002) G_GAN: 9.966 G_L1: 17.962 D_real: 0.013 D_fake: 0.000 \n",
            "(epoch: 578, iters: 108, time: 0.025, data: 0.001) G_GAN: 8.195 G_L1: 18.745 D_real: 0.007 D_fake: 0.004 \n",
            "(epoch: 578, iters: 208, time: 0.025, data: 0.001) G_GAN: 4.201 G_L1: 15.564 D_real: 0.080 D_fake: 0.192 \n",
            "End of epoch 578 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000146\n",
            "(epoch: 579, iters: 12, time: 0.024, data: 0.001) G_GAN: 11.296 G_L1: 17.302 D_real: 0.014 D_fake: 0.000 \n",
            "(epoch: 579, iters: 112, time: 0.519, data: 0.001) G_GAN: 4.380 G_L1: 15.614 D_real: 0.001 D_fake: 0.064 \n",
            "(epoch: 579, iters: 212, time: 0.030, data: 0.002) G_GAN: 7.174 G_L1: 21.991 D_real: 0.002 D_fake: 0.007 \n",
            "End of epoch 579 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000140\n",
            "(epoch: 580, iters: 16, time: 0.025, data: 0.002) G_GAN: 7.672 G_L1: 15.238 D_real: 0.026 D_fake: 0.002 \n",
            "(epoch: 580, iters: 116, time: 0.024, data: 0.001) G_GAN: 6.578 G_L1: 14.825 D_real: 0.068 D_fake: 0.007 \n",
            "(epoch: 580, iters: 216, time: 0.566, data: 0.001) G_GAN: 6.773 G_L1: 17.612 D_real: 0.004 D_fake: 0.009 \n",
            "saving the model at the end of epoch 580, iters 171680\n",
            "End of epoch 580 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0000133\n",
            "(epoch: 581, iters: 20, time: 0.026, data: 0.002) G_GAN: 9.666 G_L1: 16.427 D_real: 0.001 D_fake: 0.000 \n",
            "(epoch: 581, iters: 120, time: 0.023, data: 0.001) G_GAN: 5.378 G_L1: 13.639 D_real: 0.000 D_fake: 0.035 \n",
            "(epoch: 581, iters: 220, time: 0.036, data: 0.001) G_GAN: 8.457 G_L1: 16.212 D_real: 0.002 D_fake: 0.002 \n",
            "End of epoch 581 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000126\n",
            "(epoch: 582, iters: 24, time: 0.541, data: 0.001) G_GAN: 6.015 G_L1: 14.612 D_real: 0.026 D_fake: 0.006 \n",
            "(epoch: 582, iters: 124, time: 0.025, data: 0.002) G_GAN: 6.079 G_L1: 14.669 D_real: 0.019 D_fake: 0.009 \n",
            "(epoch: 582, iters: 224, time: 0.024, data: 0.002) G_GAN: 7.348 G_L1: 15.984 D_real: 0.052 D_fake: 0.002 \n",
            "End of epoch 582 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000120\n",
            "(epoch: 583, iters: 28, time: 0.025, data: 0.001) G_GAN: 9.794 G_L1: 16.622 D_real: 0.037 D_fake: 0.000 \n",
            "(epoch: 583, iters: 128, time: 0.612, data: 0.002) G_GAN: 6.136 G_L1: 14.559 D_real: 0.042 D_fake: 0.006 \n",
            "(epoch: 583, iters: 228, time: 0.024, data: 0.002) G_GAN: 4.055 G_L1: 12.170 D_real: 0.002 D_fake: 0.072 \n",
            "End of epoch 583 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000113\n",
            "(epoch: 584, iters: 32, time: 0.024, data: 0.001) G_GAN: 6.561 G_L1: 15.373 D_real: 0.008 D_fake: 0.006 \n",
            "(epoch: 584, iters: 132, time: 0.024, data: 0.002) G_GAN: 9.952 G_L1: 15.116 D_real: 0.024 D_fake: 0.001 \n",
            "(epoch: 584, iters: 232, time: 0.577, data: 0.001) G_GAN: 8.211 G_L1: 14.329 D_real: 0.011 D_fake: 0.001 \n",
            "End of epoch 584 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000106\n",
            "(epoch: 585, iters: 36, time: 0.024, data: 0.001) G_GAN: 6.006 G_L1: 15.484 D_real: 0.043 D_fake: 0.031 \n",
            "(epoch: 585, iters: 136, time: 0.024, data: 0.001) G_GAN: 3.957 G_L1: 14.656 D_real: 0.013 D_fake: 0.108 \n",
            "(epoch: 585, iters: 236, time: 0.024, data: 0.001) G_GAN: 6.990 G_L1: 11.480 D_real: 0.008 D_fake: 0.004 \n",
            "saving the model at the end of epoch 585, iters 173160\n",
            "End of epoch 585 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000100\n",
            "(epoch: 586, iters: 40, time: 0.533, data: 0.001) G_GAN: 4.966 G_L1: 14.003 D_real: 0.013 D_fake: 0.023 \n",
            "(epoch: 586, iters: 140, time: 0.024, data: 0.001) G_GAN: 4.094 G_L1: 11.500 D_real: 0.034 D_fake: 0.042 \n",
            "(epoch: 586, iters: 240, time: 0.025, data: 0.001) G_GAN: 9.452 G_L1: 15.829 D_real: 0.005 D_fake: 0.002 \n",
            "End of epoch 586 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0000093\n",
            "(epoch: 587, iters: 44, time: 0.024, data: 0.002) G_GAN: 9.504 G_L1: 12.198 D_real: 0.004 D_fake: 0.001 \n",
            "(epoch: 587, iters: 144, time: 0.577, data: 0.001) G_GAN: 10.059 G_L1: 11.802 D_real: 0.007 D_fake: 0.000 \n",
            "(epoch: 587, iters: 244, time: 0.023, data: 0.002) G_GAN: 8.565 G_L1: 14.484 D_real: 0.000 D_fake: 0.001 \n",
            "End of epoch 587 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000086\n",
            "(epoch: 588, iters: 48, time: 0.024, data: 0.001) G_GAN: 8.264 G_L1: 14.259 D_real: 0.001 D_fake: 0.002 \n",
            "(epoch: 588, iters: 148, time: 0.025, data: 0.001) G_GAN: 6.129 G_L1: 12.937 D_real: 0.004 D_fake: 0.018 \n",
            "(epoch: 588, iters: 248, time: 0.560, data: 0.001) G_GAN: 4.452 G_L1: 15.508 D_real: 0.003 D_fake: 0.098 \n",
            "End of epoch 588 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000080\n",
            "(epoch: 589, iters: 52, time: 0.023, data: 0.001) G_GAN: 5.885 G_L1: 14.007 D_real: 0.003 D_fake: 0.014 \n",
            "(epoch: 589, iters: 152, time: 0.024, data: 0.001) G_GAN: 8.079 G_L1: 12.277 D_real: 0.002 D_fake: 0.002 \n",
            "(epoch: 589, iters: 252, time: 0.031, data: 0.001) G_GAN: 6.550 G_L1: 16.747 D_real: 0.001 D_fake: 0.014 \n",
            "End of epoch 589 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000073\n",
            "(epoch: 590, iters: 56, time: 0.605, data: 0.001) G_GAN: 7.308 G_L1: 14.200 D_real: 0.098 D_fake: 0.004 \n",
            "(epoch: 590, iters: 156, time: 0.024, data: 0.002) G_GAN: 6.835 G_L1: 11.962 D_real: 0.020 D_fake: 0.003 \n",
            "(epoch: 590, iters: 256, time: 0.028, data: 0.001) G_GAN: 7.360 G_L1: 13.204 D_real: 0.018 D_fake: 0.002 \n",
            "saving the model at the end of epoch 590, iters 174640\n",
            "End of epoch 590 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0000066\n",
            "(epoch: 591, iters: 60, time: 0.024, data: 0.001) G_GAN: 6.763 G_L1: 13.898 D_real: 0.005 D_fake: 0.003 \n",
            "(epoch: 591, iters: 160, time: 0.673, data: 0.002) G_GAN: 7.950 G_L1: 14.117 D_real: 0.025 D_fake: 0.002 \n",
            "(epoch: 591, iters: 260, time: 0.024, data: 0.003) G_GAN: 7.891 G_L1: 14.439 D_real: 0.021 D_fake: 0.008 \n",
            "End of epoch 591 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0000060\n",
            "(epoch: 592, iters: 64, time: 0.025, data: 0.001) G_GAN: 7.385 G_L1: 9.492 D_real: 0.022 D_fake: 0.017 \n",
            "saving the latest model (epoch 592, total_iters 175000)\n",
            "(epoch: 592, iters: 164, time: 0.024, data: 0.002) G_GAN: 9.106 G_L1: 12.044 D_real: 0.096 D_fake: 0.001 \n",
            "(epoch: 592, iters: 264, time: 0.568, data: 0.001) G_GAN: 6.643 G_L1: 12.213 D_real: 0.132 D_fake: 0.003 \n",
            "End of epoch 592 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000053\n",
            "(epoch: 593, iters: 68, time: 0.052, data: 0.002) G_GAN: 6.211 G_L1: 14.105 D_real: 0.123 D_fake: 0.010 \n",
            "(epoch: 593, iters: 168, time: 0.024, data: 0.002) G_GAN: 5.532 G_L1: 17.722 D_real: 0.041 D_fake: 0.017 \n",
            "(epoch: 593, iters: 268, time: 0.029, data: 0.001) G_GAN: 5.288 G_L1: 14.308 D_real: 0.046 D_fake: 0.023 \n",
            "End of epoch 593 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000047\n",
            "(epoch: 594, iters: 72, time: 0.558, data: 0.001) G_GAN: 7.228 G_L1: 14.106 D_real: 0.010 D_fake: 0.009 \n",
            "(epoch: 594, iters: 172, time: 0.024, data: 0.001) G_GAN: 5.181 G_L1: 15.176 D_real: 0.007 D_fake: 0.028 \n",
            "(epoch: 594, iters: 272, time: 0.023, data: 0.001) G_GAN: 4.346 G_L1: 10.672 D_real: 0.003 D_fake: 0.049 \n",
            "End of epoch 594 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000040\n",
            "(epoch: 595, iters: 76, time: 0.025, data: 0.001) G_GAN: 8.986 G_L1: 15.840 D_real: 0.006 D_fake: 0.001 \n",
            "(epoch: 595, iters: 176, time: 0.603, data: 0.001) G_GAN: 5.841 G_L1: 12.250 D_real: 0.006 D_fake: 0.034 \n",
            "(epoch: 595, iters: 276, time: 0.025, data: 0.001) G_GAN: 7.539 G_L1: 12.649 D_real: 0.002 D_fake: 0.008 \n",
            "saving the model at the end of epoch 595, iters 176120\n",
            "End of epoch 595 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0000033\n",
            "(epoch: 596, iters: 80, time: 0.024, data: 0.001) G_GAN: 6.405 G_L1: 11.813 D_real: 0.011 D_fake: 0.009 \n",
            "(epoch: 596, iters: 180, time: 0.029, data: 0.001) G_GAN: 6.691 G_L1: 15.432 D_real: 0.005 D_fake: 0.005 \n",
            "(epoch: 596, iters: 280, time: 0.575, data: 0.001) G_GAN: 6.535 G_L1: 12.895 D_real: 0.005 D_fake: 0.005 \n",
            "End of epoch 596 / 600 \t Time Taken: 9 sec\n",
            "learning rate = 0.0000027\n",
            "(epoch: 597, iters: 84, time: 0.029, data: 0.001) G_GAN: 2.737 G_L1: 13.510 D_real: 0.002 D_fake: 0.159 \n",
            "(epoch: 597, iters: 184, time: 0.024, data: 0.001) G_GAN: 6.847 G_L1: 14.125 D_real: 0.096 D_fake: 0.010 \n",
            "(epoch: 597, iters: 284, time: 0.024, data: 0.001) G_GAN: 7.389 G_L1: 15.491 D_real: 0.006 D_fake: 0.003 \n",
            "End of epoch 597 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000020\n",
            "(epoch: 598, iters: 88, time: 0.568, data: 0.001) G_GAN: 8.391 G_L1: 16.962 D_real: 0.002 D_fake: 0.001 \n",
            "(epoch: 598, iters: 188, time: 0.030, data: 0.001) G_GAN: 5.402 G_L1: 13.572 D_real: 0.044 D_fake: 0.013 \n",
            "(epoch: 598, iters: 288, time: 0.026, data: 0.001) G_GAN: 9.129 G_L1: 12.174 D_real: 0.015 D_fake: 0.001 \n",
            "End of epoch 598 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000013\n",
            "(epoch: 599, iters: 92, time: 0.023, data: 0.001) G_GAN: 7.367 G_L1: 15.524 D_real: 0.003 D_fake: 0.002 \n",
            "(epoch: 599, iters: 192, time: 0.569, data: 0.002) G_GAN: 7.435 G_L1: 13.173 D_real: 0.018 D_fake: 0.003 \n",
            "(epoch: 599, iters: 292, time: 0.023, data: 0.001) G_GAN: 4.887 G_L1: 14.192 D_real: 0.005 D_fake: 0.017 \n",
            "End of epoch 599 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000007\n",
            "(epoch: 600, iters: 96, time: 0.024, data: 0.002) G_GAN: 4.920 G_L1: 15.637 D_real: 0.004 D_fake: 0.037 \n",
            "(epoch: 600, iters: 196, time: 0.024, data: 0.001) G_GAN: 11.758 G_L1: 11.122 D_real: 0.016 D_fake: 0.000 \n",
            "(epoch: 600, iters: 296, time: 0.544, data: 0.001) G_GAN: 4.180 G_L1: 12.437 D_real: 0.005 D_fake: 0.033 \n",
            "saving the model at the end of epoch 600, iters 177600\n",
            "End of epoch 600 / 600 \t Time Taken: 8 sec\n",
            "learning rate = 0.0000000\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9UkcaFZiyASl"
      },
      "source": [
        "# Testing\n",
        "\n",
        "-   `python test.py --dataroot ./datasets/facades --direction BtoA --model pix2pix --name facades_pix2pix`\n",
        "\n",
        "Change the `--dataroot`, `--name`, and `--direction` to be consistent with your trained model's configuration and how you want to transform images.\n",
        "\n",
        "> from https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix:\n",
        "> Note that we specified --direction BtoA as Facades dataset's A to B direction is photos to labels.\n",
        "\n",
        "> If you would like to apply a pre-trained model to a collection of input images (rather than image pairs), please use --model test option. See ./scripts/test_single.sh for how to apply a model to Facade label maps (stored in the directory facades/testB).\n",
        "\n",
        "> See a list of currently available models at ./scripts/download_pix2pix_model.sh"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uCsKkEq0yGh0",
        "outputId": "b31b7a4d-bf1a-4c75-b58b-f307d6790c6c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "for i in range(5,605,5):\n",
        "    !python test.py --dataroot '../AB' --direction AtoB --model pix2pix --name mel_pix2pix --preprocess none --netG resnet_6blocks --checkpoints_dir './checkpoints' --results_dir './results' --epoch $i"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\u001b[1;30;43mStreaming output truncated to the last 5000 lines.\u001b[0m\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/155_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_155\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 160                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/160_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_160\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 165                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/165_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_165\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 170                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/170_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_170\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 175                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/175_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_175\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 180                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/180_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_180\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 185                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/185_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_185\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 190                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/190_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_190\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 195                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/195_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_195\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 200                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/200_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_200\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 205                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/205_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_205\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 210                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/210_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_210\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 215                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/215_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_215\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 220                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/220_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_220\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 225                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/225_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_225\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 230                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/230_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_230\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 235                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/235_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_235\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 240                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/240_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_240\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 245                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/245_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_245\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 250                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/250_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_250\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 255                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/255_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_255\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 260                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/260_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_260\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 265                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/265_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_265\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 270                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/270_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_270\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 275                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/275_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_275\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 280                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/280_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_280\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 285                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/285_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_285\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 290                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/290_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_290\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 295                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/295_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_295\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 300                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/300_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_300\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 305                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/305_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_305\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 310                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/310_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_310\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 315                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/315_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_315\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 320                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/320_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_320\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 325                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/325_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_325\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 330                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/330_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_330\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 335                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/335_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_335\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 340                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/340_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_340\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 345                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/345_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_345\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 350                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/350_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_350\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 355                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/355_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_355\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 360                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/360_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_360\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 365                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/365_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_365\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 370                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/370_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_370\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 375                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/375_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_375\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 380                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/380_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_380\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 385                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/385_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_385\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 390                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/390_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_390\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 395                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/395_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_395\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 400                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/400_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_400\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 405                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/405_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_405\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 410                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/410_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_410\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 415                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/415_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_415\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 420                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/420_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_420\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 425                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/425_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_425\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 430                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/430_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_430\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 435                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/435_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_435\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 440                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/440_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_440\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 445                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/445_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_445\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 450                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/450_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_450\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 455                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/455_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_455\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 460                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/460_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_460\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 465                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/465_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_465\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 470                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/470_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_470\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 475                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/475_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_475\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 480                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/480_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_480\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 485                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/485_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_485\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 490                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/490_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_490\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 495                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/495_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_495\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 500                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/500_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_500\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 505                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/505_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_505\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 510                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/510_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_510\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 515                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/515_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_515\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 520                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/520_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_520\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 525                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/525_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_525\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 530                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/530_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_530\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 535                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/535_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_535\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 540                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/540_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_540\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 545                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/545_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_545\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 550                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/550_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_550\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 555                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/555_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_555\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 560                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/560_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_560\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 565                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/565_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_565\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 570                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/570_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_570\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 575                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/575_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_575\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 580                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/580_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_580\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 585                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/585_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_585\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 590                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/590_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_590\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 595                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/595_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_595\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n",
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB                         \t[default: None]\n",
            "             dataset_mode: aligned                       \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: 600                           \t[default: latest]\n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: pix2pix                       \t[default: test]\n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: unet_256]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: none                          \t[default: resize_and_crop]\n",
            "              results_dir: ./results                     \t[default: ./results/]\n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [AlignedDataset] was created\n",
            "initialize network with normal\n",
            "model [Pix2PixModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/600_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_600\n",
            "processing (0000)-th image... ['../AB/test/OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB/test/OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB/test/OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB/test/OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB/test/YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB/test/YAF_king.png']\n",
            "processing (0030)-th image... ['../AB/test/YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB/test/YAF_south.png']\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OzSKIPUByfiN"
      },
      "source": [
        "# Visualize"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "l4hV7C4AABmZ",
        "outputId": "2d994c68-ffb8-4d1d-bf18-773a511edcfb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "!set -ex\n",
        "!python test.py --dataroot  '../AB1' --name mel_pix2pix --model test --netG resnet_6blocks --direction AtoB --dataset_mode single --norm batch "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "----------------- Options ---------------\n",
            "             aspect_ratio: 1.0                           \n",
            "               batch_size: 1                             \n",
            "          checkpoints_dir: ./checkpoints                 \n",
            "                crop_size: 256                           \n",
            "                 dataroot: ../AB1                        \t[default: None]\n",
            "             dataset_mode: single                        \n",
            "                direction: AtoB                          \n",
            "          display_winsize: 256                           \n",
            "                    epoch: latest                        \n",
            "                     eval: False                         \n",
            "                  gpu_ids: 0                             \n",
            "                init_gain: 0.02                          \n",
            "                init_type: normal                        \n",
            "                 input_nc: 3                             \n",
            "                  isTrain: False                         \t[default: None]\n",
            "                load_iter: 0                             \t[default: 0]\n",
            "                load_size: 256                           \n",
            "         max_dataset_size: inf                           \n",
            "                    model: test                          \n",
            "             model_suffix:                               \n",
            "               n_layers_D: 3                             \n",
            "                     name: mel_pix2pix                   \t[default: experiment_name]\n",
            "                      ndf: 64                            \n",
            "                     netD: basic                         \n",
            "                     netG: resnet_6blocks                \t[default: resnet_9blocks]\n",
            "                      ngf: 64                            \n",
            "               no_dropout: False                         \n",
            "                  no_flip: False                         \n",
            "                     norm: batch                         \t[default: instance]\n",
            "                    ntest: inf                           \n",
            "                 num_test: 50                            \n",
            "              num_threads: 4                             \n",
            "                output_nc: 3                             \n",
            "                    phase: test                          \n",
            "               preprocess: resize_and_crop               \n",
            "              results_dir: ./results/                    \n",
            "           serial_batches: False                         \n",
            "                   suffix:                               \n",
            "                  verbose: False                         \n",
            "----------------- End -------------------\n",
            "dataset [SingleDataset] was created\n",
            "initialize network with normal\n",
            "model [TestModel] was created\n",
            "loading the model from ./checkpoints/mel_pix2pix/latest_net_G.pth\n",
            "---------- Networks initialized -------------\n",
            "[Network G] Total number of parameters : 7.841 M\n",
            "-----------------------------------------------\n",
            "creating web directory ./results/mel_pix2pix/test_latest\n",
            "processing (0000)-th image... ['../AB1/test/Copy of OAF_deep.png']\n",
            "processing (0005)-th image... ['../AB1/test/Copy of OAF_mess.png']\n",
            "processing (0010)-th image... ['../AB1/test/Copy of OAF_rough.png']\n",
            "processing (0015)-th image... ['../AB1/test/Copy of OAF_vine.png']\n",
            "processing (0020)-th image... ['../AB1/test/Copy of YAF_beg.png']\n",
            "processing (0025)-th image... ['../AB1/test/Copy of YAF_king.png']\n",
            "processing (0030)-th image... ['../AB1/test/Copy of YAF_pool.png']\n",
            "processing (0035)-th image... ['../AB1/test/Copy of YAF_south.png']\n",
            "processing (0040)-th image... ['../AB1/train/OAF_beg.png']\n",
            "processing (0045)-th image... ['../AB1/train/OAF_cause.png']\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bwKHOpzBG2zM",
        "outputId": "02f4fd2a-6361-49d3-b583-5bb61c265bcc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 391
        }
      },
      "source": [
        "!python -m visdom.server"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Checking for scripts.\n",
            "It's Alive!\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/lib/python3.6/runpy.py\", line 193, in _run_module_as_main\n",
            "    \"__main__\", mod_spec)\n",
            "  File \"/usr/lib/python3.6/runpy.py\", line 85, in _run_code\n",
            "    exec(code, run_globals)\n",
            "  File \"/usr/local/lib/python3.6/dist-packages/visdom/server.py\", line 1922, in <module>\n",
            "    download_scripts_and_run()\n",
            "  File \"/usr/local/lib/python3.6/dist-packages/visdom/server.py\", line 1918, in download_scripts_and_run\n",
            "    main()\n",
            "  File \"/usr/local/lib/python3.6/dist-packages/visdom/server.py\", line 1913, in main\n",
            "    use_frontend_client_polling=FLAGS.use_frontend_client_polling)\n",
            "  File \"/usr/local/lib/python3.6/dist-packages/visdom/server.py\", line 1791, in start_server\n",
            "    app.listen(port, max_buffer_size=1024 ** 3)\n",
            "  File \"/usr/local/lib/python3.6/dist-packages/tornado/web.py\", line 1944, in listen\n",
            "    server.listen(port, address)\n",
            "  File \"/usr/local/lib/python3.6/dist-packages/tornado/tcpserver.py\", line 142, in listen\n",
            "    sockets = bind_sockets(port, address=address)\n",
            "  File \"/usr/local/lib/python3.6/dist-packages/tornado/netutil.py\", line 197, in bind_sockets\n",
            "    sock.bind(sockaddr)\n",
            "OSError: [Errno 98] Address already in use\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lti54ssQDgbo",
        "outputId": "46d3eca8-94d5-4e98-98bc-d622c2dde73f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "\n",
        "os.getcwd()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'/content/drive/My Drive/pytorch-CycleGAN-and-pix2pix'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9Mgg8raPyizq",
        "outputId": "84677168-8cab-414c-d954-64ab2a8a1112",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 277
        }
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "img = plt.imread('../results/mel_pix2pix/test_latest/images/03-01-01-01-09_fake_B.png')\n",
        "plt.imshow(img)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f8d734909b0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0G3oVH9DyqLQ",
        "outputId": "3bc932e5-2aa5-4545-9bcb-e40f6378656e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 277
        }
      },
      "source": [
        "img = plt.imread('../results/mel_pix2pix/test_latest/images/03-01-01-01-09_real_A.png')\n",
        "plt.imshow(img)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f8d71bbba20>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ErK5OC1j1LH4",
        "outputId": "66435fa5-1092-4c06-d7a1-ef9b2dc564d2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 277
        }
      },
      "source": [
        "img = plt.imread('../results/mel_pix2pix/test_latest/images/03-01-01-01-09_real_B.png')\n",
        "plt.imshow(img)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f8d71bad320>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LiEGgm08Q3oH"
      },
      "source": [
        "!zip -r ./results.zip ./results\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qU8XcWvFRbcJ",
        "outputId": "82c86f46-e719-44fc-8de7-de3827b62c32",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 323
        }
      },
      "source": [
        "from google.colab import files\n",
        "files.download(\"./results.zip\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "MessageError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mMessageError\u001b[0m                              Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-29-ff11ff0d80db>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mgoogle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolab\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mfiles\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mfiles\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdownload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"./results.zip\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/google/colab/files.py\u001b[0m in \u001b[0;36mdownload\u001b[0;34m(filename)\u001b[0m\n\u001b[1;32m    176\u001b[0m       \u001b[0;34m'port'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mport\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    177\u001b[0m       \u001b[0;34m'path'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0m_os\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mabspath\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 178\u001b[0;31m       \u001b[0;34m'name'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0m_os\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbasename\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    179\u001b[0m   })\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/google/colab/output/_js.py\u001b[0m in \u001b[0;36meval_js\u001b[0;34m(script, ignore_result)\u001b[0m\n\u001b[1;32m     37\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mignore_result\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     38\u001b[0m     \u001b[0;32mreturn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 39\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0m_message\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_reply_from_input\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrequest_id\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     40\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     41\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/google/colab/_message.py\u001b[0m in \u001b[0;36mread_reply_from_input\u001b[0;34m(message_id, timeout_sec)\u001b[0m\n\u001b[1;32m    104\u001b[0m         reply.get('colab_msg_id') == message_id):\n\u001b[1;32m    105\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0;34m'error'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mreply\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 106\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mMessageError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreply\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'error'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    107\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0mreply\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'data'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    108\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mMessageError\u001b[0m: TypeError: Failed to fetch"
          ]
        }
      ]
    }
  ]
}